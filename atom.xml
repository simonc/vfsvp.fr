<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[VF svp]]></title>
  <link href="http://vfsvp.fr/atom.xml" rel="self"/>
  <link href="http://vfsvp.fr/"/>
  <updated>2014-07-30T12:13:02+02:00</updated>
  <id>http://vfsvp.fr/</id>
  <author>
    <name><![CDATA[Simon Courtois (@simonc)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Créer un parallaxe correct]]></title>
    <link href="http://vfsvp.fr/article/creer-parallaxe-correct"/>
    <updated>2014-07-16T20:00:00+02:00</updated>
    <id>http://vfsvp.fr/article/creer-parallaxe-correct</id>
    <content type="html"><![CDATA[<p>Source: <a href="https://medium.com/@dhg/82ced812e61c">Parallax Done Right de Dave Gamache</a></p>

<p>Obtenir de bonnes performance avec un parallaxe est difficile. Voici comment s&#8217;y
prendre.</p>

<p>TL;DR Il existe un certain nombre de solutions faciles pour améliorer les
performances d&#8217;un parallaxe aux scroll. Jetez un œil à
<a href="http://www.davegamache.com/parallax">cette démo</a> que j&#8217;ai créée pour voir ce
que ça donne.</p>

<!-- more -->


<p>Le parallaxe est devenu, pour le meilleur ou pour le pire, une tendance de plus
en plus populaire sur le web. Le premier site en parallaxe que j&#8217;ai vu est Ian
Coyle’s BetterWorld pour Nike. Je suis tombé amoureux. Je n&#8217;avais encore jamais
vu la technique à l&#8217;époque et cela m&#8217;a donné l&#8217;impression de quitter le web
statique quasi-PDF pour faire un pas vers le futur.</p>

<p>Depuis lors, le parallaxe a explosé. Il semble que chaque jour une nouvelle page
marketing utilise cette technique… et pour une bonne raison : correctement
effectué, ça peut avoir un rendu génial. Le problème est qu&#8217;une grande majorité
des sites utilisant le parallaxe souffrent de terribles performances au scroll.
Cela se ressent particulièrement sur les appareils avec une haute densité de
pixels comme le MacBook Pro Retina.</p>

<p>J&#8217;ai pas mal expérimenté les sites parallaxe et suis arrivé à une liste non
exhaustive de &ldquo;Faire&rdquo; et &ldquo;Ne pas faire&rdquo; qui vous aideront je l&#8217;espère à
rester sur les rails de la performance.</p>

<p>Avant de commencer, je vous encourage à regarder
<a href="http://www.davegamache.com/parallax">la démo</a> si vous ne l&#8217;avez pas déjà fait.</p>

<h2 id="quelques-faire">Quelques &ldquo;Faire&rdquo;</h2>

<p><strong>Utilisez uniquement des propriétés dont l&#8217;animation est peu coûteuse pour le
navigateur.</strong> À peu de choses près, la liste est : <em>translate3d</em>, <em>scale</em>,
<em>rotation</em> et <em>opacity</em>. Si vous utilisez autre chose il sera probablement
difficile d&#8217;atteindre 60fps (frames per second).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nx">animation</span><span class="p">.</span><span class="nx">selector</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">css</span><span class="p">({</span> <span class="s1">&#39;transform&#39;</span><span class="o">:</span> <span class="s1">&#39;translate3d(&#39;</span> <span class="o">+</span> <span class="nx">translateX</span> <span class="o">+</span><span class="s1">&#39;px, &#39;</span> <span class="o">+</span>   <span class="nx">translateY</span> <span class="o">+</span> <span class="s1">&#39;px, 0) scale(&#39;</span><span class="o">+</span> <span class="nx">scale</span> <span class="o">+</span><span class="s1">&#39;)&#39;</span><span class="p">,</span>
</span><span class='line'> <span class="s1">&#39;opacity&#39;</span> <span class="o">:</span> <span class="nx">opacity</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></div></figure>


<p><strong>Utilisez window.requestAnimationFrame</strong> lorsque vous lancez l&#8217;animation en
JS. Cela indique au navigateur d&#8217;animer les éléments avant le prochain
<em>repaint</em> (calcul d&#8217;affichage des éléments). Préférez cela à l&#8217;ajustement
direct des propriétés.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='javascript'><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nx">requestAnimationFrame</span><span class="p">(</span><span class="nx">animateElements</span><span class="p">);</span>
</span></code></pre></div></figure>


<p><strong>Arrondissez les valeurs.</strong> Si vous déplacez un object de 100px pendant que
l&#8217;utilisateur scroll 200px (ce qui déplace l&#8217;objet à 50% de la vitesse normale),
ne le laissez pas prendre une valeur comme <code>54.2356345234578px</code>, arrondissez
cela au pixel le plus proche. Vous travaillez sur l&#8217;opacité ? Deux décimales
suffiront.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='javascript'><span class='line'><span class="nx">animationValue</span> <span class="o">=</span> <span class="o">+</span><span class="nx">animationValue</span><span class="p">.</span><span class="nx">toFixed</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span></code></pre></div></figure>


<p><strong>N&#8217;animez que les éléments dans le <em>viewport</em></strong>. Continuer de passer des
milliers de valeurs à des éléments non affichés durant le scroll n&#8217;a pas de sens
et peut rapidement être coûteux.</p>

<pre><code>Tous les exemples de code que j'ai essayé pour illustré ce point m'ont semblé
artificiels. Le simple sera de regarder le code de la démo pour comprendre
comment le faire.
</code></pre>

<p><strong>N&#8217;animez que les éléments en position absolute ou fixed.</strong> Je ne suis pas 100%
sûr du pourquoi mais j&#8217;ai constaté un important gain de performance en animant
uniquement les éléments fixed/absolute. Dès que j&#8217;applique une animation à un
élément relative/static, les fps souffrent.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='javascript'><span class='line'><span class="p">.</span><span class="nx">parallaxing</span><span class="o">-</span><span class="nx">element</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">position</span><span class="o">:</span> <span class="nx">fixed</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></div></figure>


<p><strong>Utilisez le scroll naturel de <code>&lt;body&gt;</code></strong>. Certains navigateurs, Safari en
particulier, subissent une réelle chute de performance lorsque l&#8217;on scroll un
autre élément que <em>body</em>. Honnêtement, je ne vois pas de bonne raison de le
faire. Même quand tous les éléments de la page sont en position <em>fixed</em> et
qu&#8217;il n&#8217;y a donc pas de réelle hauteur de scroll, utilisez simplement JS pour
donner une hauteur correcte au body pour obtenir la hauteur de scroll dont vous
avez besoin pour effectuer votre parallaxe.</p>

<p><strong>Définissez toutes vos animations dans un objet</strong> et non sous forme de code
spaghetti. Cela n&#8217;a pratiquement rien à voir avec les performances mais rend
les choses bien plus faciles.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='javascript'><span class='line'><span class="nx">keyframes</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="s1">&#39;duration&#39;</span> <span class="o">:</span> <span class="s1">&#39;150%&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;animations&#39;</span> <span class="o">:</span> <span class="p">[</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>        <span class="s1">&#39;selector&#39;</span> <span class="o">:</span> <span class="s1">&#39;.parallaxing-element&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;translateY&#39;</span> <span class="o">:</span> <span class="o">-</span><span class="mi">120</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;opacity&#39;</span> <span class="o">:</span> <span class="mi">0</span>
</span><span class='line'>      <span class="p">}</span> <span class="p">,</span> <span class="p">{</span>
</span><span class='line'>        <span class="s1">&#39;selector&#39;</span> <span class="o">:</span> <span class="s1">&#39;.another-element&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;translateY&#39;</span> <span class="o">:</span> <span class="o">-</span><span class="mi">100</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;opacity&#39;</span> <span class="o">:</span> <span class="mi">0</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></div></figure>


<h2 id="quelques-ne-pas-faire">Quelques &ldquo;Ne pas faire&rdquo;</h2>

<p><strong>Évitez background-size:cover</strong> à moins de vous être assuré que ça n&#8217;affecte
pas les performances. En général, ça passe tant que vous n&#8217;animez pas cet
élément mais si vous essayez par exemple de le translater, cela risque de poser
de sérieux problèmes. Si vous avez réellement besoin de faire du parallaxe avec
un élément à fond dynamique, essayez d&#8217;autres techniques.</p>

<p><strong>Ne vous attachez pas directement à l&#8217;événement scroll.</strong> Utilisez un
intervalle pour mettre à jour la position des éléments. L&#8217;événement scroll est
appelé un nombre incroyable de fois par seconde et peut causer de sérieux
problèmes de performances. Préférez mettre à jour les positions des éléments
toutes les 10 ms ou quelque chose comme ça.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='javascript'><span class='line'><span class="nx">scrollIntervalID</span> <span class="o">=</span> <span class="nx">setInterval</span><span class="p">(</span><span class="nx">animateStuff</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>
</span></code></pre></div></figure>


<p><strong>N&#8217;animez pas de grosses images ou redimensionnez-les considérablement.</strong>
Forcer le navigateur à redimensionner des images (surtout les grandes) peut être
très coûteux. Cela ne veux pas dire qu&#8217;utiliser <em>scale</em> sur une image est mal -
d&#8217;après mon expérience ça fonctionne même plutôt bien - mais redimensionner une
image de 4000px à 500px n&#8217;a pas de sens et coûte juste cher.</p>

<p><strong>Évitez d&#8217;animer 100 choses en même temps</strong> si vous constatez des chutes de
performance. Honnêtement, je n&#8217;ai jamais rencontré de problème en animant
beaucoup d&#8217;éléments (même en animant 15 choses en même temps), mais je vous
assure que cela peut arriver. J&#8217;ai également vu des soucis apparaitre lorsqu&#8217;un
élément parent et ses enfants sont animés en simultanément.</p>

<h2 id="point-rapide-sur-la-demo">Point rapide sur la démo</h2>

<p>Quelle différence peuvent faire ces quelques règles ? Une énorme différence. En
ignorer ne serait-ce qu&#8217;une ou deux peut faire l&#8217;écart en du beurre et plus de
saccades qu&#8217;un film de Bruce Lee.</p>

<p>Notez cependant ceci, la démo :</p>

<ul>
<li><strong>est légèrement superficielle</strong> et simple</li>
<li><strong>est loin d&#8217;être parfaite</strong> en termes d&#8217;organisation et de nombre de
fonctionnalités</li>
<li><strong>ignore complètement</strong> la gestion des mobiles</li>
<li><strong>peut planter</strong> si vous scrollez comme un(e) malade parce que je n&#8217;ai pas
implémenté de garde-fous (ce qui ne serait pas très dur cela-dit)</li>
<li><strong>n&#8217;a pas été vraiment testée</strong> sur différentes machines parce que je voyage
et que je n&#8217;ai que mon MacBook Pro et le MacBook Air de ma copine. <em>Update:</em>
quelqu&#8217;un sur internet m&#8217;a signalé que sur les machines Windows ça pouvait
saccader, je corrige ça dès que je rentre de voyage, promis !</li>
<li>est juste une démo à but éducatif, soyez sympas :)</li>
</ul>


<p>Si vous voulez voir comment le code fonctionne, inspectez la page le code JS ou
<a href="https://github.com/dhg/davegamache/tree/master/parallax">regardez le code sur Github</a>.</p>

<p>Mieux encore, regardez le site marketing de Dropbox pour
<a href="http://www.carousel.com/">Carousel</a>. Ils ont suivi à peu près toutes ces
règles et ont gracieusement laissé
<a href="https://www.carousel.com/static/coffee/compiled/photos/carousel-static-site/index.js">leur code JS lisible</a>
(il est assez simple à lire). La couche de vernis appliquée est assez
incroyable. Le site a une version mobile et ils ont même poussé jusqu&#8217;à adoucir
leur implémentation du scroll ce qui donne un effet presque liquide (pas
nécessaire pour atteindre 60 fps mais une touche intéressante et appréciable).
À noter également que certaines des règles ci-dessus me sont venues à la lecture
de leur code - un grand bravo à
<a href="https://twitter.com/destroytoday">@destroytoday</a> qui l&#8217;a implémenté !</p>

<h2 id="dernieres-notes">Dernières notes</h2>

<p>Voici quelques astuces supplémentaires qui vous intéresseront si vous souhaitez
vous lancer dans le développement de parallaxe.</p>

<ul>
<li>Jetez un oeil à l&#8217;article de Krister Kari sur
<a href="http://kristerkari.github.io/adventures-in-webkit-land/blog/2013/08/30/fixing-a-parallax-scrolling-website-to-run-in-60-fps/">les performances avec parallaxe</a>.
Il développe en profondeur certaines règles énoncées précédemment ;</li>
<li>Utilisez l&#8217;Inspecteur Chrome et allez dans Timeline > Frames pour enregistrer
les FPS de quelques actions ou visitez about:flags dans Chrome et activez le
compteur de FPS (je préfère cependant la version de l&#8217;Inspecteur qui peut
dépasser 60 fps) ;</li>
<li>C&#8217;est une simple touche de design mais adoucir les valeurs plutôt que de
sortir directement les valeurs linéaires apporte beauuuuucoup au succès d&#8217;un
parallaxe. Regardez la fonction <code>easeInOutQuad</code>
<a href="https://github.com/dhg/davegamache/blob/master/parallax/js/picasso.js">du JS</a>
si cela vous intéresse ;</li>
<li>Attention, il s&#8217;agit d&#8217;une technique de parallaxe. Une autre technique
performante (potentiellement plus performante) est l&#8217;utilisation des canvas.
Je fuis cependant cette technique pour éviter la complexité qu&#8217;elle apporte.
Cela dit, c&#8217;est une solution tout à fait viable. Cette technique est utilisée
par exemple par <a href="https://medium.com/@dhg/82ced812e61c">Medium</a> ;</li>
<li>Souvenez-vous que tous les navigateurs/appareils ne seront pas capables de
gérer le parallaxe. Pensez aux solutions de repli pour les appareils tactiles,
les petits écrans ou encore les vieux navigateurs. Encore une fois, j&#8217;ai
ignoré cet aspect dans la démo ;</li>
<li>Enfin, bien que je sois fan de parallaxe, je vous encourage à vous demandez si
cela a du sens pour votre site, s&#8217;il a une valeur ajoutée ou s&#8217;il est juste
&ldquo;cool&rdquo;. Ces deux raisons sont bonnes mais gardez toutefois en tête que le
parallaxe ajoute une complexité à votre code.</li>
</ul>


<p>Bien ! C&#8217;est tout ce que j&#8217;ai à vous dire. Si vous avez des questions, idées ou
corrections, je serais heureux d&#8217;en discuter. Venez me voir sur Twitter @dhg ou
laissez juste un commentaire sur <a href="https://medium.com/@dhg/82ced812e61c">Medium</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Une gem Ruby universelle en 20 lignes de code]]></title>
    <link href="http://vfsvp.fr/article/gem-universelle-en-20-lignes"/>
    <updated>2014-06-27T12:00:00+02:00</updated>
    <id>http://vfsvp.fr/article/gem-universelle-en-20-lignes</id>
    <content type="html"><![CDATA[<p>Source: <a href="http://blog.crossplatformruby.com/universal-ruby-gems-in-20-lines-of-code">Universal Ruby Gems in 20 Lines of Code de Michal Taszycki</a></p>

<p>Les gems Ruby sont les blocs essentiels à la création d&#8217;applications Ruby Cross-Plateformes. Nous les utilisons pour encapsuler la logique de nos applications et extraire des fonctionnalités réutilisables sur différentes plateformes.</p>

<p>Je vais vous montrer comment préparer une gem Ruby pour qu&#8217;elle fonctionne avec <strong>Ruby</strong>, <strong>Opal.rb</strong> et <strong>RubyMotion</strong> sans aucune modification. De cette façon vous pourrez l&#8217;utiliser dans vos applications Rails/iOS/OSX/Android/Navigateur Client.</p>

<!-- more -->


<p>Nous avons tout d&#8217;abord besoin d&#8217;un gem d&#8217;exemple&hellip;</p>

<h2 id="la-gem-pig-latin">La gem pig_latin</h2>

<p>La gem pig_latin est un simple utilitaire de traduction. Elle convertit n&#8217;importe quel mot anglais en son équivalent <a href="http://en.wikipedia.org/wiki/Pig_Latin">pig latin</a>.</p>

<p>Nous pouvons l&#8217;utiliser comme ceci :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="no">PigLatin</span><span class="o">.</span><span class="n">translate</span><span class="p">(</span><span class="s2">&quot;cross platform ruby&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; &quot;osscray atformplay ubyray&quot;</span>
</span></code></pre></div></figure>


<p>La gem pig_latin est disponible sur <a href="https://github.com/crossplatformruby/pig_latin">github</a> vous pouvez donc en lire le code ou l&#8217;essayer.</p>

<p>C&#8217;est une petite gem toute bête avec laquelle on peut s&#8217;amuser. Elle a cependant un aspect qui la rend particulièrement intéressante.</p>

<p>Voyons ce qu&#8217;il se passe lorsque nous ajoutons la ligne suivante au Gemfile d&#8217;une application Rails ou RubyMotion.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;pig_latin&#39;</span><span class="p">,</span> <span class="ss">git</span><span class="p">:</span> <span class="s1">&#39;git@github.com:crossplatformruby/pig_latin.git&#39;</span>
</span></code></pre></div></figure>


<p>Et bien&hellip;</p>

<h2 id="cela-fonctionne-partout">Cela fonctionne partout !</h2>

<p>Que vous utilisiez Rails, RubyMotion ou même une application en ligne de commande, ça fonctionne tout seul. Si vous utilisez Opal.rb dans votre application, vous pouvez appeler <code>require</code> dessus et l&#8217;utiliser dans votre navigateur.</p>

<p>Essayez-la.</p>

<h3 id="rails">Rails</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">TranslationsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">show</span>
</span><span class='line'>    <span class="vi">@phrase</span> <span class="o">=</span> <span class="n">params</span><span class="o">[</span><span class="ss">:phrase</span><span class="o">]</span>
</span><span class='line'>    <span class="vi">@translation</span> <span class="o">=</span> <span class="no">PigLatin</span><span class="o">.</span><span class="n">translate</span><span class="p">(</span><span class="vi">@phrase</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></div></figure>


<p><img src="http://vfsvp.fr/images/universal_gems/rails.png" alt="Pig Latin avec Rails" /></p>

<h3 id="opal-dot-rb">Opal.rb</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s2">&quot;opal&quot;</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;opal_ujs&quot;</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;pig_latin&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="no">PigLatin</span><span class="o">.</span><span class="n">translate</span><span class="p">(</span><span class="s2">&quot;cross platform ruby&quot;</span><span class="p">)</span>
</span></code></pre></div></figure>


<p><img src="http://vfsvp.fr/images/universal_gems/opal.png" alt="Pig Latin dans un navigateur" /></p>

<h3 id="ios">iOS</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">AppDelegate</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">application</span><span class="p">(</span><span class="n">application</span><span class="p">,</span> <span class="ss">didFinishLaunchingWithOptions</span><span class="p">:</span><span class="n">launchOptions</span><span class="p">)</span>
</span><span class='line'>    <span class="n">alert</span> <span class="o">=</span> <span class="no">UIAlertView</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>    <span class="n">alert</span><span class="o">.</span><span class="n">message</span> <span class="o">=</span> <span class="no">PigLatin</span><span class="o">.</span><span class="n">translate</span><span class="p">(</span><span class="s2">&quot;cross platform ruby&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">alert</span><span class="o">.</span><span class="n">show</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></div></figure>


<p><img src="http://vfsvp.fr/images/universal_gems/ios.png" alt="Pig Latin sur iOS" /></p>

<h3 id="osx">OSX</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">AppDelegate</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">applicationDidFinishLaunching</span><span class="p">(</span><span class="n">notification</span><span class="p">)</span>
</span><span class='line'>    <span class="n">buildMenu</span>
</span><span class='line'>    <span class="n">buildWindow</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">alert</span> <span class="o">=</span> <span class="no">NSAlert</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>    <span class="n">alert</span><span class="o">.</span><span class="n">messageText</span> <span class="o">=</span> <span class="no">PigLatin</span><span class="o">.</span><span class="n">translate</span><span class="p">(</span><span class="s2">&quot;cross platform ruby&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">alert</span><span class="o">.</span><span class="n">runModal</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">buildWindow</span>
</span><span class='line'>    <span class="c1"># (...) details omis pour plus de clareté</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></div></figure>


<p><img src="http://vfsvp.fr/images/universal_gems/osx.png" alt="Pig Latin sur OS X" /></p>

<h3 id="android-bientot">Android (bientôt)</h3>

<p>Dans les mois qui viennent, RubyMotion permettra la création d&#8217;applications Ruby pour Android. Je mettrais à jour cet article quand ce sera possible. Il semble cependant qu&#8217;aucun réglage additionnel ne sera nécessaire.</p>

<h2 id="comment-cela-fonctionne-t-il">Comment cela fonctionne-t-il ?</h2>

<p>Lorsque l&#8217;on parle d&#8217;écrire une gem, la principale différence entre les plateformes est la façon dont les fichiers sont appelés.</p>

<p>RubyMotion et Opal.rb ne permettent pas l&#8217;usage de <code>require</code> au runtime. Nous devons donc nous assurer que tous les fichiers de notre gem sont appelés en amont.</p>

<p>En Ruby Cross-Plateforme, le fichier faisant office de point d&#8217;entrée devient le manifeste de la gem.</p>

<h3 id="1-faire-fonctionner-la-gem-avec-ruby">1. Faire fonctionner la gem avec Ruby</h3>

<p>Si votre seule plateforme est MRI ou Rubinius, votre point d&#8217;entrée, <code>pig_latin.rb</code>, doit ressembler à ceci :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s2">&quot;pig_latin/version&quot;</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;pig_latin/word_translator&quot;</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;pig_latin/phrase_translator&quot;</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;pig_latin/class_methods&quot;</span>
</span></code></pre></div></figure>


<p>Aucun code spécifique à la gem ne doit être présent dans ce fichier, uniquement une suite d&#8217;appels à <code>require</code>, c&#8217;est important pour plus tard.</p>

<h3 id="2-supporter-opal-dot-rb">2. Supporter Opal.rb</h3>

<p>Il est facile de faire fonctionner notre manifeste sous Opal. Collez simplement le code ci-dessous n&#8217;importe où dans <code>pig_latin.rb</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="n">defined?</span><span class="p">(</span><span class="no">Opal</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">defined?</span><span class="p">(</span><span class="no">File</span><span class="p">)</span>
</span><span class='line'>  <span class="no">Opal</span><span class="o">.</span><span class="n">append_path</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">,</span> <span class="no">File</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="bp">__FILE__</span><span class="p">))</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></div></figure>


<p>Il est plus difficile de comprendre pourquoi ça fonctionne.</p>

<p>Lorsque Opal compile les fichiers, il transforme les appels à <code>require</code> en directives <code>Sprockets</code>. Cela veut dire qu&#8217;au moment où l&#8217;on appelle <code>application.rb</code>, il comprend les <code>require</code> mais ne sait pas où trouver les fichiers.</p>

<p>C&#8217;est pour cette raison que nous devons ajouter le chemin du dossier contenant notre point d&#8217;entrée grâce à <code>Opal#append_path</code>.</p>

<p>Cela veut dire que notre manifeste est lancé deux fois :</p>

<ol>
<li>En Ruby, lorsque la gem est appelée pour informer Opal des chemins à charger ;</li>
<li>En Opal.rb pour traduire les <code>require</code> en directives <code>Sprockets</code>.</li>
</ol>


<h3 id="3-compiler-pour-rubymotion">3. Compiler pour RubyMotion</h3>

<p>RubyMotion ne permet pas d&#8217;appeler <code>require</code> au runtime. Nous devons donc lui fournir la liste des fichiers à compiler. Il serait cependant plus intéressant de conserver notre succession de <code>require</code> et de nous en servir pour générer cette liste.</p>

<p>Puisque notre manifeste est lancé avec Ruby, nous pouvons le faire en utilisant la technique suivante.</p>

<p>Commençons par redéfinir la méthode <code>require</code> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="n">defined?</span><span class="p">(</span><span class="ss">Motion</span><span class="p">:</span><span class="ss">:Project</span><span class="o">::</span><span class="no">Config</span><span class="p">)</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">rubymotion_require</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@files_to_require</span> <span class="o">||=</span> <span class="o">[]</span>
</span><span class='line'>    <span class="vi">@files_to_require</span> <span class="o">&lt;&lt;</span> <span class="n">filename</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">alias</span> <span class="ss">:old_require</span> <span class="ss">:require</span>
</span><span class='line'>  <span class="k">alias</span> <span class="ss">:require</span> <span class="ss">:rubymotion_require</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></div></figure>


<p>Nous appelons ensuite <code>require</code> comme d&#8217;habitude.</p>

<p>Pour finir, nous construisons la liste des fichiers à compiler et remettons <code>require</code> en place une fois terminé.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="n">defined?</span><span class="p">(</span><span class="ss">Motion</span><span class="p">:</span><span class="ss">:Project</span><span class="o">::</span><span class="no">Config</span><span class="p">)</span>
</span><span class='line'>  <span class="k">alias</span> <span class="ss">:require</span> <span class="ss">:old_require</span>
</span><span class='line'>
</span><span class='line'>  <span class="ss">Motion</span><span class="p">:</span><span class="ss">:Project</span><span class="o">::</span><span class="no">App</span><span class="o">.</span><span class="n">setup</span> <span class="k">do</span> <span class="o">|</span><span class="n">app</span><span class="o">|</span>
</span><span class='line'>    <span class="n">paths_to_require</span> <span class="o">=</span> <span class="vi">@files_to_require</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">file</span><span class="o">|</span>
</span><span class='line'>      <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="bp">__FILE__</span><span class="p">),</span> <span class="n">file</span> <span class="o">+</span> <span class="s2">&quot;.rb&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">app</span><span class="o">.</span><span class="n">files</span><span class="o">.</span><span class="n">unshift</span><span class="p">(</span><span class="o">*</span><span class="n">paths_to_require</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></div></figure>


<h2 id="en-resume">En résumé</h2>

<p>En utilisant quelques astuces et une organisation intelligente des fichiers, nous avons réussi à créer une gem qui fonctionne sur les serveurs, dans les applications lourdes, dans les navigateurs et sur mobiles. Cela permet de partager du code entre plusieurs applications.</p>

<p>Vous pouvez très facilement adapter ces techniques à vos propres gems. Cela prend littéralement 20 lignes de code pour les rendre universelles.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tri de dépendances en Ruby avec TSort]]></title>
    <link href="http://vfsvp.fr/article/dependency-sorting-in-ruby-with-tsort"/>
    <updated>2014-03-27T16:00:00+01:00</updated>
    <id>http://vfsvp.fr/article/dependency-sorting-in-ruby-with-tsort</id>
    <content type="html"><![CDATA[<p>Source: <a href="http://viget.com/extend/dependency-sorting-in-ruby-with-tsort">Dependency Sorting in Ruby with TSort de Lawson Kurtz sur le blog de Viget</a></p>

<p>Si vous utilisez Ruby, vous avez probablement eu l&#8217;occasion d&#8217;expérimenter les
miracles de la gestion de dépendances de <a href="http://bundler.io/"><em lang="en">Bundler</em></a>.
Ce que vous ne savez peut-être pas, c&#8217;est que vous pouvez utiliser les mêmes
mécanismes de tri de dépendances dans vos propres applications et dans d&#8217;autres
contextes.</p>

<!-- more -->


<h2 id="hello-tsort">Hello TSort</h2>

<p><a href="http://www.ruby-doc.org/stdlib-2.0/libdoc/tsort/rdoc/TSort.html"><em lang="en">TSort</em></a>
est un module Ruby, disponible dans la bibliothèque standard, qui permet de
faire du <a href="http://fr.wikipedia.org/wiki/Tri_topologique">tri topologique</a>.
<em lang="en">Bundler</em> utilise <em lang="en">TSort</em> pour démêler le sac de nœuds de dépendances
de vos <em lang="en">gems</em>. La gestion de ces dépendances est la partie émergée de
l&#8217;iceberg en ce qui concerne les possibilités du tri topologique. Il est assez
facile de profiter de l&#8217;incroyable puissance de <em lang="en">TSort</em> dans votre projet.</p>

<h2 id="use-case-ajouter-des-donnees-dexemple-dans-un-base-de-donnees">Use Case : Ajouter des données d&#8217;exemple dans un base de données</h2>

<p>Imaginons une tâche qui doit peupler une base de données avec plusieurs
enregistrements. Mais rien n&#8217;est jamais facile, nos enregistrements ont des
dépendances comme le montre l&#8217;exemple ci-dessous :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="n">user_1</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">create</span> <span class="ss">address</span><span class="p">:</span> <span class="n">address_1</span>
</span><span class='line'>
</span><span class='line'><span class="n">school_1</span> <span class="o">=</span> <span class="no">School</span><span class="o">.</span><span class="n">create</span> <span class="ss">address</span><span class="p">:</span> <span class="n">address_2</span><span class="p">,</span> <span class="ss">faculty</span><span class="p">:</span> <span class="o">[</span><span class="n">user_1</span><span class="o">]</span>
</span><span class='line'><span class="n">school_2</span> <span class="o">=</span> <span class="no">School</span><span class="o">.</span><span class="n">create</span> <span class="ss">address</span><span class="p">:</span> <span class="n">address_3</span>
</span><span class='line'>
</span><span class='line'><span class="n">address_1</span> <span class="o">=</span> <span class="no">Address</span><span class="o">.</span><span class="n">create</span> <span class="n">zip_code</span><span class="p">:</span> <span class="n">zip_code_1</span>
</span><span class='line'><span class="n">address_2</span> <span class="o">=</span> <span class="no">Address</span><span class="o">.</span><span class="n">create</span> <span class="n">zip_code</span><span class="p">:</span> <span class="n">zip_code_2</span>
</span><span class='line'><span class="n">address_3</span> <span class="o">=</span> <span class="no">Address</span><span class="o">.</span><span class="n">create</span> <span class="n">zip_code</span><span class="p">:</span> <span class="n">zip_code_2</span>
</span><span class='line'>
</span><span class='line'><span class="n">zip_code_1</span> <span class="o">=</span> <span class="no">ZipCode</span><span class="o">.</span><span class="n">create</span>
</span><span class='line'><span class="n">zip_code_2</span> <span class="o">=</span> <span class="no">ZipCode</span><span class="o">.</span><span class="n">create</span>
</span></code></pre></div></figure>


<h3 id="le-probleme">Le problème</h3>

<p>Si on lance le pseudo-code précédent, il va bien sûr lever une exception
<code>NameError</code> puisque plusieurs enregistrements en référencent d&#8217;autres qui ne
sont pas encore créés.</p>

<p>Pour cet exemple simpliste, il serait facile de trier les lignes à la main, pour
que les insertions aient lieu dans le bon ordre. Mais comment faire quand les
relations dépendantes sont plus complexes ou quand le nombre d&#8217;enregistrements
est tout simplement trop important ? Trier à la main n&#8217;est simplement pas
envisageable (qui aime faire les choses à la main de toute façon ?).</p>

<h3 id="la-solution">La solution</h3>

<p>C&#8217;est ici que <em lang="en">TSort</em> entre en scène. Nous pouvons l&#8217;utiliser pour
déterminer l&#8217;ordre dans lequel ces enregistrements doivent être insérés.</p>

<p>La façon la plus rapide d&#8217;utiliser <em lang="en">TSort</em> est de créer puis trier un
<em lang="en">hash</em> dans lequel chaque clé représente un objet et chaque valeur est un
tableau de références aux objets dont l&#8217;objet-clé dépend.</p>

<p>Si <code>skier</code> dépend de <code>neige</code> et <code>neige</code> dépend de <code>nuages</code> et <code>froid</code>, notre
<em lang="en">hash</em> va ressembler à ceci :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s1">&#39;nuages&#39;</span> <span class="o">=&gt;</span> <span class="o">[]</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;froid&#39;</span>  <span class="o">=&gt;</span> <span class="o">[]</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;skier&#39;</span>  <span class="o">=&gt;</span> <span class="o">[</span><span class="s1">&#39;neige&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;neige&#39;</span>  <span class="o">=&gt;</span> <span class="o">[</span><span class="s1">&#39;nuages&#39;</span><span class="p">,</span> <span class="s1">&#39;froid&#39;</span><span class="o">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></div></figure>


<p>Nous listons seulement les dépendances de premier niveau, <em lang="en">TSort</em> se
débrouillera tout seul pour déterminer le reste.</p>

<p>Pour faire un tri topologique sur ce <em lang="en">hash</em> de dépendances, il nous faut
quelques fonctionnalités de <em lang="en">TSort</em>. Le plus simple est de créer une classe
qui hérite de <em lang="en">Hash</em> comme ceci :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;tsort&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">TsortableHash</span> <span class="o">&lt;</span> <span class="no">Hash</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">TSort</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">alias</span> <span class="n">tsort_each_node</span> <span class="n">each_key</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">tsort_each_child</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>    <span class="n">fetch</span><span class="p">(</span><span class="n">node</span><span class="p">)</span><span class="o">.</span><span class="n">each</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></div></figure>


<p>Nous pouvons maintenant utiliser notre classe pour construire le <em lang="en">hash</em> de
dépendances. Pour nos enregistrements du début, il va ressembler à ceci :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="n">dependency_hash</span> <span class="o">=</span> <span class="p">\</span>
</span><span class='line'><span class="no">TsortableHash</span><span class="o">[</span>
</span><span class='line'>  <span class="n">user_1</span>     <span class="o">=&gt;</span> <span class="o">[</span><span class="n">address_1</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>  <span class="n">school_1</span>   <span class="o">=&gt;</span> <span class="o">[</span><span class="n">address_2</span><span class="p">,</span> <span class="n">user_1</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>  <span class="n">school_2</span>   <span class="o">=&gt;</span> <span class="o">[</span><span class="n">address_3</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>  <span class="n">address_1</span>  <span class="o">=&gt;</span> <span class="o">[</span><span class="n">zip_code_1</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>  <span class="n">address_2</span>  <span class="o">=&gt;</span> <span class="o">[</span><span class="n">zip_code_2</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>  <span class="n">address_3</span>  <span class="o">=&gt;</span> <span class="o">[</span><span class="n">zip_code_2</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>  <span class="n">zip_code_1</span> <span class="o">=&gt;</span> <span class="o">[]</span><span class="p">,</span>
</span><span class='line'>  <span class="n">zip_code_2</span> <span class="o">=&gt;</span> <span class="o">[]</span>
</span><span class='line'><span class="o">]</span>
</span></code></pre></div></figure>


<p>Une fois notre <em lang="en">hash</em> de dépendances <em lang="en">tsortable</em> créé, le plus dur
est fait. <em lang="en">TSort</em> s&#8217;occupe du reste et nous donne un tableau ordonné qu&#8217;il
nous suffit de suivre pour insérer les enregistrements sans problème.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="n">dependency_hash</span><span class="o">.</span><span class="n">tsort</span>
</span><span class='line'><span class="c1">#=&gt; [zip_code_1, address_1, user_1, zip_code_2, address_2, school_1, address_3, school_2]</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Si vous avez des dépendances circulaires, #tsort lèvera une exception TSort::Cyclic.</span>
</span></code></pre></div></figure>


<p><em lang="en">TSort</em> est un outil incroyablement puissant et simple pour ordonner des
relations dépendantes. La prochaine fois que vous avez du mal à gérer des
dépendances, rassurez-vous,
<a href="http://ruby-doc.org/stdlib-2.0.0/libdoc/tsort/rdoc/TSort.html">TSort</a> est
disponible en un clic.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Une introduction en profondeur à Ember.js]]></title>
    <link href="http://vfsvp.fr/article/une-introduction-en-profondeur-a-emberjs"/>
    <updated>2014-01-16T12:00:00+01:00</updated>
    <id>http://vfsvp.fr/article/une-introduction-en-profondeur-a-emberjs</id>
    <content type="html"><![CDATA[<p>Source:
<a href="http://coding.smashingmagazine.com/2013/11/07/an-in-depth-introduction-to-ember-js/">An In-Depth Introduction To Ember.js de Julien Knebel pour Smashing</a></p>

<p>Maintenant que <em lang="en">Ember.js 1.0</em> est sorti, il est temps d&#8217;y jeter un coup
d&#8217;oeil. Cet article s&#8217;adresse aux débutants qui souhaitent comprendre ce
<em lang="en">framework</em>.</p>

<!-- more -->


<p>Il est fréquent d&#8217;entendre les utilisateurs dire que la courbe d&#8217;apprentissage
est raide mais qu&#8217;une fois les difficultés surmontées, <em lang="en">Ember.js</em> est
tout simplement phénoménal. Ça a été également le cas pour moi. Bien que les
<a href="http://emberjs.com/guides/">guides officiels</a> soient extrêment précis et parfaitement à jour
(vraiment !), cet article a pour but de rendre les choses encore plus aisées
pour les débutants.</p>

<p>Tout d&#8217;abord, nous allons éclaircir les principaux concepts du
<em lang="en">framework</em>. Nous verrons ensuite, étape par étape, comment construire
une application avec <em lang="en">Ember.js</em> et <em lang="en">Ember-Data</em>, la couche de
stockage de données d&#8217;<em lang="en">Ember</em>. Nous verrons ensuite comment les <code>views</code> et
les <code>components</code> aident à gérer les interactions utilisateurs.</p>

<p><img src="http://vfsvp.fr/images/ember/emberjs-logo.png" alt="Une introduction en profondeur à Ember.js" /><br />
La fameuse mascotte d&#8217;<em lang="en">Ember</em>, <em lang="en">Tomster</em>.
(<a href="http://emberjs.com/">Crédits</a>)</p>

<p>La <strong>démo non stylisée</strong> ci-dessous, vous aidera à suivre chaque étape de ce
tutoriel. La <strong>démo stylisée</strong> est essentiellement la même mais avec bien plus
de CSS, d&#8217;animations et de réactivité sur petits écrans.</p>

<p><a href="http://jkneb.github.io/ember-crud/unstyled">Démo non stylisée</a>
<a href="https://github.com/jkneb/ember-crud">Code source</a>
<a href="http://jkneb.github.io/ember-crud">Démo stylisée</a></p>

<h2 id="sommaire">Sommaire</h2>

<ul>
<li><a href="#principaux-concepts">Principaux concepts</a>

<ul>
<li><a href="#modeles">Modèles</a></li>
<li><a href="#le-routeur">Le Routeur</a></li>
<li><a href="#controleurs">Contrôleurs</a></li>
<li><a href="#vues">Vues</a></li>
<li><a href="#components">Components</a></li>
<li><a href="#templates">Templates</a></li>
<li><a href="#helpers">Helpers</a></li>
<li><a href="#composants-helpers-vues-au-secours">Composants ? Helpers ? Vues ? Au secours !</a></li>
</ul>
</li>
<li><a href="#creons-une-application">Créons une application</a>

<ul>
<li><a href="#schema-de-notre-application">Schéma de notre application</a></li>
<li><a href="#ce-quil-vous-faut-pour-bien-commencer">Ce qu&#8217;il vous faut pour bien commencer</a></li>
<li><a href="#organisation-de-nos-fichiers">Organisation de nos fichiers</a></li>
<li><a href="#precompiler-ou-non-les-templates">Précompiler ou non les <em lang="en">templates</em> ?</a></li>
<li><a href="#creer-notre-modele-avec-le-fixtureadapter-de-ember-data">Créer notre modèle avec le <em lang="en">FixtureAdapter</em> de <em lang="en">Ember-Data</em></a></li>
<li><a href="#instancier-le-router">Instancier le Router</a></li>
<li><a href="#le-template-de-lapplication">Le <em lang="en">template</em> de l&#8217;application</a></li>
<li><a href="#la-route-users">La route <em lang="en">users</em></a></li>
<li><a href="#objectcontroller-vs-arraycontroller">ObjectController vs. ArrayController</a></li>
<li><a href="#afficher-le-nombre-dutilisateurs">Afficher le nombre d&#8217;utilisateurs</a></li>
<li><a href="#proprietes-calculees">Propriétés calculées</a></li>
<li><a href="#rediriger-depuis-la-page-index">Rediriger depuis la page Index</a></li>
<li><a href="#route-dun-utilisateur-specifique">Route d&#8217;un utilisateur spécifique</a></li>
<li><a href="#modifier-un-utilisateur">Modifier un utilisateur</a></li>
<li><a href="#notre-premiere-action">Notre première action</a></li>
<li><a href="#transitionto-ou-transitiontoroute">TransitionTo ou TransitionToRoute ?</a></li>
<li><a href="#sauvegarder-les-modifications-apportees-a-lutilisateur">Sauvegarder les modifications apportées à l&#8217;utilisateur</a></li>
<li><a href="#supprimer-un-utilisateur">Supprimer un utilisateur</a></li>
<li><a href="#creer-un-utilisateur">Créer un utilisateur</a></li>
<li><a href="#formater-les-donnees-avec-les-helpers">Formater les données avec les <em lang="en">helpers</em></a></li>
<li><a href="#formater-les-donnees-avec-un-boundhelper">Formater les données avec un <em lang="en">BoundHelper</em></a></li>
<li><a href="#passer-au-localstorage-adapter">Passer au <em lang="en">LocalStorage Adapter</em></a></li>
</ul>
</li>
<li><a href="#jouer-avec-les-vues">Jouer avec les vues</a>

<ul>
<li><a href="#jquery-et-didinsertelement">jQuery et <em lang="en">didInsertElement</em></a></li>
<li><a href="#panneaux-lateraux-avec-classname-dynamique">Panneaux latéraux avec className dynamique</a></li>
<li><a href="#modals-avec-layout-et-remontee-devenements"><em lang="en">Modals</em> avec <em lang="en">layout</em> et remontée d&#8217;événements</a></li>
</ul>
</li>
<li><a href="#quest-ce-quember-data">Qu&#8217;est-ce qu&#8217;<em lang="en">Ember-Data</em></a>

<ul>
<li><a href="#le-store">Le <em lang="en">store</em></a></li>
<li><a href="#les-adapters">Les <em lang="en">adapters</em></a></li>
<li><a href="#sans-utiliser-ember-data">Sans utiliser <em lang="en">Ember-Data</em></a></li>
</ul>
</li>
<li><a href="#quest-ce-que-la-precompilation-de-templates-handlebars">Qu&#8217;est-ce que la précompilation de <em lang="en">templates</em> <em lang="en">Handlebars</em> ?</a>

<ul>
<li><a href="#conventions-de-nommage-des-templates">Conventions de nommage des <em lang="en">templates</em></a></li>
<li><a href="#precompiler-avec-grunt">Précompiler avec <em lang="en">Grunt</em></a></li>
<li><a href="#precompiler-avec-rails">Précompiler avec <em lang="en">Rails</em></a></li>
</ul>
</li>
<li><a href="#outils-astuces-et-ressources">Outils, astuces et ressources</a>

<ul>
<li><a href="#lextension-chrome-ember">L&#8217;Extension Chrome <em lang="en">Ember</em></a></li>
<li><a href="#ember-app-kit"><em lang="en">Ember App Kit</em></a></li>
<li><a href="#ember-tools"><em lang="en">Ember Tools</em></a></li>
<li><a href="#developpement-et-version-minifie">Développement et version minifié</a></li>
<li><a href="#astuces-pour-le-debug">Astuces pour le <em lang="en">debug</em></a></li>
<li><a href="#commenter-correctement-dans-handlebars">Commenter correctement dans <em lang="en">Handlebars</em></a></li>
</ul>
</li>
<li><a href="#conclusion">Conclusion</a>

<ul>
<li><a href="#ressources">Ressources</a></li>
<li><a href="#remerciements">Remerciements</a></li>
</ul>
</li>
</ul>


<h2 id="principaux-concepts">Principaux concepts</h2>

<p>Le schéma ci-dessous montre comment les routes, les contrôleurs, les vues, les
<em lang="en">templates</em> et les modèles interagissent les uns avec les autres.</p>

<p><img src="http://vfsvp.fr/images/ember/ember-sketch.png" alt="ember-sketch" /></p>

<p>Voici une description de chacun des concepts. Pour en apprendre plus,
référez-vous à la section correspondante dans les guides officiels :</p>

<ul>
<li><a href="http://emberjs.com/guides/models">Modèles</a></li>
<li><a href="http://emberjs.com/guides/routing">Le Routeur</a></li>
<li><a href="http://emberjs.com/guides/controllers">Contrôleurs</a></li>
<li><a href="http://emberjs.com/guides/views">Vues</a></li>
<li><a href="http://emberjs.com/guides/components/">Composants</a></li>
<li><a href="http://emberjs.com/guides/templates/handlebars-basics">Templates</a></li>
<li><a href="http://emberjs.com/guides/templates/writing-helpers">Helpers</a></li>
</ul>


<h3 id="modeles">Modèles</h3>

<p>Mettons que notre application gère une liste d&#8217;utilisateurs. Ces utilisateurs
et leurs informations seraient le modèle. Vous pouvez voir cela comme les
données stockées en base de données. Les modèles peuvent être récupérés et mis à
jour en implémentant des <em lang="en">callbacks</em> AJAX dans vos routes ou vous pouvez
utiliser <em lang="en">Ember-Data</em> (une couche d&#8217;abstraction de stockage de donnés)
pour simplifier la récupération, la mise à jour et la persistence des modèles
au travers d&#8217;une API REST.</p>

<h3 id="le-routeur">Le Routeur</h3>

<p>Il y a le <code>Router</code> et, ensuite, les routes. Le <code>Router</code> est juste un synopsis de
toutes vos routes. Les routes sont la version URL des objects de votre
application (par exemple, une route <code>posts</code> correspond à un <em lang="en">listing</em>
d&#8217;utilisateurs). Le but des routes est d&#8217;appeler le modèle, via leur
<em lang="en">hook</em> <code>model</code>, pour qu&#8217;il soit accessible dans les contrôleurs et
<em lang="en">templates</em>. Les routes peuvent également servir à valuer les propriétés
d&#8217;un contrôleur, à exécuter des événements ou des actions, ou encore connecter
un <em lang="en">template</em> à un contrôleur spécifique. De plus, le <em lang="en">hook</em>
<code>model</code> peut retourner une <em lang="en">promise</em> ce qui permet d&#8217;implémenter une
<code>LoadingRoute</code> qui attend que le modèle soit récupéré de façon asynchrone.</p>

<h3 id="controleurs">Contrôleurs</h3>

<p>Un <code>controller</code> commence par récupérer le modèle d&#8217;une <code>route</code>. Il fait ensuite
le pont entre le modèle et la vue ou le <em lang="en">template</em>. Mettons que vous ayez
besoin d&#8217;une fonction pour alterner entre le mode édition et le mode normal. Des
méthodes comme <code>goIntoEditMode()</code> et <code>closeEditMode()</code> seraient parfaites et
c&#8217;est exactement ce à quoi servent les contrôleurs.</p>

<p><em lang="en">Ember.js</em> génère automatiquement les contrôleurs si vous ne les
déclarez pas. Vous pouvez par exemple créer un <em lang="en">template</em> <code>user</code> et
une <code>UserRoute</code> sans créer de <code>UserController</code> (parce que vous n&#8217;en avez pas
besoin), <em lang="en">Ember.js</em> le créera pour vous en interne (en mémoire).
L&#8217;extension Chrome appelée <a href="https://chrome.google.com/webstore/detail/ember-inspector/bmdblncegkenkacieihfhpjfppoconhi">Ember Inspector</a> peut vous aider à
trouver ces contrôleurs magiques.</p>

<h3 id="vues">Vues</h3>

<p>Les vues représentent les différentes parties de votre application (les parties
visibles par l&#8217;utilisateur dans le navigateur). Une <code>View</code> est associée à un
<code>Controller</code>, un <code>template</code> <em lang="en">Handlebars</em> et une <code>Route</code>. La différence
entre vue et <em lang="en">template</em> est particulière. Vous utiliserez une vue lorsque
vous voudrez gérer des événements ou des interactions utilisateurs qui ne
peuvent pas être pris en charge par un simple <em lang="en">template</em>. Elle ont un
<em lang="en">hook</em> bien pratique appelé <code>didInsertElement</code> au travers duquel vous
pouvez appeler jQuery très facilement et sont également très utiles pour créer
des vues réutilisables comme une <em lang="en">modal</em>, une <em lang="en">popover</em>, un
<em lang="en">date-picker</em> ou encore un champ auto-complété.</p>

<h3 id="components">Components</h3>

<p>Un <code>Component</code> est une <code>View</code> complètement isolée, qui n&#8217;a pas accès au context
dans lequel il est appelé. C&#8217;est un excellent moyen de créer un composant
réutilisable pour votre application. Ce <a href="http://jsbin.com/OMOgUzo/1/edit?html,js,output">Button Twitter</a>, ce
<a href="http://pixelhandler.com/blog/2013/08/25/create-a-custom-select-box-using-ember-component/">select personnalisé</a> ou encore ces
<a href="http://jsbin.com/odosoy/132/edit?html,js,output">graphiques réutilisables</a>
sont de très bons exemples de composants. Ce sont en fait de si bonnes idées que
le W3C travaille actuellement avec l&#8217;équipe <em lang="en">Ember</em> sur la
<a href="https://dvcs.w3.org/hg/webcomponents/raw-file/tip/spec/custom/index.html">spécification d&#8217;éléments personnalisés</a>.</p>

<h3 id="templates">Templates</h3>

<p>Pour faire simple, un <em lang="en">template</em> est la partie HTML d&#8217;une vue. Il permet
d&#8217;afficher les données du modèle et se met automatiquement à jour lorsque ce
dernier change. <em lang="en">Ember.js</em> utilise <a href="http://handlebarsjs.com">Handlebars</a>, un mécanisme
léger de <em lang="en">templating</em> également maintenu par l&#8217;équipe <em lang="en">Ember</em>. Il
fournit les outils logiques habituels comme <code>if</code> et <code>else</code>, les boucles et les
<code>helpers</code> de formatage, ce genre de choses. Les <em lang="en">templates</em> peuvent être
précompilés (si vous souhaitez les organiser en fichiers <code>.hbs</code> ou <code>.handlebars</code>
séparés) ou tout simplement écrits dans une balise
<code>&lt;script type="text/x-handlebars"&gt;&lt;/script&gt;</code> dans votre page HTML. Pour en
savoir plus sur le sujet, vous pouvez vous reporter à la section
<a href="#precompiler-ou-non-les-templates">Précompiler ou non les <em lang="en">templates</em></a>.</p>

<h3 id="helpers">Helpers</h3>

<p>Les <em lang="en">helpers</em> <em lang="en">Handlebars</em> sont des fonctions qui modifient les
données avant leur affichage (par exemple, pour donner un meilleur format que
<code>Mon Jul 29 2013 13:37:39 GMT+0200 (CEST)</code> à une date). Si votre date est écrite
sous la forme <code>{{date}}</code> dans votre <em lang="en">template</em> et que vous avez un
<em lang="en">helper</em> <code>formatDate</code> (qui converti une date en quelque chose de plus
élégant, comme &ldquo;Il y a un mois&rdquo; ou &ldquo;29 juillet 2013&rdquo;), vous pouvez vous en
servir en utilisant <code>{{formatDate date}}</code>.</p>

<h3 id="composants-helpers-vues-au-secours">Composants ? Helpers ? Vues ? Au secours !</h3>

<p>Le forum <em lang="en">Ember.js</em> a <a href="http://discuss.emberjs.com/t/whats-the-difference-between-ember-helpers-components-and-views/2201/2">une réponse</a>, tout comme
<a href="http://stackoverflow.com/questions/18593424/views-vs-components-in-ember-js">StackOverflow</a>, qui peuvent vous éviter les maux de crâne.</p>

<h2 id="creons-une-application">Créons une application</h2>

<p>Dans cette section, nous allons créer une véritable application, une simple
interface de gestion d&#8217;utilisateurs (une application de
<a href="http://en.wikipedia.org/wiki/Create,_read,_update_and_delete">CRUD</a>). Voici ce
que nous allons faire :</p>

<ul>
<li>un tour de l&#8217;architecture que nous souhaitons mettre en place ;</li>
<li>voir les dépendances, la structure de fichiers, etc ;</li>
<li>mettre en place le modèle avec le <code>FixtureAdapter</code> d&#8217;<em lang="en">Ember-Data</em> ;</li>
<li>voir comment les routes, contrôleurs, vues et <em lang="en">templates</em> interagissent ;</li>
<li>et enfin, remplacer <code>FixtureAdapter</code> par <code>LSAdapter</code> pour stocker les données
dans le <em lang="en">local storage</em> du navigateur.</li>
</ul>


<h3 id="schema-de-notre-application">Schéma de notre application</h3>

<p>Nous avons besoin d&#8217;une vue assez simple qui affiche un groupe d&#8217;utilisateurs
(voir 1 ci-dessous). Il nous faut également une vue pour voir les informations
d&#8217;un utilisateur spécifique (2). Nous devons être capables de modifier et
supprimer ces informations (3). Nous devons enfin être à même de créer un nouvel
utilisateur, pour ce faire nous réutiliserons le formulaire de modification.</p>

<p><img src="http://vfsvp.fr/images/ember/app-sketch.png" alt="app-sketch" /></p>

<p><em lang="en">Ember.js</em> utilise beaucoup les conventions de nommage. Si vous voulez
avoir la page <code>/foo</code> dans votre application, vous aurez ce qui suit :</p>

<ul>
<li>un <em lang="en">template</em> <code>foo</code> ;</li>
<li>une route <code>FooRoute</code> ;</li>
<li>un contrôleur <code>FooController</code> ;</li>
<li>une vue <code>FooView</code>.</li>
</ul>


<p>Pour en savoir plus, référez-vous à la section
<a href="http://emberjs.com/guides/concepts/naming-conventions">Naming conventions</a>
dans les guides.</p>

<h3 id="ce-quil-vous-faut-pour-bien-commencer">Ce qu&#8217;il vous faut pour bien commencer</h3>

<p>Vous aurez besoin de :</p>

<ul>
<li>jQuery ;</li>
<li><em lang="en">Ember.js</em>, bien sûr ;</li>
<li><em lang="en">Handlebars</em> le moteur de <em lang="en">template</em> d&#8217;<em lang="en">Ember</em> ;</li>
<li><em lang="en">Ember-Data</em>, la couche d&#8217;abstraction de stockage d&#8217;<em lang="en">Ember</em>.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='html'><span class='line'>/* /index.html
</span><span class='line'>*/
</span><span class='line'> …
</span><span class='line'> <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;//code.jquery.com/jquery-2.0.3.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'> <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;//builds.emberjs.com/handlebars-1.0.0.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'> <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;//builds.emberjs.com/tags/v1.1.2/ember.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'> <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;//builds.emberjs.com/tags/v1.0.0-beta.3/ember-data.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'> <span class="nt">&lt;script&gt;</span>
</span><span class='line'>   <span class="c1">// votre code</span>
</span><span class='line'> <span class="nt">&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></div></figure>


<p>Le site d&#8217;<em lang="en">Ember</em> a un section <a href="http://emberjs.com/builds">Builds</a> dans laquelle vous
pouvez trouver tous les liens vers <em lang="en">Ember.js</em> et <em lang="en">Ember-Data</em>. Pour
le moment, <em lang="en">Handlebars</em> n&#8217;est pas présent sur la page, vous le trouverez
sur le <a href="http://handlebarsjs.com">site officiel de Handlebars</a>.</p>

<p>Une fois les dépendances récupérées, nous pouvons commencer à créer notre
application. Nous allons tout d&#8217;abord créer un fichier nommé <code>app.js</code> dans
lequel nous allons initialiser <em lang="en">Ember</em> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='javascript'><span class='line'><span class="cm">/* /app.js</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nx">App</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Application</span><span class="p">.</span><span class="nx">create</span><span class="p">();</span>
</span></code></pre></div></figure>


<p>Juste pour vérifier que tout fonctionne, vous devriez voir les <em lang="en">logs</em> de
<em lang="en">debug</em> dans la console du navigateur.</p>

<p><img src="http://vfsvp.fr/images/ember/console-log-1.png" alt="console-log-1" /></p>

<h3 id="organisation-de-nos-fichiers">Organisation de nos fichiers</h3>

<p>Il n&#8217;y a pas vraiment de convention en ce qui concerne l&#8217;organisation des
fichiers et dossiers.
L&#8217;<a href="https://github.com/stefanpenner/ember-app-kit">App Kit Ember</a> (un
environnement de démarrage d&#8217;application <em lang="en">Ember</em> basé sur <em lang="en">Grunt</em>)
propose une sorte de standard puisqu&#8217;il est maintenu par l&#8217;équipe <em lang="en">Ember</em>.
Pour faire encore plus simple, vous pourriez tout mettre dans le fichier
<code>app.js</code>. C&#8217;est à vous de voir.</p>

<p>Pour ce tutoriel, nous mettrons les contrôleurs dans un dossier <code>controllers</code>,
nos vues dans un dossier <code>views</code> et ainsi de suite.</p>

<pre><code>components/
controllers/
helpers/
models/
routes/
templates/
views/
app.js
router.js
store.js
</code></pre>

<h3 id="precompiler-ou-non-les-templates">Précompiler ou non les <em lang="en">templates</em> ?</h3>

<p>Il y a deux façons de déclarer les <em lang="en">templates</em>. La plus simple est
d&#8217;ajouter une balise <code>script</code> spéciale dans votre fichier <code>index.html</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/x-handlebars&quot;</span> <span class="na">id=</span><span class="s">&quot;templatename&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span><span class="nx">Je</span> <span class="nx">suis</span> <span class="nx">un</span> <span class="nx">template</span><span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span></code></pre></div></figure>


<p>Pour chaque <em lang="en">template</em>, il vous faut une balise <code>script</code>. C&#8217;est simple et
rapide mais ça peut très vite devenir un gros désordre si vous avez beaucoup de
<em lang="en">templates</em>.</p>

<p>L&#8217;alternative est de créer un fichier <code>.hbs</code> (ou <code>.handlebars</code>) pour chaque
<em lang="en">template</em>. C&#8217;est ce qu&#8217;on appelle la &ldquo;précompilation de <em lang="en">templates</em>&rdquo;
et une
<a href="#quest-ce-que-la-precompilation-de-templates-handlebars">section entière</a> de
cet article y est dédiée.</p>

<p>Notre <a href="http://jkneb.github.io/ember-crud/unstyled">démo non stylisée</a> utilise
des balises <code>&lt;script type="text/x-handlebars"&gt;</code> et tous les <em lang="en">templates</em> de
notre <a href="http://jkneb.github.io/ember-crud">démo améliorée</a> sont stockés dans des fichiers <code>.hbs</code> qui
sont précompilés par une tâche <a href="http://gruntjs.com">Grunt</a>. Vous pouvez ainsi
comparer les deux techniques.</p>

<h3 id="creer-notre-modele-avec-le-fixtureadapter-de-ember-data">Créer notre modèle avec le <em lang="en">FixtureAdapter</em> de <em lang="en">Ember-Data</em></h3>

<p><em lang="en">Ember-Data</em> est une bibliothèque qui permet de récupérer les données
stockées sur le serveur, de les retenir dans un <code>Store</code>, de les mettre à jour
dans le navigateur et enfin des les renvoyer au serveur pour sauvegarde. Le
<code>Store</code> peut être configuré avec différents <em lang="en">adapters</em> (par exemple, le
<code>RESTAdapter</code> qui interagit avec une API JSON ou le <code>LSAdapter</code> qui stocke les
données dans le <em lang="en">local storage</em> du navigateur).
Une <a href="#quest-ce-quember-data">section entière</a> de cet article est dédiée à
<em lang="en">Ember-Data</em>.</p>

<p>Nous allons utiliser <code>FixtureAdapter</code>. Nous commençons donc par l&#8217;instancier :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='javascript'><span class='line'><span class="cm">/* /store.js</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">ApplicationAdapter</span> <span class="o">=</span> <span class="nx">DS</span><span class="p">.</span><span class="nx">FixtureAdapter</span><span class="p">;</span>
</span></code></pre></div></figure>


<p>Dans les versions précédentes d&#8217;<em lang="en">Ember</em>, il fallait hériter de <code>DS.Store</code>.
Ce n&#8217;est plus nécessaire pour instancier les <em lang="en">adapters</em>.</p>

<p><code>FixtureAdapter</code> est un très bon moyen de démarrer avec <em lang="en">Ember.js</em> et
<em lang="en">Ember-Data</em>. Il vous permet de travailler avec des données en
développement. Nous passerons au
<a href="https://github.com/rpflorence/ember-localstorage-adapter">LocalStorage adapter</a>
(ou <code>LSAdapter</code>) en fin de parcours.</p>

<p>Commençons par définir notre modèle. Un utilisateur aura un nom <code>name</code>, une
adresse <code>email</code>, une courte <code>bio</code>, un avatar <code>avatarUrl</code> et une date de création
<code>creationDate</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='javascript'><span class='line'><span class="cm">/* /models/user.js</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">User</span> <span class="o">=</span> <span class="nx">DS</span><span class="p">.</span><span class="nx">Model</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">name</span>         <span class="o">:</span> <span class="nx">DS</span><span class="p">.</span><span class="nx">attr</span><span class="p">(),</span>
</span><span class='line'>  <span class="nx">email</span>        <span class="o">:</span> <span class="nx">DS</span><span class="p">.</span><span class="nx">attr</span><span class="p">(),</span>
</span><span class='line'>  <span class="nx">bio</span>          <span class="o">:</span> <span class="nx">DS</span><span class="p">.</span><span class="nx">attr</span><span class="p">(),</span>
</span><span class='line'>  <span class="nx">avatarUrl</span>    <span class="o">:</span> <span class="nx">DS</span><span class="p">.</span><span class="nx">attr</span><span class="p">(),</span>
</span><span class='line'>  <span class="nx">creationDate</span> <span class="o">:</span> <span class="nx">DS</span><span class="p">.</span><span class="nx">attr</span><span class="p">()</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></div></figure>


<p>Ajoutons ensuite quelques données d&#8217;exemple dans notre <code>Store</code>. Vous pouvez
ajouter autant d&#8217;utilisateurs que vous le souhaitez :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='javascript'><span class='line'><span class="cm">/* /models/user.js</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">User</span><span class="p">.</span><span class="nx">FIXTURES</span> <span class="o">=</span> <span class="p">[{</span>
</span><span class='line'>  <span class="nx">id</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Sponge Bob&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">email</span><span class="o">:</span> <span class="s1">&#39;bob@sponge.com&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">bio</span><span class="o">:</span> <span class="s1">&#39;Lorem ispum dolor sit amet in voluptate fugiat nulla pariatur.&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">avatarUrl</span><span class="o">:</span> <span class="s1">&#39;http://jkneb.github.io/ember-crud/assets/images/avatars/sb.jpg&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">creationDate</span><span class="o">:</span> <span class="s1">&#39;Mon, 26 Aug 2013 20:23:43 GMT&#39;</span>
</span><span class='line'><span class="p">},</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">id</span><span class="o">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;John David&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">email</span><span class="o">:</span> <span class="s1">&#39;john@david.com&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">bio</span><span class="o">:</span> <span class="s1">&#39;Lorem ispum dolor sit amet in voluptate fugiat nulla pariatur.&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">avatarUrl</span><span class="o">:</span> <span class="s1">&#39;http://jkneb.github.io/ember-crud/assets/images/avatars/jk.jpg&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">creationDate</span><span class="o">:</span> <span class="s1">&#39;Fri, 07 Aug 2013 10:10:10 GMT&#39;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="err">…</span>
</span><span class='line'><span class="p">];</span>
</span></code></pre></div></figure>


<p>Pour en savoir plus sur les modèles, consultez
<a href="http://emberjs.com/guides/models">la documentation</a>.</p>

<h3 id="instancier-le-router">Instancier le Router</h3>

<p>Définissons notre <code>Router</code> avec les routes dont nous avons besoin (basées sur le
<a href="#schema-de-notre-application">diagramme vu précédemment</a>).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='javascript'><span class='line'><span class="cm">/* /router.js</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">Router</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">resource</span><span class="p">(</span><span class="s1">&#39;users&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">resource</span><span class="p">(</span><span class="s1">&#39;user&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">path</span><span class="o">:</span><span class="s1">&#39;/:user_id&#39;</span> <span class="p">},</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">route</span><span class="p">(</span><span class="s1">&#39;edit&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">route</span><span class="p">(</span><span class="s1">&#39;create&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></div></figure>


<p>Le <code>Router</code> va générer les routes suivantes :</p>

<table>
<thead>
<tr>
<th>URL                  </th>
<th> Route Name   </th>
<th> Controller            </th>
<th> Route            </th>
<th> Template</th>
</tr>
</thead>
<tbody>
<tr>
<td>N/A                  </td>
<td> N/A          </td>
<td> ApplicationController </td>
<td> ApplicationRoute </td>
<td> application</td>
</tr>
<tr>
<td>/                    </td>
<td> index        </td>
<td> IndexController       </td>
<td> IndexRoute       </td>
<td> index</td>
</tr>
<tr>
<td>N/A                  </td>
<td> users        </td>
<td> UsersController       </td>
<td> UsersRoute       </td>
<td> users</td>
</tr>
<tr>
<td>/users               </td>
<td> users.index  </td>
<td> UsersIndexController  </td>
<td> UsersIndexRoute  </td>
<td> users/index</td>
</tr>
<tr>
<td>N/A                  </td>
<td> user         </td>
<td> UserController        </td>
<td> UserRoute        </td>
<td> user</td>
</tr>
<tr>
<td>/users/:user_id      </td>
<td> user.index   </td>
<td> UserIndexController   </td>
<td> UserIndexRoute   </td>
<td> user/index</td>
</tr>
<tr>
<td>/users/:user_id/edit </td>
<td> user.edit    </td>
<td> UserEditController    </td>
<td> UserEditRoute    </td>
<td> user/edit</td>
</tr>
<tr>
<td>/users/create        </td>
<td> users.create </td>
<td> UsersCreateController </td>
<td> UsersCreateRoute </td>
<td> users/create</td>
</tr>
</tbody>
</table>


<p>La partie <code>:user_id</code> est appelée segment dynamique. L&#8217;<em lang="en">ID</em> de l&#8217;utilisateur
sera injecté dans l&#8217;URL à cet emplacement. Cela aura donc la forme
<code>/users/3/edit</code>, <code>3</code> représentant l&#8217;utilisateur d&#8217;<em lang="en">ID</em> 3.</p>

<p>Vous pouvez définir soit une <code>route</code>, soit une <code>resource</code>. Une <code>resource</code> est un
groupe de routes et permet d&#8217;imbriquer d&#8217;autres routes.</p>

<p>Une <code>resource</code> réinitialise également la convention de nommage de la ressource
précédente. Cela signifie qu&#8217;au lieu d&#8217;avoir <code>UsersUserEditRoute</code>, nous aurons
<code>UserEditRoute</code>. En d&#8217;autres termes, si vous avez une ressource imbriquée dans
une autre ressource, les noms de nos fichiers seraient :</p>

<ul>
<li><code>UserEditRoute</code> au lieu de <code>UsersUserEditRoute</code> ;</li>
<li><code>UserEditControler</code> au lieu de <code>UsersUserEditController</code> ;</li>
<li><code>UserEditView</code> au lieu de <code>UsersUserEditView</code> ;</li>
<li>pour les <em lang="en">templates</em>, <code>user/edit</code> au lieu de <code>users/user/edit</code>.</li>
</ul>


<p>Vous pouvez en <a href="http://emberjs.com/guides/routing/defining-your-routes">apprendre plus sur les routes</a> dans les guides.</p>

<h3 id="le-template-de-lapplication">Le <em lang="en">template</em> de l&#8217;application</h3>

<p>Chaque application <em lang="en">Ember.js</em> nécéssite un <em lang="en">template</em> <code>Application</code>
contenant une balise <code>{{outlet}}</code> qui permet de contenir tous les autres
<em lang="en">templates</em>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='html'><span class='line'>/* /templates/application.hbs
</span><span class='line'>*/
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;main&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;h1&gt;</span>Hello World<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>  {{outlet}}
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></div></figure>


<p>Si vous suivez ce tutorial sans précompiler vos <em lang="en">templates</em>, voici ce à
quoi devrait ressembler votre <code>index.html</code> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='html'><span class='line'>/* /index.html
</span><span class='line'>*/
</span><span class='line'>  …
</span><span class='line'>  <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/x-handlebars&quot;</span> <span class="na">id=</span><span class="s">&quot;application&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">div</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;main&quot;</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">Hello</span> <span class="nx">World</span><span class="o">&lt;</span><span class="err">/h1&gt;</span>
</span><span class='line'>      <span class="p">{{</span><span class="nx">outlet</span><span class="p">}}</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;dependencies.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;your-app.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></div></figure>


<h3 id="la-route-users">La route <em lang="en">users</em></h3>

<p>Cette route est liée à notre liste d&#8217;utilisateurs. Comme nous l&#8217;avons vu
<a href="#le-routeur">précédemment</a> dans les définitions, une route est chargée
d&#8217;appeler le modèle. Les routes ont un <em lang="en">hook</em> <code>model</code> au travers duquel
nous pouvons effectuer une requête AJAX (pour récupérer les données lorsque
l&#8217;on n&#8217;utilise pas <em lang="en">Ember-Data</em>) ou faire appel au <code>Store</code> (si l&#8217;on utilise
<em lang="en">Ember-Data</em>). Si vous souhaitez savoir comment récupérer les données sans
<em lang="en">Ember-Data</em>, vous pouvez consulter la <a href="#sans-utiliser-ember-data">section</a>
dans laquelle j&#8217;explique brièvement comment le faire.</p>

<p>Créons maintenant notre <code>UsersRoute</code> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='javascript'><span class='line'><span class="cm">/* /routes/usersRoute.js</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">UsersRoute</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">model</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">store</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;user&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></div></figure>


<p>Vous pouvez en savoir plus sur
<a href="http://emberjs.com/guides/routing/specifying-a-routes-model">comment utiliser le <em lang="en">hook</em> <code>model</code> des routes</a> dans les
guides.</p>

<p>Si vous visitez votre application à l&#8217;URL <code>http://localhost/#/users</code>, rien ne se
produit, nous avons d&#8217;abord besoin du <em lang="en">template</em> <code>users</code>. Le voici :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='html'><span class='line'>/* /templates/users.hbs
</span><span class='line'>*/
</span><span class='line'><span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">&quot;users-listing&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  {{#each user in controller}}
</span><span class='line'>    <span class="nt">&lt;li&gt;</span>{{user.name}}<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>  {{else}}
</span><span class='line'>    <span class="nt">&lt;li&gt;</span>pas d&#39;utilisateurs… :-(<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>  {{/each}}
</span><span class='line'><span class="nt">&lt;/ul&gt;</span>
</span></code></pre></div></figure>


<p>La boucle <code>each</code> parcourt la collection d&#8217;utilisateurs, <code>controller</code> vaut ici
<code>UsersController</code>. Notez que la boucle <code>{{#each}}</code> contient un <code>{{else}}</code> de
façon à ce que, lorsque le modèle est vide, <code>pas d'utilisateurs… :-(</code> soit
affiché.</p>

<p>Comme nous suivons la convention de nommage d&#8217;<em lang="en">Ember</em>, nous pouvons nous
passer de déclarer <code>UsersController</code>. <em lang="en">Ember</em> devine que l&#8217;on gère une
collection car nous avons utilisé la forme plurielle de &ldquo;user&rdquo;.</p>

<h3 id="objectcontroller-vs-arraycontroller">ObjectController vs. ArrayController</h3>

<p>Un <code>ObjectController</code> est lié à un seul objet et un <code>ArrayController</code> est lié à
un groupe d&#8217;objets (comme une collection). Comme nous venons de le voir, nous
n&#8217;avons pas besoin de déclarer de <code>ArrayController</code>. Juste pour cet article,
nous allons cependant le déclarer pour lui attribuer quelques propriétés :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='javascript'><span class='line'><span class="cm">/* /controllers/usersController.js</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">UsersController</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">ArrayController</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">sortProperties</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">],</span>
</span><span class='line'>  <span class="nx">sortAscending</span><span class="o">:</span> <span class="kc">true</span> <span class="c1">// false = descending</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></div></figure>


<p>Nous avons simplement trié nos utilisateurs par ordre alphabétique. Consultez
les guides pour en <a href="http://emberjs.com/guides/controllers">apprendre plus sur les contrôleurs</a>.</p>

<h3 id="afficher-le-nombre-dutilisateurs">Afficher le nombre d&#8217;utilisateurs</h3>

<p>Utilisons <code>UsersController</code> pour créer notre première propriété calculée
(<a href="http://emberjs.com/guides/object-model/computed-properties/">computed property</a>). Celle-ci affichera le nombre
d&#8217;utilisateurs pour que nous puissions voir un changement lors de l&#8217;ajout ou de
la suppression d&#8217;un utilisateur.</p>

<p>Dans le <em lang="en">template</em>, il nous suffit d&#8217;utiliser ceci :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='html'><span class='line'>/* /templates/users.hbs
</span><span class='line'>*/
</span><span class='line'>…
</span><span class='line'><span class="nt">&lt;div&gt;</span>Utilisateurs: {{usersCount}}<span class="nt">&lt;/div&gt;</span>
</span><span class='line'>…
</span></code></pre></div></figure>


<p>Déclarons ensuite la propriété <code>usersCount</code> dans <code>UsersController</code> à la
différence que ce n&#8217;est pas une propriété classique puisqu&#8217;elle dépend de la
longueur du modèle.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='javascript'><span class='line'><span class="cm">/* /controllers/usersController.js</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">UsersController</span> <span class="o">=</span> <span class="nx">Em</span><span class="p">.</span><span class="nx">ArrayController</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="err">…</span>
</span><span class='line'>  <span class="nx">usersCount</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;model.length&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}.</span><span class="nx">property</span><span class="p">(</span><span class="s1">&#39;@each&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></div></figure>


<p>Pour faire simple, <code>usersCount</code> utilise la méthode <code>.property('@each')</code> qui
indique à <em lang="en">Ember.js</em> que cette fonction est une propriété qui observe tout
changement sur l&#8217;un des modèles de la collection (ici les utilisateurs). Nous
verrons ensuite <code>usersCount</code> s&#8217;incrémenter ou se décrémenter chaque fois que
nous ajouterons ou supprimerons un utilisateur.</p>

<h3 id="proprietes-calculees">Propriétés calculées</h3>

<p>Les propriétés calculées sont puissantes. Elles permettent de déclarer des
fonctions en tant que propriétés. Voyons comment elles fonctionnent.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='javascript'><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">Person</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nb">Object</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">firstName</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">lastName</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">fullName</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;firstName&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39; &#39;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;lastName&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}.</span><span class="nx">property</span><span class="p">(</span><span class="s1">&#39;firstName&#39;</span><span class="p">,</span> <span class="s1">&#39;lastName&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">ironMan</span> <span class="o">=</span> <span class="nx">App</span><span class="p">.</span><span class="nx">Person</span><span class="p">.</span><span class="nx">create</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">firstName</span><span class="o">:</span> <span class="s2">&quot;Tony&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">lastName</span><span class="o">:</span>  <span class="s2">&quot;Stark&quot;</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">ironMan</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;fullName&#39;</span><span class="p">)</span> <span class="c1">// &quot;Tony Stark&quot;</span>
</span></code></pre></div></figure>


<p>Dans l&#8217;exemple ci-dessus, l&#8217;objet <code>Person</code> a deux propriétés statiques,
<code>firsName</code> et <code>lastName</code>. Il a également une propriétés calculées <code>fullName</code> qui
concatène le prénom et le nom pour créer un nom complet. Notez que l&#8217;appel à
<code>.property('firsName', 'lastName')</code> indique que la fonction est de nouveau
exécutée lorsque <code>firsName</code> ou <code>lastName</code> change.</p>

<p>Les propriétés (statiques ou calculées) sont récupérables grâce à la méthode
<code>.get('property')</code> et peuvent être assignées via <code>.set('property', newValue)</code>.</p>

<p>Si vous avez besoin d&#8217;assigner plusieurs propriétés, il y a mieux que de le
faire une par une. Vous pouvez utiliser <code>.setProperties({})</code> plutôt que
plusieurs appels à <code>.set()</code>. Au lieu de ceci :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='javascript'><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;propertyA&#39;</span><span class="p">,</span> <span class="s1">&#39;valueA&#39;</span><span class="p">);</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;propertyB&#39;</span><span class="p">,</span> <span class="nx">valueB</span><span class="p">);</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;propertyC&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;propertyD&#39;</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Utilisez</span> <span class="nx">plut</span><span class="err">ô</span><span class="nx">t</span> <span class="nx">cela</span><span class="err"> </span><span class="o">:</span>
</span><span class='line'>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">setProperties</span><span class="p">({</span>
</span><span class='line'>  <span class="s1">&#39;propertyA&#39;</span><span class="o">:</span> <span class="s1">&#39;valueA&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;propertyB&#39;</span><span class="o">:</span> <span class="nx">valueB</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;propertyC&#39;</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;propertyD&#39;</span><span class="o">:</span> <span class="kc">false</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></div></figure>


<p>La documentation contient beaucoup d&#8217;informations sur comment lier les données
grâce aux <a href="http://emberjs.com/guides/object-model/computed-properties/">propriétés calculées</a>, aux
<a href="http://emberjs.com/guides/object-model/observers">observers</a> et aux
<a href="http://emberjs.com/guides/object-model/bindings">bindings</a>.</p>

<h3 id="rediriger-depuis-la-page-index">Rediriger depuis la page Index</h3>

<p>Si vous visitez la page d&#8217;accueil de votre application (<code>http://localhost/</code>),
rien ne se passe. Cela est dû au fait que nous consultons la page <code>index</code> et que
nous n&#8217;avons pas de <em lang="en">template</em> <code>index</code>, nous allons donc en ajouter un que
nous appellerons <code>index.hbs</code>.</p>

<p><em lang="en">Ember.js</em> sait que vous créez un <em lang="en">template</em> <code>index</code> pour la route
<code>IndexRoute</code>, vous n&#8217;avez donc rien à indiquer dans le <code>Router</code> pour que
tout fonctionne. C&#8217;est ce que l&#8217;on appelle une route initiale. Il en existe
trois : <code>ApplicationRoute</code>, <code>IndexRoute</code> et <code>LoadingRoute</code>. Consultez
<a href="http://emberjs.com/guides/routing/defining-your-routes/#toc_initial-routes">les guides</a> pour en savoir plus.</p>

<p>Ajoutons un lien vers la page des utilisateurs avec le <em lang="en">block helper</em>
<code>{{#link-to}}…{{/link-to}}</code>. Pourquoi un <em lang="en">block helper</em> ? Parce que vous
pouvez écrire du texte entre les balises comme s&#8217;il s&#8217;agissait de balises HTML.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='html'><span class='line'>/* /templates/index.hbs
</span><span class='line'>*/
</span><span class='line'>{{#link-to &quot;users&quot;}} Go to the users page {{/link-to}}
</span></code></pre></div></figure>


<p>Le premier argument est le nom de la route vers laquelle pointe le lien. Le
deuxième argument, optionnel, est un modèle. Le résultat est un <code>&lt;a&gt;</code> classique
mais <em lang="en">Ember</em> gère automatiquement la classe <code>active</code> en fonction de la
route active. <code>link-to</code> est parfait pour une menu par exemple. Vous pouvez en
apprendre plus <a href="http://emberjs.com/guides/templates/links">dans les guides</a>.</p>

<p>Une autre approche pourrait être de dire à <code>IndexRoute</code> de rediriger vers
<code>UsersRoute</code>. Encore une fois, c&#8217;est assez simple :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='javascript'><span class='line'><span class="cm">/* /routes/indexRoute.js</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">IndexRoute</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">redirect</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">transitionTo</span><span class="p">(</span><span class="s1">&#39;users&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></div></figure>


<p>Lorsque l&#8217;on visite la page d&#8217;accueil, on est immédiatement redirigé vers
<code>/#/users</code>.</p>

<h3 id="route-dun-utilisateur-specifique">Route d&#8217;un utilisateur spécifique</h3>

<p>Avant de gérer les segments dynamiques, nous devons créer un lien vers chaque
utilisateur depuis le <em lang="en">template</em> <code>users</code>. Utilisons le <em lang="en">block helper</em>
<code>{{#link-to}}</code> dans une boucle <code>each</code> qui parcourt les utilisateurs.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='html'><span class='line'>/* /templates/users.hbs
</span><span class='line'>*/
</span><span class='line'>…
</span><span class='line'>{{#each user in controller}}
</span><span class='line'>  <span class="nt">&lt;li&gt;</span>
</span><span class='line'>    {{#link-to &quot;user&quot; user}}
</span><span class='line'>      {{user.name}}
</span><span class='line'>    {{/link-to}}
</span><span class='line'>  <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>{{/each}}
</span></code></pre></div></figure>


<p>Le deuxième argument passé à <code>link-to</code> est le modèle à passer à <code>UserRoute</code>.</p>

<p>Occupons-nous maintenant du <em lang="en">template</em> d&#8217;un utilisateur spécifique. Il
ressemble à ceci :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='html'><span class='line'>/* /templates/user.hbs
</span><span class='line'>*/
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;user-profile&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;img</span> <span class="err">{{</span><span class="na">bind-attr</span> <span class="na">src=</span><span class="s">&quot;avatarUrl&quot;</span><span class="err">}}</span> <span class="na">alt=</span><span class="s">&quot;Avatar de l&#39;utilisateur&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;h2&gt;</span>{{name}}<span class="nt">&lt;/h2&gt;</span>
</span><span class='line'>  <span class="nt">&lt;span&gt;</span>{{email}}<span class="nt">&lt;/span&gt;</span>
</span><span class='line'>  <span class="nt">&lt;p&gt;</span>{{bio}}<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>  <span class="nt">&lt;span&gt;</span>Création {{creationDate}}<span class="nt">&lt;/span&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></div></figure>


<p>Notez que vous ne pouvez pas utiliser <code>&lt;img src="{{avatarUrl}}"&gt;</code>, les données
attachées à un attribut doivent utiliser le <em lang="en">helper</em> <code>bind-attr</code>. Vous
pouvez par exemple écrire <code>&lt;img {{bind-attr height="imgHeight"}}&gt;</code> avec
<code>imgHeight</code> qui serait une propriété calculée dans le contrôleur.</p>

<p>Vous trouverez tout ce dont vous avez besoin sur les
<a href="http://emberjs.com/guides/templates/binding-element-attributes/">attributs</a> et les
<a href="http://emberjs.com/guides/templates/binding-element-class-names">classes HTML</a> dans les guides.</p>

<p>Jusque là, tout va bien mais rien ne se passe lorsque l&#8217;on clique sur le lien
d&#8217;un utilisateur. Cela est dû au fait que nous avons dit au <code>Router</code> que nous
voulions imbriquer <code>UserRoute</code> dans <code>UsersRoute</code>. Nous avons donc besoin d&#8217;un
<code>{{outlet}}</code> dans lequel afficher le <em lang="en">template</em> d&#8217;un utilisateur.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='html'><span class='line'>/* /templates/users.hbs
</span><span class='line'>*/
</span><span class='line'>…
</span><span class='line'>{{#each user in controller}}
</span><span class='line'>…
</span><span class='line'>{{/each}}
</span><span class='line'>
</span><span class='line'>{{outlet}}
</span></code></pre></div></figure>


<p><code>{{outlet}}</code> est une sorte d&#8217;espace réservé dans lequel les autres
<em lang="en">templates</em> peuvent être injectés lorsque l&#8217;on clique sur un
<code>{{#link-to}}</code>. Cela permet d&#8217;imbriquer les vues.</p>

<p>Vous devriez maintenant voir le <em lang="en">template</em> d&#8217;un utilisateur s&#8217;afficher dans
la page lorsque vous visitez l&#8217;URL <code>/#/users/1</code>.</p>

<p>Attendez une minute ! Nous n&#8217;avons déclaré ni <code>UserRoute</code> ni <code>UserController</code> et
pourtant tout fonctionne ! Comment est-ce possible ? <code>UserRoute</code> est la version
singulière de <code>UsersRoute</code>, <em lang="en">Ember</em> génère donc la route et le contrôleur
pour nous (en mémoire). Merci aux conventions de nommage !</p>

<p>Pour une question de consistance, nous allons les déclrarer, juste pour voir à
quoi il ressemblent :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='javascript'><span class='line'><span class="cm">/* /routes/userRoute.js</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">UserRoute</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">model</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">params</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">store</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;user&#39;</span><span class="p">,</span> <span class="nx">params</span><span class="p">.</span><span class="nx">user_id</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* /controllers/userController.js</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">UserController</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">ObjectController</span><span class="p">.</span><span class="nx">extend</span><span class="p">();</span>
</span></code></pre></div></figure>


<p>Pour en apprendre plus sur les <a href="http://emberjs.com/guides/routing/specifying-a-routes-model/#toc_dynamic-models">segments dynamiques</a>,
rendez-vous dans les guides.</p>

<h3 id="modifier-un-utilisateur">Modifier un utilisateur</h3>

<p>Passons maintenant au formulaire de modification d&#8217;un utilisateur, imbriqué dans
la page de ce dernier. Le <em lang="en">template</em> ressemble à ceci :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='html'><span class='line'>/* /templates/user/edit.hbs
</span><span class='line'>*/
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;user-edit&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;label&gt;</span>Choisissez votre avatar<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>  {{input value=avatarUrl}}
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;label&gt;</span>Nom de l&#39;utilisateur<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>  {{input value=name}}
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;label&gt;</span>Email de l&#39;utilisateur<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>  {{input value=email}}
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;label&gt;</span>Bio de l&#39;utilisateur<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>  {{textarea value=bio}}
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></div></figure>


<p>Arrêtons-nous une minute sur ces balises <a href="http://emberjs.com/api/classes/Ember.Handlebars.helpers.html#method_input"><code>{{input}}</code></a>. Le but de
ce formulaire est de permettre la modification des données d&#8217;un utilisateur et
ces balises <code>input</code> prennent en paramètre les propriétés du modèle pour s&#8217;y
attacher.</p>

<p>Notez bien que l&#8217;on écrit <code>value=model</code>, sans les <code>" "</code>. Le <em lang="en">helper</em>
<code>{{input}}</code> est un raccourcis pour <code>{{Ember.TextField}}</code>. <em lang="en">Ember.js</em>
propose plusieurs
<a href="http://emberjs.com/guides/views/built-in-views">vues prédéfinies</a>, en
particulier pour les éléments de formulaires.</p>

<p>Si vous visitez l&#8217;URL <code>/#/users/1/edit</code> de votre application, rien ne se passe.
Nous avons de nouveau besoin d&#8217;un <code>{{outlet}}</code> pour imbriquer le <em lang="en">template</em>
du formulaire dans celui de l&#8217;utilisateur.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='html'><span class='line'>/* /templates/user.hbs
</span><span class='line'>*/
</span><span class='line'>…
</span><span class='line'>{{outlet}}
</span></code></pre></div></figure>


<p>Le <em lang="en">template</em> est maintenant injecté dans la page mais les champs sont
toujours vides. Nous devons dire à la route quel modèle utiliser.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='javascript'><span class='line'><span class="cm">/* /routes/userEditRoute.js</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">UserEditRoute</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">model</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">modelFor</span><span class="p">(</span><span class="s1">&#39;user&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></div></figure>


<p>La méthode
<a href="http://emberjs.com/api/classes/Ember.Route.html#method_modelFor">modelFor</a> vous
permet d&#8217;utiliser le modèle d&#8217;une autre route. Nous avons indiqué à
<code>UserEditRoute</code> d&#8217;utiliser le modèle de <code>UserRoute</code>. Les champs sont maintenant
remplis correctement avec les données du modèle. Essayez de les modifier, vous
pourrez voir les modifications reportées en direct dans le <em lang="en">template</em>
parent !</p>

<h3 id="notre-premiere-action">Notre première action</h3>

<p>Ok, nous avons besoin d&#8217;un bouton sur lequel cliquer pour être redirigé de
<code>UserRoute</code> vers <code>UserEditRoute</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='html'><span class='line'>/* /templates/user.hbs
</span><span class='line'>*/
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;user-profile&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;button</span> <span class="err">{{</span><span class="na">action</span> <span class="err">&quot;</span><span class="na">edit</span><span class="err">&quot;}}</span><span class="nt">&gt;</span>Modifier<span class="nt">&lt;/button&gt;</span>
</span><span class='line'>  …
</span></code></pre></div></figure>


<p>Nous venons d&#8217;ajouter un simple <code>button</code> qui lance notre première <code>{{action}}</code>.
Les actions sont des événements qui lancent les méthodes associées dans le
contrôleur courant.  Si aucune méthode n&#8217;est trouvée, l&#8217;action remonte
(<em lang="en">bubble</em>) les routes jusqu&#8217;à trouver quelque chose. Ce mécanisme est très
bien expliqué <a href="http://emberjs.com/guides/templates/actions/#toc_action-bubbling">dans les guides</a>.</p>

<p>En d&#8217;autres termes, si nous cliquons (<code>click</code>) sur le <code>button</code>, il va lancer
l&#8217;action <code>edit</code> qui se trouve dans le contrôleur. Ajoutons-la à
<code>UserController</code> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='javascript'><span class='line'><span class="cm">/* /controllers/userController.js</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">UserController</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">ObjectController</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">actions</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">edit</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">transitionToRoute</span><span class="p">(</span><span class="s1">&#39;user.edit&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></div></figure>


<p>Les actions, que ce soit dans un contrôleur ou une route, sont stockées dans
le <em lang="en">hash</em> <code>actions</code>. Ce n&#8217;est cependant pas le cas des actions par défaut
comme <code>click</code>, <code>doubleClick</code>, <code>mouseLeave</code> ou <code>dragStart</code>. Le site
d&#8217;<em lang="en">Ember.js</em> contient la
<a href="http://emberjs.com/api/classes/Ember.View.html#toc_event-names">liste complète</a>
de ces actions.</p>

<p>Notre action <code>edit</code> dit simplement &ldquo;Va sur la route <code>user.edit</code>&rdquo;. C&#8217;est à peu
près tout.</p>

<h3 id="transitionto-ou-transitiontoroute">TransitionTo ou TransitionToRoute ?</h3>

<p>Notez que la transition depuis une route est différente de la transition depuis
un contrôleur :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='javascript'><span class='line'><span class="c1">// depuis une route</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">transitionTo</span><span class="p">(</span><span class="s1">&#39;your.route&#39;</span><span class="p">)</span>
</span><span class='line'><span class="c1">// depuis un contrôleur</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">transitionToRoute</span><span class="p">(</span><span class="s1">&#39;your.route&#39;</span><span class="p">)</span>
</span></code></pre></div></figure>


<h3 id="sauvegarder-les-modifications-apportees-a-lutilisateur">Sauvegarder les modifications apportées à l&#8217;utilisateur</h3>

<p>Voyons maintenant comment sauvegarder nos modifications après avoir changé la
valeur des données de l&#8217;utilisateur. Par sauvegarder, j&#8217;entends rendre
persistant. Avec <em lang="en">Ember-Data</em>, cela signifie d&#8217;appeler <code>save()</code> sur le
<code>Store</code> et de sauvegarder le nouveau <code>record</code> correspondant à l&#8217;utilisateur.
Le <code>Store</code> va ensuite dire à l&#8217;<code>adapter</code> d&#8217;effectuer une requête AJAX <em lang="en">PUT</em>
(si vous utilisez <code>RESTAdapter</code>).</p>

<p>Dans notre application, il s&#8217;agit d&#8217;un <code>button</code> &ldquo;OK&rdquo; qui sauvegarde les
modifications et retourne à la route parente. Nous allons à nouveau utiliser
une <code>{{action}}</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='html'><span class='line'>/* /templates/user/edit.hbs
</span><span class='line'>*/
</span><span class='line'><span class="nt">&lt;button</span> <span class="err">{{</span><span class="na">action</span> <span class="err">&quot;</span><span class="na">save</span><span class="err">&quot;}}</span><span class="nt">&gt;</span> ok <span class="nt">&lt;/button&gt;</span>
</span></code></pre></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='javascript'><span class='line'><span class="cm">/* /controllers/userEditController.js</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">UserEditController</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">ObjectController</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">actions</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">save</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">user</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;model&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="c1">// cela indique à Ember-Data de sauvegarder le nouvel enregistrement</span>
</span><span class='line'>      <span class="nx">user</span><span class="p">.</span><span class="nx">save</span><span class="p">();</span>
</span><span class='line'>      <span class="c1">// puis transite vers l&#39;utilisateur courant</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">transitionToRoute</span><span class="p">(</span><span class="s1">&#39;user&#39;</span><span class="p">,</span> <span class="nx">user</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></div></figure>


<p>Notre mode &ldquo;modification&rdquo; fonctionne bien. Passons maintenant à la suppression
d&#8217;un utilisateur.</p>

<h3 id="supprimer-un-utilisateur">Supprimer un utilisateur</h3>

<p>Nous pouvons ajouter un <code>button</code> &ldquo;Supprimer&rdquo; à côté du bouton &ldquo;Modifier&rdquo; dans le
<em lang="en">template</em> d&#8217;un utilisateur. Cette fois nous aurons une <code>{{action}}</code>
<code>delete</code> définie dans <code>UserController</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='html'><span class='line'>/* /templates/user.hbs
</span><span class='line'>*/
</span><span class='line'><span class="nt">&lt;button</span> <span class="err">{{</span><span class="na">action</span> <span class="err">&quot;</span><span class="na">delete</span><span class="err">&quot;}}</span><span class="nt">&gt;</span>Supprimer<span class="nt">&lt;/button&gt;</span>
</span></code></pre></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='javascript'><span class='line'><span class="cm">/* /controllers/userController.js</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="err">…</span>
</span><span class='line'><span class="nx">actions</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">delete</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="c1">// ceci indique à Ember-Data de supprimer l&#39;utilisateur courant</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;model&#39;</span><span class="p">).</span><span class="nx">deleteRecord</span><span class="p">();</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;model&#39;</span><span class="p">).</span><span class="nx">save</span><span class="p">();</span>
</span><span class='line'>    <span class="c1">// puis transite vers la route users</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">transitionToRoute</span><span class="p">(</span><span class="s1">&#39;users&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></div></figure>


<p>Lorsque l&#8217;on clique sur le bouton &ldquo;Supprimer&rdquo;, l&#8217;utilisateur est directement
supprimé. Un peu direct ; un message de confirmation comme &ldquo;Êtes-vous sûr ?&rdquo;
avec des boutons &ldquo;Oui&rdquo; et &ldquo;Non&rdquo; seraient bienvenus. Pour ce faire, nous devons
modifier notre <code>{{action "delete"}}</code> pour afficher <code>confirm-box</code> plutôt que de
supprimer immédiatement l&#8217;utilisateur. Et, bien sûr, nous devons mettre
<code>confirm-box</code> dans le <em lang="en">template</em> <code>user</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='html'><span class='line'>/* /templates/user.hbs
</span><span class='line'>*/
</span><span class='line'>{{#if deleteMode}}
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;confirm-box&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;h4&gt;</span>Sûr ?<span class="nt">&lt;/h4&gt;</span>
</span><span class='line'>  <span class="nt">&lt;button</span> <span class="err">{{</span><span class="na">action</span> <span class="err">&quot;</span><span class="na">confirmDelete</span><span class="err">&quot;}}</span><span class="nt">&gt;</span> oui <span class="nt">&lt;/button&gt;</span>
</span><span class='line'>  <span class="nt">&lt;button</span> <span class="err">{{</span><span class="na">action</span> <span class="err">&quot;</span><span class="na">cancelDelete</span><span class="err">&quot;}}</span><span class="nt">&gt;</span> non <span class="nt">&lt;/button&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'>{{/if}}
</span></code></pre></div></figure>


<p>Nous venons d&#8217;écrire notre premier <code>{{if}}</code> avec <em lang="en">Handlebars</em>. Il n&#8217;écrit
<code>div.confirm-box</code> que lorsque la propriété <code>deleteMode</code> est à <code>true</code>. Nous
devons définir <code>deleteMode</code> dans le contrôleur et modifier l&#8217;action <code>delete</code>
pour qu&#8217;il passe <code>deleteMode</code> à <code>true</code> ou <code>false</code>. Notre <code>UserController</code>
ressemble maintenant à ceci :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='javascript'><span class='line'><span class="cm">/* /controllers/userController.js</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">UserController</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">ObjectController</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="c1">// la propriété deleteMode est à false par défaut</span>
</span><span class='line'>  <span class="nx">deleteMode</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">actions</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">delete</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="c1">// notre méthode delete change uniquement la valeur de deleteMode</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">toggleProperty</span><span class="p">(</span><span class="s1">&#39;deleteMode&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">cancelDelete</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="c1">// remet deleteMode à false</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;deleteMode&#39;</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">confirmDelete</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="c1">// ceci indique à Ember-Data de supprimer l&#39;utilisateur courant</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;model&#39;</span><span class="p">).</span><span class="nx">deleteRecord</span><span class="p">();</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;model&#39;</span><span class="p">).</span><span class="nx">save</span><span class="p">();</span>
</span><span class='line'>      <span class="c1">// puis transite vers la route users</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">transitionToRoute</span><span class="p">(</span><span class="s1">&#39;users&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="c1">// et remet deleteMode à false</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;deleteMode&#39;</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="c1">// le méthode edit reste la même</span>
</span><span class='line'>    <span class="nx">edit</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">transitionToRoute</span><span class="p">(</span><span class="s1">&#39;user.edit&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></div></figure>


<p>La suppression fonctionne maintenant comme il faut avec les boutons &ldquo;Oui&rdquo; et
&ldquo;Non&rdquo;. Génial ! Il ne reste plus que la route de création à écrire.</p>

<h3 id="creer-un-utilisateur">Créer un utilisateur</h3>

<p>Pour la création de l&#8217;utilisateur, essayons quelque chose de fun : réutilisons
le <em lang="en">template</em> <code>edit</code>. Au final, le formulaire est exactement le même que
celui de modification d&#8217;un utilisateur. Commençons par déclarer la route qui va
retourner un objet vide dans son <em lang="en">hook</em> <code>model</code> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='javascript'><span class='line'><span class="cm">/* /routes/usersCreateRoute.js</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">UsersCreateRoute</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">model</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="c1">// le modèle de cette route est un nouvel Ember.Object vide</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">Em</span><span class="p">.</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">({});</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// dans le cas présent (la route create), nous pouvons réutiliser le template</span>
</span><span class='line'>  <span class="c1">// user/edit associé avec usersCreateController</span>
</span><span class='line'>  <span class="nx">renderTemplate</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="s1">&#39;user.edit&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">controller</span><span class="o">:</span> <span class="s1">&#39;usersCreate&#39;</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></div></figure>


<p>La méthode <code>renderTemplate</code> nous permet d&#8217;associer un <em lang="en">template</em> spécifique
à une route. Nous indiquons à <code>UsersCreateRoute</code> d&#8217;utiliser le <em lang="en">template</em>
<code>user.edit</code> avec <code>UsersCreateController</code>. Vous pouvez en apprendre plus sur
<code>renderTemplate</code>
<a href="http://emberjs.com/guides/routing/rendering-a-template/">dans les guides</a>.</p>

<p>Définissons maintenant une autre action <code>save</code>, mais dans
<code>UsersCreateController</code> cette fois (souvenez-vous qu&#8217;une <code>action</code> va d&#8217;abord
chercher une méthode correspondante dans le contrôleur <em>courant</em>).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='javascript'><span class='line'><span class="cm">/* /controllers/usersCreateController.js</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">UsersCreateController</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">ObjectController</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">actions</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">save</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="c1">// nous donnons une date de création juste avant la sauvegarde</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;model&#39;</span><span class="p">).</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;creationDate&#39;</span><span class="p">,</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// crée un nouvel enregistrement et le sauvegarde dans le Store</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">newUser</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">store</span><span class="p">.</span><span class="nx">createRecord</span><span class="p">(</span><span class="s1">&#39;user&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;model&#39;</span><span class="p">));</span>
</span><span class='line'>      <span class="nx">newUser</span><span class="p">.</span><span class="nx">save</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// redirige vers l&#39;utilisateur lui-même</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">transitionToRoute</span><span class="p">(</span><span class="s1">&#39;user&#39;</span><span class="p">,</span> <span class="nx">newUser</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></div></figure>


<p>Ajoutons maintenant un <code>{{#link-to}}</code> dans le <em lang="en">template</em> <code>users</code> pour
pouvoir accéder au formulaire de création :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='html'><span class='line'>/* /templates/users.hbs
</span><span class='line'>*/
</span><span class='line'>{{#link-to &quot;users.create&quot; class=&quot;create-btn&quot;}} Ajouter un utilisateur {{/link-to}}
</span><span class='line'>…
</span></code></pre></div></figure>


<p>C&#8217;est tout ce dont nous avons besoin pour créer des utilisateurs !</p>

<h3 id="formater-les-donnees-avec-les-helpers">Formater les données avec les <em lang="en">helpers</em></h3>

<p>Nous avons <a href="#helpers">déjà vu</a> ce que sont les <em lang="en">helpers</em>. Voyons maintenant
comment en créer un qui nous permette de formater une date toute moche en
quelque chose de plus propre. La bibliothèque <a href="http://momentjs.com">Moment.js</a> est
exactement ce dont nous avons besoin.</p>

<p>Récupérez <a href="http://momentjs.com">Moment.js</a> et chargez le dans la page. Nous allons ensuite
définir notre premier <em lang="en">helper</em> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='javascript'><span class='line'><span class="cm">/* /helpers/helpers.js</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="nx">Ember</span><span class="p">.</span><span class="nx">Handlebars</span><span class="p">.</span><span class="nx">helper</span><span class="p">(</span><span class="s1">&#39;formatDate&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">date</span><span class="p">){</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">moment</span><span class="p">(</span><span class="nx">date</span><span class="p">).</span><span class="nx">fromNow</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></div></figure>


<p>Modifions le <em lang="en">template</em> <code>user</code> pour qu&#8217;il fasse appel au <em lang="en">helper</em>
<code>formatDate</code> sur la propriété <code>{{creationDate}}</code> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='html'><span class='line'>/* /templates/user.hbs
</span><span class='line'>*/
</span><span class='line'>…
</span><span class='line'><span class="nt">&lt;span&gt;</span>Création {{formatDate creationDate}}<span class="nt">&lt;/span&gt;</span>
</span><span class='line'>…
</span></code></pre></div></figure>


<p>C&#8217;est tout ! Les dates devraient s&#8217;afficher sous la forme &ldquo;2 days ago&rdquo; (il y a
deux jours), &ldquo;One month ago&rdquo; (il y a un mois), etc.</p>

<p><abbr title="Note du traducteur">NDT</abbr> : Moment.js permet d&#8217;utiliser
d&#8217;autres langues que l&#8217;anglais, tout est expliqué
<a href="http://momentjs.com/docs/#/i18n/">dans la documentation</a>.</p>

<h3 id="formater-les-donnees-avec-un-boundhelper">Formater les données avec un <em lang="en">BoundHelper</em></h3>

<p>Dans le cas précédent, la date est fixe et ne risque pas de changer. Si nous
avons par contre des données qui doivent être mises à jour (par exemple un
prix formaté), il faut utiliser un <code>BoundHelper</code> au lien d&#8217;un <em lang="en">helper</em>
classique.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='javascript'><span class='line'><span class="cm">/* /helpers/helpers.js</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="nx">Ember</span><span class="p">.</span><span class="nx">Handlebars</span><span class="p">.</span><span class="nx">registerBoundHelper</span><span class="p">(</span><span class="s1">&#39;formatDate&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">date</span><span class="p">){</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">moment</span><span class="p">(</span><span class="nx">date</span><span class="p">).</span><span class="nx">fromNow</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></div></figure>


<p>Un <code>BoundHelper</code> sait se mettre à jour automatiquement lorsque les données
changent. Vous pouvez en apprendre plus sur le sujet
<a href="http://emberjs.com/api/classes/Ember.Handlebars.html#method_registerBoundHelper">dans les guides</a>.</p>

<h3 id="passer-au-localstorage-adapter">Passer au <em lang="en">LocalStorage Adapter</em></h3>

<p>Notre application fonctionne bien, nous sommes donc prêts à passer aux choses
sérieuses. Nous pourrions utiliser le <code>RESTAdapter</code> mais nous aurions du coup
besoin d&#8217;un server REST sur lequel effectuer des requêtes <code>GET</code>, <code>PUT</code>, <code>POST</code>
et <code>DELETE</code>. Nous allons plutôt utiliser le <code>LSAdapter</code>, un <em lang="en">adapter</em>
externe que vous pouvez <a href="https://github.com/rpflorence/ember-localstorage-adapter/blob/master/localstorage_adapter.js">télécharger sur GitHub</a>. Ajoutez-le dans
votre page (juste après <em lang="en">Ember-Data</em>), commentez toutes les données
<code>FIXTURE</code> et changez <code>ApplicationAdapter</code> pour <code>DS.LSAdapter</code> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='javascript'><span class='line'><span class="cm">/* /store.js</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">ApplicationAdapter</span> <span class="o">=</span> <span class="nx">DS</span><span class="p">.</span><span class="nx">LSAdapter</span><span class="p">;</span>
</span></code></pre></div></figure>


<p>Les données de vos utilisateurs seront maintenant stockées dans le
<em lang="en">local storage</em> (stockage local du navigateur). C&#8217;est tout ! Sérieusement,
c&#8217;est aussi simple que ça. Pour vous en assurer, ouvrez les
<em lang="en">Developer Tools</em> dans votre navigateur et rendez-vous dans le panneau
&ldquo;Ressource&rdquo;. Dans l&#8217;onglet &ldquo;Local Storage&rdquo; vous devriez trouver une entrée pour
<code>LSAdapter</code> avec toutes les données de vos utilisateurs.</p>

<p><img src="http://vfsvp.fr/images/ember/console-localstorage.png" alt="console-localstorage" /></p>

<h2 id="jouer-avec-les-vues">Jouer avec les vues</h2>

<p>Jusque là, nous n&#8217;avons déclaré aucune vue dans notre application, seulement des
<em lang="en">templates</em>. Pourquoi nous soucier des vues ? Et bien, elles sont très
puissantes pour gérer des événements, des animations ou des composants
réutilisables.</p>

<h3 id="jquery-et-didinsertelement">jQuery et <em lang="en">didInsertElement</em></h3>

<p>Que devons-nous faire pour utiliser jQuery comme d&#8217;habitude avec les vues
<em lang="en">Ember.js</em> ? Chaque vue ou composant a un <em lang="en">hook</em> <code>didInsertElement</code>
qui nous indique que la vue a effectivement été chargée dans le DOM. Cela vous
assure un accès aux éléments de la page depuis jQuery.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='javascript'><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">MyAwesomeComponent</span> <span class="o">=</span> <span class="nx">Em</span><span class="p">.</span><span class="nx">Component</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">didInsertElement</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="c1">// this = la vue</span>
</span><span class='line'>    <span class="c1">// this.$() = $(la vue)</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">$</span><span class="p">().</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="s1">&#39;.child .elem&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="c1">// quelque chose utilisant jQuery</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></div></figure>


<p>Si vous avez des événements du style jQuery enregistrés dans <code>didInsertElement</code>,
vous pouvez utiliser <code>willDestroyElement</code> pour les retirer après la suppression
d&#8217;une vue dans le DOM, comme ceci :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='javascript'><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">MyAwesomeComponent</span> <span class="o">=</span> <span class="nx">Em</span><span class="p">.</span><span class="nx">Component</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">didInsertElement</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">$</span><span class="p">().</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="s1">&#39;.child .elem&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="c1">// quelque chose utilisant jQuery</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">willDestroyElement</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">$</span><span class="p">().</span><span class="nx">off</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></div></figure>


<h3 id="panneaux-lateraux-avec-classname-dynamique">Panneaux latéraux avec className dynamique</h3>

<p>La combinaison des propriétés calculées et de classes (<code>className</code>) dynamiques
peut sembler une technique un peu folle mais ce n&#8217;est pas si terrible en
réalité. L&#8217;idée est simplement d&#8217;ajouter ou de retirer une classe CSS sur un
élément en fonction d&#8217;une propriété qui peut être <code>true</code> ou <code>false</code>. La classe
CSS contient bien sûr une transition CSS.</p>

<p>Mettons que nous avons une <code>div</code> cachée dans le DOM. Lorsque cette <code>div</code> a la
classe <code>opened</code>, elle s&#8217;affiche en glissant. Lorsqu&#8217;elle a la classe <code>closed</code>,
elle glisse de nouveau pour se cacher. Un panneau latéral est l&#8217;exemple parfait,
nous allons donc en écrire un.</p>

<p>Voici un JS Bin pour que vous puissiez tester le code :</p>

<p><a class="jsbin-embed" href="http://emberjs.jsbin.com/utimiZI/88/embed?js,output">Panneaux latérales réutilisables avec Ember.js - Smashing</a></p>

<p>Voici le détail de chaque onglet :</p>

<ul>
<li><strong>JavaScript</strong><br />
Nous commençons par déclarer notre <code>SidePanelComponent</code> avec des <code>classNames</code>
par défaut. Nous utilisons ensuite <code>classNameBindings</code> pour déterminer si
<code>isOpen</code> est à <code>true</code> ou <code>false</code> de façon à retourner <code>opened</code> ou <code>closed</code> en
fonction. Notre <code>component</code> a une action <code>toggleSidepanel</code> qui passe <code>isOpen</code>
à <code>true</code> ou <code>false</code>.</li>
<li><strong>HTML</strong><br />
Les balises du panneau latéral. Vous remarquerez le bloc
<code>{{#side-panel}}…{{/side-panel}}</code>, nous pouvons placer n&#8217;importe quoi dedans
ce qui rend notre panneau latéral extrêmement puissant et réutilisable. Le
bouton <code>btn-toggle</code> appelle l&#8217;action <code>toggleSidepanel</code> située dans le
composant. Le <code>{{#if isOpen}}</code> ajoute un peu de logique en vérifiant la valeur
de la propriété <code>isOpen</code>.</li>
<li><strong>CSS</strong><br />
Ici le but principal est de masquer le panneau latéral. La classe <code>opened</code>
le fait glisser en position ouverte et la classe <code>closed</code> le fait glisser dans
l&#8217;autre sens. L&#8217;animation est rendue possible parce que nous utilisons
<code>translate2D</code> (<code>transition:transform .3s ease</code>).</li>
</ul>


<p>Les guides contiennent de nombreux exemples sur comment lier des classes
<a href="http://emberjs.com/guides/components/customizing-a-components-element">dans les composants</a> ou
<a href="http://emberjs.com/guides/templates/binding-element-class-names">dans les <em lang="en">templates</em></a>.</p>

<h3 id="modals-avec-layout-et-remontee-devenements"><em lang="en">Modals</em> avec <em lang="en">layout</em> et remontée d&#8217;événements</h3>

<p>Cette technique est bien plus compliquée que la précédente. Elle implique bien
plus de fonctionnalités d&#8217;<em lang="en">Ember.js</em>. L&#8217;idée est de faire remonter un
événement d&#8217;une vue jusqu&#8217;à la route pour changer une propriété située dans un
contrôleur quelque part dans l&#8217;application. Nous allons utiliser une <code>View</code>
plutôt qu&#8217;un <code>Component</code> (pour mémoire, un composant est simplement une vue
isolée).</p>

<p><a class="jsbin-embed" href="http://emberjs.jsbin.com/aKUWUF/55/embed?js,output">Modals réutilisables avec Ember.js - Smashing</a></p>

<ul>
<li><strong>JavaScript</strong><br />
<code>modalView</code> est le <code>layout</code> par défaut pour toutes nos <em lang="en">modals</em>. Elle
contient deux méthodes, <code>showModal</code> et <code>hideModal</code>. La méthode <code>showModal</code> est
appelée par une <code>action</code> qui remonte, en passant par le contrôleur puis par
les routes, jusqu&#8217;à trouver l&#8217;action <code>showModal</code> correspondante. Nous avons
placé <code>showModal</code> dans la route la plus haute possible, <code>applicationRoute</code>.
Son seul but est de valuer la propriété <code>modalVisible</code> dans le contrôleur
passé en second argument de l&#8217;<code>action</code>. Et oui, créer une propriété en même
temps qu&#8217;on lui donne sa valeur est possible.</li>
<li><strong>HTML</strong><br />
Chaque <em lang="en">modal</em> a son propre <em lang="en">template</em> et nous utilisons le bloc
<code>{{#view App.ModalView}}…{{/view}}</code> pour les encapsuler dans <code>modal_layout</code>.
Les contrôleurs liés aux <em lang="en">modals</em> ne sont même pas déclarés,
<em lang="en">Ember.js</em> les a en mémoire. Notez que le <em lang="en">helper</em> <code>{{render}}</code>
accepte des arguments : le nom du <em lang="en">template</em> et le contrôleur généré pour
ce <em lang="en">template</em>. Nous appelons par exemple le <em lang="en">template</em> <code>modal01</code> et
le contrôleur <code>modal01</code> (auto-généré).</li>
<li><strong>CSS</strong><br />
Pour cet exemple, les <em lang="en">modals</em> doivent être présentes dans le DOM. Cela
peut sembler contraignant mais réduit le coût d&#8217;affichage. Sans cela,
<em lang="en">Ember.js</em> doit les injecter et les supprimer à chaque appel. Le second
avantage concerne les transitions CSS. La classe <code>shown</code> applique deux
transition : tout d&#8217;abord, la position verticale (la <em lang="en">modal</em> étant en
dehors de l&#8217;écran par défaut), puis, après un court délai, l&#8217;opacité (ce qui
<a href="https://speakerdeck.com/ariya/fluid-user-interface-with-hardware-acceleration?slide=36">réduit</a> encore le <a href="http://css-tricks.com/w3conf-ariya-hidayat-fluid-user-interface-with-hardware-acceleration">coût</a>
d&#8217;affichage durant la transition).</li>
</ul>


<p>Vous trouverez bien d&#8217;autres informations sur les
<a href="http://emberjs.com/guides/views/handling-events">événements</a>,
<a href="http://emberjs.com/guides/understanding-ember/the-view-layer/#toc_event-bubbling">la remontée d&#8217;événements</a>, les
<a href="http://emberjs.com/guides/views/adding-layouts-to-views">layouts</a> et le
<em lang="en">helper</em> <a href="http://emberjs.com/guides/templates/rendering-with-helpers/#toc_the-code-render-code-helper">{{render}}</a> dans les guides.</p>

<h2 id="quest-ce-quember-data">Qu&#8217;est-ce qu&#8217;<em lang="en">Ember-Data</em></h2>

<p><em lang="en">Ember-Data</em> est en beta au moment où j&#8217;écris ces lignes, faites donc
attention si vous décidez de l&#8217;utiliser.</p>

<p>C&#8217;est une bibliothèque qui permet de récupérer les données
stockées sur le serveur, de les retenir dans un <code>Store</code>, de les mettre à jour
dans le navigateur et enfin des les renvoyer au serveur pour sauvegarde. Le
<code>Store</code> peut être configuré avec différents <em lang="en">adapters</em> en fonction de votre
<em lang="en">back-end</em>. Voici un schéma de l&#8217;architecture d&#8217;<em lang="en">Ember-data</em>.</p>

<p><img src="http://vfsvp.fr/images/ember/ember-data-sketch.png" alt="ember-data-sketch" /></p>

<h3 id="le-store">Le <em lang="en">store</em></h3>

<p>Le <code>Store</code> retient les informations chargées depuis le serveur (les
enregistrements). Les routes et contrôleurs peuvent effectuer des requêtes sur
le <code>Store</code> pour récupérer des enregistrements (<em lang="en">records</em>). Lorsqu&#8217;un
enregistrement est appelé pour la première fois, le <code>Store</code> demande à
l&#8217;<em lang="en">adapter</em> de le charger au travers du réseau. Le <code>Store</code> le garde ensuite
en <em lang="en">cache</em> pour les prochains appels.</p>

<h3 id="les-adapters">Les <em lang="en">adapters</em></h3>

<p>L&#8217;application effectue des requêtes sur le <code>Store</code> et l&#8217;<em lang="en">adapter</em> effectue
des requêtes sur le <em lang="en">back-end</em>. Chaque <em lang="en">adapter</em> est fait pour un
<em lang="en">back-end</em> particulier. On trouve par exemple le <code>RESTAdapter</code> qui permet
de communiquer avec un API JSON et le <code>LSAdapter</code> qui permet d&#8217;utiliser le
<em lang="en">local storage</em> du navigateur.</p>

<p>L&#8217;idée derrière <em lang="en">Ember-Data</em> est de pouvoir changer de <em lang="en">back-end</em> en
changeant simplement l&#8217;<em lang="en">adapter</em> sans changer le code de votre application.</p>

<ul>
<li><em lang="en">FixtureAdapter</em><br />
Le <code>FixtureAdapter</code> est parfait pour tester <em lang="en">Ember</em> et <em lang="en">Ember-Data</em>.
Les <em lang="en">fixtures</em> sont des données d&#8217;exemple avec lesquelles vous pouvez
travailler jusqu&#8217;à ce que votre application soit prête pour la production.
Nous avons vu <a href="#creer-notre-modele-avec-le-fixtureadapter-de-ember-data">plus tôt dans cet article</a> comment le
configurer.</li>
<li><p><em lang="en">RESTAdapter</em><br />
Le <code>RESTAdapter</code> est l&#8217;<em lang="en">adapter</em> par défaut dans <em lang="en">Ember-Data</em>. Il
permet d&#8217;effectuer des requêtes <code>GET</code>, <code>PUT</code>, <code>POST</code> et <code>DELETE</code> sur une API
REST. Il repose sur un certain nombre de
<a href="http://emberjs.com/guides/models/the-rest-adapter/#toc_json-conventions">conventions JSON spécifiques</a>. Utiliser cet <em lang="en">adapter</em>
se fait comme ceci :</p>

<p><code>App.ApplicationAdapter = DS.RESTAdapter.extend({
  host: 'https://your.api.com'
});</code><br /></p>

<p>Il y a bien plus à découvrir sur le <code>RESTAdapter</code>
<a href="http://emberjs.com/guides/models/the-rest-adapter">dans les guides</a>.</p></li>
<li><p><em lang="en">Adapter</em> personnalisé<br />
Vous pouvez utiliser un autre <em lang="en">adapter</em> que les deux par défaut
(<code>FixtureAdapter</code> et <code>RESTAdapter</code>). On en trouve bon nombre
<a href="https://github.com/search?q=ember+adapter&amp;amp;ref=reposearch">sur Github</a>.
Il y a, par exemple, l&#8217;<a href="https://github.com/rpflorence/ember-localstorage-adapter"><em lang="en">adapter</em> LocalStorage</a> dont on
peut trouver une démo dans la
<a href="http://emberjs.com/guides/getting-started/using-other-adapters"><em lang="en">Todo</em></a>
d&#8217;exemple des guides. Je l&#8217;utilise également dans la <a href="http://jkneb.github.io/ember-crud">démo</a>.</p></li>
</ul>


<h3 id="sans-utiliser-ember-data">Sans utiliser <em lang="en">Ember-Data</em></h3>

<p>Dans cet article, j&#8217;ai choisi de parler d&#8217;<em lang="en">Ember-Data</em> parce qu&#8217;il est
presque prêt et que c&#8217;est un des trucs les plus cool qui ont lieu dans le monde
JavaScript en ce moment. Vous vous demandez peut être s&#8217;il est possible de s&#8217;en
passer. La réponse est oui ! En fait, utiliser <em lang="en">Ember.js</em> sans
<em lang="en">Ember-Data</em> est assez facile.</p>

<p>Il y a deux façons de le faire.</p>

<p>Vous pouvez utiliser d&#8217;autres bibliothèques pour prendre en charge la
récupération et la persistance de vos modèles.
<a href="https://github.com/ebryn/ember-model">Ember-Model</a>,
<a href="https://github.com/zendesk/ember-resource">Ember-Resource</a>,
<a href="https://github.com/endlessinc/ember-restless">Ember-Restless</a> et, plus
récemment, <a href="http://epf.io/">EPF</a> sont de bonnes alternatives. <em lang="en">EmberWatch</em>
a rédigé un petit articles qui liste les
&ldquo;<a href="http://blog.emberwatch.com/2013/06/19/alternatives-ember-data.html">Alternatives à <em lang="en">Ember-Data</em></a>&rdquo;.</p>

<p>Une autre façon de faire pourrait être de ne pas utiliser de bibliothèque. Dans
ce cas, vous devez implémenter les méthodes de récupération des modèles via
requêtes AJAX. &ldquo;<a href="http://eviltrout.com/2013/03/23/ember-without-data.html"><em lang="en">Ember Without Ember-Data</em></a>&rdquo;, par Robin Ward
(le mec derrière <a href="http://www.discourse.org/">Discourse</a>), est une lecture
intéressante. &ldquo;<a href="http://net.tutsplus.com/tutorials/javascript-ajax/getting-into-ember-js-part-3"><em lang="en">Getting Into Ember.js, Part 3</em></a>&rdquo;, par Rey
Bango sur Nettuts+ traite en particulier des modèles.</p>

<p>Voici par exemple comment définir une méthode statique sur un modèle en
utilisant <code>reopenClass</code> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='javascript'><span class='line'><span class="cm">/* /models/user.js</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="c1">// our own findStuff method inside the User model</span>
</span><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">User</span><span class="p">.</span><span class="nx">reopenClass</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">findStuff</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="c1">// utilise une requête AJAX / Promises classique</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">$</span><span class="p">.</span><span class="nx">getJSON</span><span class="p">(</span><span class="s2">&quot;http://your.api.com/api&quot;</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">users</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>      <span class="c1">// crée de nouveaux Ember Objects et les stocke dans le tableau users</span>
</span><span class='line'>      <span class="nx">response</span><span class="p">.</span><span class="nx">users</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">user</span><span class="p">){</span>
</span><span class='line'>        <span class="nx">users</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span> <span class="nx">App</span><span class="p">.</span><span class="nx">User</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">user</span><span class="p">)</span> <span class="p">);</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>      <span class="c1">// retourne le tableau plein d&#39;Ember Objects</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">users</span><span class="p">;</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></div></figure>


<p>Vous pouvez ensuite utiliser la méthode <code>findStuff</code> dans le <em lang="en">hook</em> <code>model</code>
de nos routes :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='javascript'><span class='line'><span class="cm">/* /routes/usersRoute.js</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">UsersRoute</span> <span class="o">=</span> <span class="nx">Em</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">model</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">App</span><span class="p">.</span><span class="nx">User</span><span class="p">.</span><span class="nx">findStuff</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></div></figure>


<h2 id="quest-ce-que-la-precompilation-de-templates-handlebars">Qu&#8217;est-ce que la précompilation de <em lang="en">templates</em> <em lang="en">Handlebars</em> ?</h2>

<p>Pour faire simple, précompiler les <em lang="en">templates</em> veut dire prendre tous les
<em lang="en">templates</em> et les transposer en chaines de caractères JavaScript puis les
stocker dans <code>Ember.TEMPLATES</code>. Cela veut également dire qu&#8217;il y a un fichier en
plus, contenant la version compilée de tous vos <em lang="en">templates</em>
<em lang="en">Handlebars</em>, à charger dans votre page.</p>

<p>Pour une application assez simple, la précompilation peut être évitée. Si vous
avez cependant trop de <em lang="en">templates</em> <code>&lt;script type="text/x-handlebars"&gt;</code> dans
votre principal fichier HTML, la précompilation vous permettra de mieux
organiser votre code.</p>

<p>De plus, précompiler vos <em lang="en">templates</em> vous permet d&#8217;utiliser la version
<em lang="en">runtime</em> de <em lang="en">Handlebars</em> qui est plus légère que la version
classique. Vous pouvez trouver les deux versions (standard et <em lang="en">runtime</em>)
sur le <a href="http://handlebarsjs.com">site de <em lang="en">Handlebars</em></a>.</p>

<h3 id="conventions-de-nommage-des-templates">Conventions de nommage des <em lang="en">templates</em></h3>

<p>Les <a href="http://emberjs.com/guides/templates/rendering-with-helpers/">partials</a> doivent commencer par un <code>_</code>. Vous devez donc
déclarer un fichier <code>_yourpartial.hbs</code> ou, si vous ne précompilez pas vos
<em lang="en">templates</em>, une balise
<code>&lt;script type="text/x-handlebars" id="_yourpartial"&gt;</code>.</p>

<p>Les <a href="http://emberjs.com/guides/templates/rendering-with-helpers/">composants</a>
doivent commencer par <code>components/</code>. Vous devez donc les stocker dans un dossier
<code>components/</code> ou, si vous ne précompilez pas vos <em lang="en">templates</em>, une
balise <code>&lt;script type="text/x-handlebars" id="components/votre-composant"&gt;</code>. Vous
devez utiliser un tiret comme séparateur dans le nom des composants.</p>

<p>Vous pouvez cependant utiliser une propriété <code>templateName</code> dans les vues pour
spécifier quel <em lang="en">template</em> associer avec une vue. Voici une déclaration de
<em lang="en">template</em> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/x-handlebars&quot;</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;folder/some-template&quot;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nx">Un</span> <span class="nx">template</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/script&gt;</span>
</span></code></pre></div></figure>


<p>Que vous pouvez associer à une vue particulière :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='javascript'><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">SomeView</span> <span class="o">=</span> <span class="nx">Em</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">templateName</span><span class="o">:</span> <span class="s1">&#39;folder/some-template&#39;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></div></figure>


<h3 id="precompiler-avec-grunt">Précompiler avec <em lang="en">Grunt</em></h3>

<p>Si vous utilisez <a href="http://gruntjs.com">Grunt</a>, vous vous en servez probablement pour d&#8217;autres
tâches liées à la construction (concatenation, compression, ce genre de choses).
Dans ce cas, vous devez connaitre le fichier <code>package.json</code> qui vient avec
<em lang="en">Node.js</em> et les modules <em lang="en">Node</em>. Je vais considérer que vous
connaissez déjà Grunt.</p>

<p>Au moment où j&#8217;écris ceci, deux <em lang="en">plugins</em> Grunt sont disponibles pour
transposer vos fichiers <code>.hbs</code> en fichier <code>templates.js</code> :
<a href="https://github.com/yaymukund/grunt-ember-handlebars">grunt-ember-handlebars</a> et
<a href="https://github.com/dgeb/grunt-ember-templates">grunt-ember-templates</a>. Le
deuxième semble un peu plus à jour que le premier.</p>

<p>J&#8217;ai écris un <em lang="en">Gist</em> pour chacun d&#8217;eux, pour vous aider avec la
configuration :</p>

<ul>
<li><a href="https://gist.github.com/jkneb/6072299">Voir le <em lang="en">Gist</em> pour <em lang="en">grunt-ember-handlebars</em></a> ;</li>
<li><a href="https://gist.github.com/jkneb/6599001">Voir le <em lang="en">Gist</em> pour <em lang="en">grunt-ember-templates</em></a>.</li>
</ul>


<p>Une fois configurés, vous devriez être à même de lancer <code>grunt</code> en ligne de
commande et cela devrait produire le fichier <code>templates.js</code>. Chargez-le dans
<code>index.html</code> (après <code>ember.js</code>) puis rendez-vous dans la console du navigateur
et tapez <code>Em.TEMPLATES</code>. Vous devriez voir un <em lang="en">hash</em> contenant tous les
<em lang="en">templates</em> compilés.</p>

<p>Notez qu&#8217;<em lang="en">Ember.js</em> n&#8217;a pas besoin du chemin complet vers un
<em lang="en">template</em> ni l&#8217;extension du fichier. En d&#8217;autres termes, le nom du
<em lang="en">template</em> devrait être <code>users/create</code> et non
<code>/assets/js/templates/users/create.hbs</code>.</p>

<p>Les deux <em lang="en">plugins</em> fournissent des options pour gérer cela. Référez-vous
aux guides respectifs ou jetez un oeil aux <em lang="en">Gists</em> ci-dessus. Vous devriez
obtenir quelque chose dans ce genre :</p>

<p><img src="http://vfsvp.fr/images/ember/console-templates.png" alt="console-templates" /></p>

<p>Exactement ce qu&#8217;il nous faut pour que tout marche correctement. C&#8217;est tout ce
dont vous avez besoin pour précompiler avec <em lang="en">Grunt</em>.</p>

<h3 id="precompiler-avec-rails">Précompiler avec <em lang="en">Rails</em></h3>

<p>Précompiler avec <em lang="en">Rails</em> est la façon la plus simple de faire. La
<a href="https://github.com/emberjs/ember-rails"><em lang="en">gem</em> Ember-Rails</a> se charge d&#8217;à
peu près tout. Il fonctionne <em>presque</em> <em lang="en">out-of-the-box</em>. Suivez
attentivement les instructions d&#8217;installation du <code>readme</code> sur GitHub et tout
devrait bien se passer. Selon moi, <em lang="en">Rails</em> a la meilleure intégration
<em lang="en">Ember</em>/<em lang="en">Handlebars</em> pour le moment.</p>

<h2 id="outils-astuces-et-ressources">Outils, astuces et ressources</h2>

<h3 id="lextension-chrome-ember">L&#8217;Extension Chrome <em lang="en">Ember</em></h3>

<p>L&#8217;<a href="https://chrome.google.com/webstore/detail/ember-inspector/bmdblncegkenkacieihfhpjfppoconhi">Extension <em lang="en">Ember</em></a> pour Chrome est très pratique. Une
fois installée, un onglet &ldquo;<em lang="en">Ember</em>&rdquo; apparait près de l&#8217;onglet &ldquo;Console&rdquo;.
Vous pouvez ensuite naviguer à travers vos contrôleurs, routes et vues. L&#8217;onglet
&ldquo;<em lang="en">Data</em>&rdquo; vous permettra d&#8217;explorer vos enregistrements très simplement si
vous utilisez <em lang="en">Ember-Data</em>.</p>

<p><a href="http://vfsvp.fr/images/ember/console-ember-extension1.png"><img src="http://vfsvp.fr/images/ember/console-ember-extension1-300x156.png" alt="console-ember-extension" /></a><br />
<em>Exploring your app’s objects has never been so easy.</em></p>

<h3 id="ember-app-kit"><em lang="en">Ember App Kit</em></h3>

<p>Le <a href="http://iamstef.net/ember-app-kit/">Ember App Kit</a>, maintenu par l&#8217;équipe
<em lang="en">Ember</em>, vous permet de créer très rapidement une application <em lang="en">Ember</em>.
Il contient <a href="http://gruntjs.com">Grunt</a> pour compiler les <em lang="en">assets</em>, le lanceur de tests
<a href="http://karma-runner.github.io/0.10/index.html">Kharma</a>,
<a href="http://bower.io/">Bower</a> et le support des
<a href="http://wiki.ecmascript.org/doku.php?id=harmony:modules">modules ES6</a>.</p>

<h3 id="ember-tools"><em lang="en">Ember Tools</em></h3>

<p>Le projet <em lang="en">GitHub</em> <a href="https://github.com/rpflorence/ember-tools">Ember Tools</a>
est un outils en ligne de commande pour créer des applications <em lang="en">Ember</em>.
Prenez une minute pour regarder le <em lang="en">GIF</em> animé dans le <code>readme</code> et vous
comprendrez pourquoi c&#8217;est si cool.</p>

<h3 id="developpement-et-version-minifie">Développement et version minifié</h3>

<p>Utilisez toujours le <em lang="en">development build</em> durant le développement, il
contient beaucoup de commentaires, de tests unitaires et un tas de messages
d&#8217;erreur utiles qui ont été supprimés dans la version minifié. Vous trouverez un
lien vers chaque version sur le <a href="http://emberjs.com/builds">site d&#8217;<em lang="en">Ember.js</em></a>.</p>

<h3 id="astuces-pour-le-debug">Astuces pour le <em lang="en">debug</em></h3>

<p><em lang="en">Ember.js</em> fournit généralement des erreur humainement lisibles dans la
console du navigateur (si vous utilisez bien la version de développement). Il
peut être cependant difficile de deviner d&#8217;où vient l&#8217;erreur. Quelques méthodes
bien pratiques sont <code>{{log something}}</code> et <code>{{controller}}</code> qui affiche le
<code>controller</code> courant pour le <em lang="en">template</em> dans lequel nous appelons le
<em lang="en">helper</em>.</p>

<p>Ou vous pouvez afficher chaque transition du <code>Router</code> comme ceci :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='javascript'><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nx">App</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Application</span><span class="p">.</span><span class="nx">create</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">LOG_TRANSITIONS</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></div></figure>


<p>Les guides contiennet une
<a href="http://emberjs.com/guides/understanding-ember/debugging">liste exhaustive</a> de
ces petites methodes bien pratiques.</p>

<h3 id="commenter-correctement-dans-handlebars">Commenter correctement dans <em lang="en">Handlebars</em></h3>

<p>Celui-là peut être frustrant. Ne commentez <strong>jamais</strong> une balise
<em lang="en">Handlebars</em> avec un commentaire HTML classique. Si vous le faites, vous
risquez de complètement casser l&#8217;application sans même savoir pourquoi.</p>

<pre><code>// ne faites jamais ça
&lt;!-- {{foo}} --&gt;

// faites plutôt ça
{{!foo}}
</code></pre>

<h2 id="conclusion">Conclusion</h2>

<p>J&#8217;espère que ce long article vous a permis de mieux comprendre cet excellent
<em lang="en">framework</em>. Mais pour tout vous dire, on a à peine vu la partie émergée de
l&#8217;iceberg. Il y a tellement plus à voir. Il y a par exemple le <code>Router</code> et sa
nature asynchrone qui permet de gérer les modèles avec des <em lang="en">promises</em> (ce
qui permet de créer très facilement un <em lang="en">spinner</em> de chargement). Il y a
également le modèle objet, avec son héritage de classes ou d&#8217;instances, ou
encore les <em lang="en">mixins</em>, <em lang="en">observers</em>, filtres, macros, <code>collectionViews</code>
et composants, ou encore la gestion de dépendances entre contrôleurs et le
paquet pour les tests. Et bien plus encore !</p>

<p>Je ne pouvais bien sûr pas vous parler de tout ça. Heureusement, les guides
vous aideront sur tous ces sujets.</p>

<p><em lang="en">Happy Ember.js coding, folks!</em></p>

<h3 id="ressources">Ressources</h3>

<ul>
<li><a href="http://emberjs.com/guides/">Guides <em lang="en">Ember.js</em></a><br />
Le meilleur endroit pour apprendre <em lang="en">Ember.js</em></li>
<li><a href="http://emberjs.com/guides/cookbook/">Ember.js Cookbook</a><br />
Une nouvelle section des guides qui résout plein de problèmes spécifiques</li>
<li><a href="http://emberwatch.com"><em lang="en">EmberWatch</em></a><br />
Agrégation de toutes les ressources importantes</li>
<li><a href="http://emberweekly.com/issues.html"><em lang="en">Ember Weekly</em></a><br />
Parfait pour rester à jour</li>
<li><a href="http://discuss.emberjs.com">Forum de discussion <em lang="en">Ember.js</em></a><br />
C&#8217;est ici que les discussions prennent place (et c&#8217;est fait avec <em lang="en">Ember</em>)</li>
</ul>


<h3 id="remerciements">Remerciements</h3>

<p>Un immense merci à <a href="https://twitter.com/MatBreton">Mathieu Breton</a> et
<a href="https://twitter.com/ficastelli">Philippe Castelli</a> qui m&#8217;ont tous deux transmis
tout ce qu&#8217;ils savaient sur <em lang="en">Ember.js</em> durant mon apprentissage. Et un
grand merci à <a href="https://twitter.com/tomdale">Tom Dale</a>, qui m&#8217;a aidé à la
relecture de ce bien long article.</p>

<script src="http://static.jsbin.com/js/embed.js"></script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Guide de migration vers Capistrano 3]]></title>
    <link href="http://vfsvp.fr/article/guide-de-migration-vers-capistrano-3"/>
    <updated>2014-01-13T11:05:00+01:00</updated>
    <id>http://vfsvp.fr/article/guide-de-migration-vers-capistrano-3</id>
    <content type="html"><![CDATA[<p>Source: <a href="https://semaphoreapp.com/blog/2013/11/26/capistrano-3-upgrade-guide.html">Capistrano 3 Upgrade Guide de Darko Fabijan sur le blog de Semaphore </a></p>

<p>Nous avons récemment reçu des demandes de support pour Capistrano 3. Pour
fournir un service de support de qualité, il faut connaitre le sujet, je me suis
donc lancé dans la quête de migrer scripts de déploiement de Capistrano 2 à
Capistrano 3. Comme toujours, cela a pris un peu plus de temps que prévu mais au
final le code est plus propre.</p>

<p>Je dois dire que j&#8217;ai eu un flashback remontant à deux ans, lorsque je mettais
en place Capistrano pour la première fois : la documentation est incomplète
et il faut jongler entre le
<a href="https://github.com/capistrano/capistrano"><em lang="en">readme</em></a>,
le <a href="https://github.com/capistrano/capistrano/wiki">wiki</a> et
<a href="http://www.capistranorb.com/">la page d&#8217;accueil officielle</a>. Mais c&#8217;est un
projet open-source et les participations pour améliorer cela sont les
bienvenues.</p>

<p>Je vais tenter de vous faciliter la migration en vous montrant notre nouvelle
configuration en parallèle de l&#8217;ancienne, étape par étape.</p>

<!-- more -->


<h2 id="mettre-en-place-la-nouvelle-configuration">Mettre en place la nouvelle configuration</h2>

<h3 id="gemfile">Gemfile</h3>

<p>La première étape est d&#8217;installer de nouvelles gems. Capistrano 2 ne supportait
pas les configurations <em lang="en">multistage</em>, il fallait pour cela
utiliser la gem <code>capistrano-ext</code>. Capistrano 3 supporte le
<em lang="en">multistage</em> en standard. Il est indépendant de tout <em lang="en">framework</em>,
vous devez donc utiliser <code>capistrano-rails</code> si vous comptez déployer une
application <em lang="en">Rails</em>. Suivez l&#8217;exemple ci-dessous pour mettre votre
<em lang="en">Gemfile</em> à jour, lancez ensuite <code>bundle install</code> et vous êtes prêt pour la
migration.</p>

<p>Capistrano 2 :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="n">group</span> <span class="ss">:development</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s2">&quot;capistrano&quot;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s2">&quot;capistrano-ext&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></div></figure>


<p>Capistrano 3 :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="n">group</span> <span class="ss">:development</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s2">&quot;capistrano-rails&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></div></figure>


<h3 id="ajouter-capistrano-3-a-votre-projet">Ajouter Capistrano 3 à votre projet</h3>

<p>Comme le conseille
<a href="http://www.capistranorb.com/documentation/upgrading/">le guide officiel de mise à jour</a>,
il est préférable de copier les anciens fichiers Capistrano dans un endroit sûr,
au cas où, et d&#8217;ajouter les nouveaux fichiers générés à la main. Voici une
astuce pour le faire :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="n">mkdir</span> <span class="n">old_cap</span>
</span><span class='line'><span class="n">mv</span> <span class="no">Capfile</span> <span class="n">old_cap</span>
</span><span class='line'><span class="n">mv</span> <span class="n">config</span><span class="o">/</span><span class="n">deploy</span><span class="o">.</span><span class="n">rb</span> <span class="n">old_cap</span>
</span><span class='line'><span class="n">mv</span> <span class="n">config</span><span class="o">/</span><span class="n">deploy</span><span class="o">/</span> <span class="n">old_cap</span>
</span></code></pre></div></figure>


<p>Une fois cela fait, vous êtes prêt à mettre le nouveau Capistrano en place pour
votre projet :</p>

<pre><code>bundle exec cap install
</code></pre>

<h2 id="capfile">Capfile</h2>

<p>Parmi les fichiers fraichement générés, vous devriez trouver le nouveau
<em lang="en">Capfile</em>. Ci-dessous, l&#8217;ancienne version de notre <em lang="en">Capfile</em> suivie
de la nouvelle :</p>

<p>Capistrano 2 :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="nb">load</span> <span class="s2">&quot;deploy&quot;</span>
</span><span class='line'><span class="nb">load</span> <span class="s2">&quot;deploy/assets&quot;</span>
</span><span class='line'><span class="no">Dir</span><span class="o">[</span><span class="s2">&quot;vendor/gems/*/recipes/*.rb&quot;</span><span class="p">,</span><span class="s2">&quot;vendor/plugins/*/recipes/*.rb&quot;</span><span class="o">].</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">plugin</span><span class="o">|</span> <span class="nb">load</span><span class="p">(</span><span class="n">plugin</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="nb">load</span> <span class="s2">&quot;config/deploy&quot;</span>
</span></code></pre></div></figure>


<p>Capistrano 3 :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s2">&quot;capistrano/setup&quot;</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;capistrano/deploy&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;capistrano/bundler&quot;</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;capistrano/rails/assets&quot;</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;capistrano/rails/migrations&quot;</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;whenever/capistrano&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="no">Dir</span><span class="o">.</span><span class="n">glob</span><span class="p">(</span><span class="s2">&quot;lib/capistrano/tasks/*.cap&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">r</span><span class="o">|</span> <span class="n">import</span> <span class="n">r</span> <span class="p">}</span>
</span></code></pre></div></figure>


<p>Votre nouveau <em lang="en">Capfile</em> va contenir deux lignes commentées à propos du
support pour <code>rvm</code> et <code>rbenv</code>. Nous n&#8217;utilisons ni l&#8217;un ni l&#8217;autre pour gérer
Ruby sur nos serveurs je ne peux pas donc vous en dire long sur le sujet.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s2">&quot;capistrano/rvm&quot;</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;capistrano/rbenv&quot;</span>
</span></code></pre></div></figure>


<h2 id="configuration-multistage">Configuration multistage</h2>

<p>Comme vous pouvez le voir ci-dessous, la configurations des <em lang="en">stages</em> ne
change pas vraiment. Il y a cependant une chose à laquelle vous devez prêter
particulièrement attention. La façon de signifier à Capistrano une révision à
déployer a changé. Si vous faites du déploiement continu avec Capistrano, vous
avez probablement déjà vu la ligne suivante :</p>

<pre><code>bundle exec cap -S revision=$REVISION production deploy
</code></pre>

<p><code>REVISION</code> est une variable d&#8217;environnement que Semaphore exporte durant le
déploiement et Capistrano 2 l&#8217;utilisait comme paramètre. Avec Capistrano 3, cela
n&#8217;est plus possible et vous devez donner à la variable <code>branch</code> la révision ou
la branche que vous souhaitez déployer. Il était déjà possible de spécifier une
branche en configuration :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="n">set</span> <span class="ss">:branch</span><span class="p">,</span> <span class="no">ENV</span><span class="o">[</span><span class="s2">&quot;BRANCH_NAME&quot;</span><span class="o">]</span> <span class="o">||</span> <span class="s2">&quot;master&quot;</span>
</span></code></pre></div></figure>


<p>Il nous suffit donc d&#8217;ajouter <code>ENV["REVISION"]</code> à la liste.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="n">set</span> <span class="ss">:branch</span><span class="p">,</span> <span class="no">ENV</span><span class="o">[</span><span class="s2">&quot;REVISION&quot;</span><span class="o">]</span> <span class="o">||</span> <span class="no">ENV</span><span class="o">[</span><span class="s2">&quot;BRANCH_NAME&quot;</span><span class="o">]</span> <span class="o">||</span> <span class="s2">&quot;master&quot;</span>
</span></code></pre></div></figure>


<p>Cela fait partie des choses non documentées et il faut fouiller les sources ou
poser la question pour le savoir. L&#8217;un dans l&#8217;autre, le changement est assez
simple.</p>

<p>Le fichier suivant est notre <code>config/deploy/production.rb</code>.</p>

<p>Capistrano 2 :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="n">server</span> <span class="s2">&quot;server1.example.com&quot;</span><span class="p">,</span> <span class="ss">:app</span><span class="p">,</span> <span class="ss">:web</span><span class="p">,</span> <span class="ss">:db</span><span class="p">,</span> <span class="ss">:primary</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">:jobs</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'><span class="n">server</span> <span class="s2">&quot;server2.example.com&quot;</span><span class="p">,</span> <span class="ss">:app</span><span class="p">,</span> <span class="ss">:web</span><span class="p">,</span> <span class="ss">:jobs</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'><span class="n">set</span> <span class="ss">:branch</span><span class="p">,</span> <span class="no">ENV</span><span class="o">[</span><span class="s2">&quot;BRANCH_NAME&quot;</span><span class="o">]</span> <span class="o">||</span> <span class="s2">&quot;master&quot;</span>
</span></code></pre></div></figure>


<p>Capistrano 3 :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="n">set</span> <span class="ss">:stage</span><span class="p">,</span> <span class="ss">:production</span>
</span><span class='line'>
</span><span class='line'><span class="n">server</span> <span class="s2">&quot;server1.example.com&quot;</span><span class="p">,</span> <span class="ss">user</span><span class="p">:</span> <span class="s2">&quot;deploy_user&quot;</span><span class="p">,</span> <span class="ss">roles</span><span class="p">:</span> <span class="sx">%w{web app db}</span>
</span><span class='line'><span class="n">server</span> <span class="s2">&quot;server2.example.com&quot;</span><span class="p">,</span> <span class="ss">user</span><span class="p">:</span> <span class="s2">&quot;deploy_user&quot;</span><span class="p">,</span> <span class="ss">roles</span><span class="p">:</span> <span class="sx">%w{web app}</span>
</span><span class='line'>
</span><span class='line'><span class="n">set</span> <span class="ss">:branch</span><span class="p">,</span> <span class="no">ENV</span><span class="o">[</span><span class="s2">&quot;REVISION&quot;</span><span class="o">]</span> <span class="o">||</span> <span class="no">ENV</span><span class="o">[</span><span class="s2">&quot;BRANCH_NAME&quot;</span><span class="o">]</span> <span class="o">||</span> <span class="s2">&quot;master&quot;</span>
</span></code></pre></div></figure>


<h2 id="configuration-principale-config-slash-deploy-dot-rb">Configuration principale - <code>config/deploy.rb</code></h2>

<p>C&#8217;est ici que les plus gros changements auront lieu. Voici ce à quoi il faut
faire attention :</p>

<ol>
<li>Vous n&#8217;avez plus besoin d&#8217;appeler <code>capistrano/ext/multistage</code> ou
<code>bundler/capistrano</code>. Le <em lang="en">multistage</em> est supporté en standard et le
support de Bundler est fait dans le fichier Capfile.</li>
<li>Il n&#8217;est pas nécessaire de lister les <em lang="en">stages</em> disponible ou celui par
défaut.</li>
<li>La variable pour régler l&#8217;url de dépôt source a changé de <code>repository</code> à
<code>repo_url</code>.</li>
<li><code>deploy_via :remote_cache</code> n&#8217;est plus nécessaire. La façon dont Capistrano
gère les dépôts a beaucoup changé, il maintient maintenant un mirroir du
dépôt sur votre serveur.</li>
<li>L&#8217;option PTY est activée par défaut.</li>
<li><code>ssh_options</code> a un peu changé je crois mais les réglages de base sont à peu
près les mêmes.</li>
<li>Capistrano prend maintenant en charge les liens symboliques dont vous avez
besoin. Il vous suffit de lui dire de parcourir <code>linked_files</code> and
<code>linked_dirs</code>.</li>
<li>Si vous n&#8217;utilisez ni <code>rvm</code> ni <code>rbenv</code>, vous devez surcharger les commandes
<code>rake</code> et <code>rails</code> (voyez le fichier deploy.rb de Capistrano 3).</li>
</ol>


<p>L&#8217;écriture de <em lang="en">tasks</em> a également changé et il est nécessaire de fouiller
la documentation pour écrire ce que vous voulez. La bibliothèque utilisée en
dessous est <a href="https://github.com/capistrano/sshkit">SSHKit</a> qui semble bien
sympathique.</p>

<p><strong>Astuce :</strong> avec Capistrano 2 vous pouviez écrire <code>var_name</code> et obtenir sa
valeur. Avec la nouvelle version, vous devez toujours utiliser
<code>fetch(:var_name)</code>. Il m&#8217;a fallut un certain temps pour le comprendre alors que
je reprenais une <em lang="en">task</em> que l&#8217;on utilise pour gérer nos <em lang="en">workers</em>.</p>

<p>Capistrano 2 :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s2">&quot;capistrano/ext/multistage&quot;</span> <span class="c1">#1</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;bundler/capistrano&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">set</span> <span class="ss">:application</span><span class="p">,</span> <span class="s2">&quot;webapp&quot;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:stages</span><span class="p">,</span> <span class="sx">%w(production staging)</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:default_stage</span><span class="p">,</span> <span class="s2">&quot;staging&quot;</span> <span class="c1">#2</span>
</span><span class='line'>
</span><span class='line'><span class="n">set</span> <span class="ss">:scm</span><span class="p">,</span> <span class="ss">:git</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:repository</span><span class="p">,</span>  <span class="s2">&quot;git@github.com:example/webapp.git&quot;</span> <span class="c1">#3</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:deploy_to</span><span class="p">,</span> <span class="s2">&quot;/home/deploy_user/webapp&quot;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:deploy_via</span><span class="p">,</span> <span class="ss">:remote_cache</span> <span class="c1">#4</span>
</span><span class='line'>
</span><span class='line'><span class="n">default_run_options</span><span class="o">[</span><span class="ss">:pty</span><span class="o">]</span> <span class="o">=</span> <span class="kp">true</span> <span class="c1">#5</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:user</span><span class="p">,</span> <span class="s2">&quot;deploy_user&quot;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:use_sudo</span><span class="p">,</span> <span class="kp">false</span>
</span><span class='line'>
</span><span class='line'><span class="n">ssh_options</span><span class="o">[</span><span class="ss">:forward_agent</span><span class="o">]</span> <span class="o">=</span> <span class="kp">true</span> <span class="c1">#6</span>
</span><span class='line'><span class="n">ssh_options</span><span class="o">[</span><span class="ss">:port</span><span class="o">]</span> <span class="o">=</span> <span class="mi">3456</span>
</span><span class='line'>
</span><span class='line'><span class="n">set</span> <span class="ss">:keep_releases</span><span class="p">,</span> <span class="mi">20</span>
</span><span class='line'>
</span><span class='line'><span class="n">namespace</span> <span class="ss">:deploy</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">desc</span> <span class="s2">&quot;Restart application&quot;</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:restart</span><span class="p">,</span> <span class="ss">:roles</span> <span class="o">=&gt;</span> <span class="ss">:app</span><span class="p">,</span> <span class="ss">:except</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:no_release</span> <span class="o">=&gt;</span> <span class="kp">true</span> <span class="p">}</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">run</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">try_sudo</span><span class="si">}</span><span class="s2"> touch </span><span class="si">#{</span><span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">current_path</span><span class="p">,</span><span class="s1">&#39;tmp&#39;</span><span class="p">,</span><span class="s1">&#39;restart.txt&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">desc</span> <span class="s2">&quot;Prepare our symlinks&quot;</span> <span class="c1">#7</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:post_symlink</span><span class="p">,</span> <span class="ss">:roles</span> <span class="o">=&gt;</span> <span class="ss">:app</span><span class="p">,</span> <span class="ss">:except</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:no_release</span> <span class="o">=&gt;</span> <span class="kp">true</span> <span class="p">}</span> <span class="k">do</span>
</span><span class='line'>    <span class="o">[</span><span class="s2">&quot;config/database.yml&quot;</span><span class="p">,</span> <span class="s2">&quot;config/config.yml&quot;</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">path</span><span class="o">|</span>
</span><span class='line'>      <span class="n">run</span> <span class="s2">&quot;ln -fs </span><span class="si">#{</span><span class="n">shared_path</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">path</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">release_path</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">path</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">after</span>  <span class="s2">&quot;deploy&quot;</span><span class="p">,</span>                   <span class="s2">&quot;deploy:post_symlink&quot;</span>
</span><span class='line'><span class="n">after</span>  <span class="s2">&quot;deploy:restart&quot;</span><span class="p">,</span>           <span class="s2">&quot;deploy:cleanup&quot;</span>
</span><span class='line'><span class="n">before</span> <span class="s2">&quot;deploy:assets:precompile&quot;</span><span class="p">,</span> <span class="s2">&quot;deploy:post_symlink&quot;</span>
</span></code></pre></div></figure>


<p>Capistrano 3 :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="n">set</span> <span class="ss">:application</span><span class="p">,</span> <span class="s2">&quot;webapp&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">set</span> <span class="ss">:scm</span><span class="p">,</span> <span class="ss">:git</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:repo_url</span><span class="p">,</span>  <span class="s2">&quot;git@github.com:example/webapp.git&quot;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:deploy_to</span><span class="p">,</span> <span class="s2">&quot;/home/deploy_user/webapp&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">set</span> <span class="ss">:ssh_options</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">forward_agent</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">port</span><span class="p">:</span> <span class="mi">3456</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">set</span> <span class="ss">:log_level</span><span class="p">,</span> <span class="ss">:info</span>
</span><span class='line'>
</span><span class='line'><span class="n">set</span> <span class="ss">:linked_files</span><span class="p">,</span> <span class="sx">%w{config/database.yml config/config.yml}</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:linked_dirs</span><span class="p">,</span> <span class="sx">%w{bin log tmp vendor/bundle public/system}</span>
</span><span class='line'>
</span><span class='line'><span class="no">SSHKit</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">command_map</span><span class="o">[</span><span class="ss">:rake</span><span class="o">]</span>  <span class="o">=</span> <span class="s2">&quot;bundle exec rake&quot;</span> <span class="c1">#8</span>
</span><span class='line'><span class="no">SSHKit</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">command_map</span><span class="o">[</span><span class="ss">:rails</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;bundle exec rails&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">set</span> <span class="ss">:keep_releases</span><span class="p">,</span> <span class="mi">20</span>
</span><span class='line'>
</span><span class='line'><span class="n">namespace</span> <span class="ss">:deploy</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">desc</span> <span class="s2">&quot;Restart application&quot;</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:restart</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">on</span> <span class="n">roles</span><span class="p">(</span><span class="ss">:app</span><span class="p">),</span> <span class="k">in</span><span class="p">:</span> <span class="ss">:sequence</span><span class="p">,</span> <span class="ss">wait</span><span class="p">:</span> <span class="mi">5</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">execute</span> <span class="ss">:touch</span><span class="p">,</span> <span class="n">release_path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;tmp/restart.txt&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">after</span> <span class="ss">:finishing</span><span class="p">,</span> <span class="s2">&quot;deploy:cleanup&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></div></figure>


<h2 id="conclusion">Conclusion</h2>

<p>Le code que vous obtenez au final et plus propre et Capistrano 3/SSHKit semble
un mélange puissant. Quoi qu&#8217;il en soit, certaines bibliothèques comme
<code>whenever</code> et <code>bugsnag</code> ne supportent pas encore Capistrano 3, vous devrez donc
écrire leurs règles vous-même.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apprendre Angular en un jour, le guide ultime]]></title>
    <link href="http://vfsvp.fr/article/apprendre-angular-en-un-jour-le-guide-ultime"/>
    <updated>2013-11-02T00:00:00+01:00</updated>
    <id>http://vfsvp.fr/article/apprendre-angular-en-un-jour-le-guide-ultime</id>
    <content type="html"><![CDATA[<p>Source: <a href="http://toddmotto.com/ultimate-guide-to-learning-angular-js-in-one-day/">Ultimate guide to learning AngularJS in one day par Todd Motto</a></p>

<h2 id="quest-ce-quangularjs">Qu&#8217;est-ce qu&#8217;AngularJS ?</h2>

<p>Angular est un framework MVC/MVVM côté client, développé en JavaScript, ce qui
est obligatoire pour faire une application moderne à page unique (ou même un
site internet). C&#8217;est un grand bond vers le futur de HTML et vers ce que HTML5
apporte. C&#8217;est également un grand bol d&#8217;air frais dans le monde des applications
web modernes. Cet article est une vue de bout en bout, issue de mon expérience,
et contient des conseils et astuces glanés au travers de mon utilisation
d&#8217;Angular.</p>

<!-- more -->


<h2 id="terminologie">Terminologie</h2>

<p>Angular a une courbe d&#8217;apprentissage assez courte qui consiste principalement à
appréhender la terminologie et la &ldquo;pensée MVC&rdquo;. MVC signifie
Modèle-Vue-Contrôleur. Survolons un peu les différents composants et voyons un
peu la terminologie en jetant un oeil sur les APIs essentielles d&#8217;Angular.</p>

<h3 id="mvc">MVC</h3>

<p>Vous avez probablement déjà entendu parler de MVC. Utilisé dans de nombreux
langages de programmation pour apporter une structure/architecture à une
application. En voici les composants :</p>

<dl>
<dt>Modèle</dt>
<dd>   structure donnée représentant une entité de l&#8217;application, généralement
transmise en JSON. Pour bien démarrer avec Angular, quelques notions de JSON
sont nécessaires, cela vous permettra de faire communiquer votre serveur et vos
vues. Un groupe d&#8217;<em>id</em> d&#8217;utilisateurs pourrait par exemple ressembler à ceci :</dd>
</dl>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;users&quot;</span> <span class="p">:</span> <span class="p">[{</span>
</span><span class='line'>    <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;Joe Bloggs&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;id&quot;</span><span class="p">:</span> <span class="s2">&quot;82047392&quot;</span>
</span><span class='line'>  <span class="p">},{</span>
</span><span class='line'>    <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;John Doe&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;id&quot;</span><span class="p">:</span> <span class="s2">&quot;65198013&quot;</span>
</span><span class='line'>  <span class="p">}]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></div></figure>


<p>Vous pouvez accéder à cette information de deux façons. En passant par une XHR
(XMLHttp Request), vous connaissez sûrement <code>$.ajax</code> en jQuery, Angular
l&#8217;encapsule dans <code>$http</code>. L&#8217;autre méthode est de l&#8217;écrire dans le code de la
page pour qu&#8217;elle soit chargée pendant l&#8217;interprétation (depuis un datastore ou
une base de données). Une fois que vous avez accès à l&#8217;information, vous pouvez
mettre à jour votre modèle et le renvoyer.</p>

<dl>
<dt>Vue</dt>
<dd>   La vue est simple, c&#8217;est votre HTML et/ou la sortie générée. Lorsque vous
utilisez un framework MVC, vous utilisez les données issues du Modèle pour
mettre votre Vue à jour et afficher les bonnes informations dans votre HTML.</dd>
<dt>Contrôleur</dt>
<dd>   Comme son nom l&#8217;indique, cette couche contrôle des choses. Mais quelles
choses ? Des données. Les contrôleurs permettent à votre serveur de communiquer
avec la Vue, c&#8217;est le messager, vous pouvez donc mettre vos données à jour à la
volée via ces canaux de communication entre le serveur et le client.</dd>
</dl>

<h3 id="mettre-en-place-un-projet-angularjs-lessentiel">Mettre en place un projet AngularJS (l&#8217;essentiel)</h3>

<p>Tout d&#8217;abord, nous devons mettre en place le minimum vital d&#8217;un projet Angular.
Nous devons mettre en place certaines choses avant de commencer. Cela revient,
en général, à ajouter une déclaration <code>ng-app</code>, écrire un contrôleur pour parler
à la vue puis l&#8217;inclusion d&#8217;Angular et un attachement au DOM. Voici
l&#8217;essentiel :</p>

<p>Un peu de HTML avec les déclarations <code>ng-*</code> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">ng-app=</span><span class="s">&quot;myApp&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">ng-controller=</span><span class="s">&quot;MainCtrl&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- logique du contrôleur --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></div></figure>


<p>Un module Angular et un contrôleur :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">myApp</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;myApp&#39;</span><span class="p">,</span> <span class="p">[]);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">myApp</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;MainCtrl&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;$scope&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// Magie du contrôleur</span>
</span><span class='line'><span class="p">}]);</span>
</span></code></pre></div></figure>


<p>Avant de nous lancer, nous devons créer un module Angular dans lequel nous
allons placer toute notre logique. Il existe plusieurs manières de déclarer des
modules et vous pouvez chaîner toute votre logique (je n&#8217;aime pas cette
méthode) :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='javascript'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;myApp&#39;</span><span class="p">,</span> <span class="p">[])</span>
</span><span class='line'><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;MainCtrl&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;$scope&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{...}])</span>
</span><span class='line'><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;NavCtrl&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;$scope&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{...}])</span>
</span><span class='line'><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;UserCtrl&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;$scope&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{...}]);</span>
</span></code></pre></div></figure>


<p>La mise en place un module global s&#8217;est révélée être la meilleure pratique sur
les projets Angular sur lesquels j&#8217;ai travaillé. L&#8217;absence de point-virgules ou
les fermetures accidentelles de chaîne se sont montrées contre productives et
on souvent généré des erreurs de compilation. Préférez cette approche :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">myApp</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;myApp&#39;</span><span class="p">,</span> <span class="p">[]);</span>
</span><span class='line'><span class="nx">myApp</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;MainCtrl&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;$scope&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{...}]);</span>
</span><span class='line'><span class="nx">myApp</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;NavCtrl&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;$scope&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{...}]);</span>
</span><span class='line'><span class="nx">myApp</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;UserCtrl&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;$scope&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{...}]);</span>
</span></code></pre></div></figure>


<p>Chaque nouveau fichier que je crée utilise le namespace <code>myApp</code> ce qui le
restreint à l&#8217;application. Oui, je crée un nouveau fichier pour chaque
Contrôleur, Directive, Factory ou tout autre élément (vous me remercierez plus
tard). Joignez les dans un fichier à la volée en utilisant Grunt ou un outil
similaire.</p>

<h3 id="controleurs">Contrôleurs</h3>

<p>Maintenant que vous avez une idée de ce qu&#8217;est le MVC et que tout est en place,
jetons un oeil à la façon dont Angular implémente les contrôleurs.</p>

<p>Reprenons l&#8217;exemple vu plus haut et regardons pas à pas comment pousser des
données dans le DOM depuis un contrôleur. Angular utilise un système de template
qui ressemble à ceci pour parler à votre HTML : <code>{{ handlebars }}</code>. Idéalement, votre HTML ne contient aucun texte ou valeur en dur, cela
permet de tirer un maximum d&#8217;Angular. Voici un exemple dans lequel nous poussons
une chaîne de caractères dans le DOM :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">ng-app=</span><span class="s">&quot;myApp&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">ng-controller=</span><span class="s">&quot;MainCtrl&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    {{ text }}
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">myApp</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;myApp&#39;</span><span class="p">,</span> <span class="p">[]);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">myApp</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;MainCtrl&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;$scope&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">text</span> <span class="o">=</span> <span class="s1">&#39;Hello, Angular fanatic.&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">}]);</span>
</span></code></pre></div></figure>


<p>Voici le Résultat :</p>

<iframe width="100%" height="300" src="http://jsfiddle.net/toddmotto/mN7QB/embedded/result,js,html" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<p>Le concept clé ici est <code>$scope</code> que vous passez à toutes vos fonctions au sein
d&#8217;un contrôleur. <code>$scope</code> fait référence à l&#8217;élément courant (ou zone courante)
dans le DOM (ce qui est différent de <code>this</code>). Il encapsule intelligemment les
données et la logique pour que celles-ci soit limitées à l&#8217;élément. Cela apporte
un notion de publique/privé à JavaScript, ce qui est fantastique.</p>

<p>Le concept de <code>$scope</code> peut faire peur de prime abord mais c&#8217;est votre canal de
communication avec le DOM depuis le serveur (ou depuis les données statiques si
vous en avez). La démo donne une petite idée de comment &ldquo;pousser&rdquo; des données
dans le DOM.</p>

<p>Regardons maintenant une structure de données plus représentative que nous avons
hypothétiquement récupérée depuis le serveur pour afficher les détails de
l&#8217;utilisateur. À partir de maintenant, j&#8217;utiliserai des données statiques, je
vous montrerai plus tard comment récupérer dynamiquement des données JSON.</p>

<p>Commençons par un peu de JavaScript :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">myApp</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;myApp&#39;</span><span class="p">,</span> <span class="p">[]);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">myApp</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;UserCtrl&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;$scope&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Créons un namespace pour les détails de l&#39;utilisateur</span>
</span><span class='line'>    <span class="c1">// Également utile pour une aide visuelle dans le DOM</span>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">user</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">details</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;username&quot;</span><span class="o">:</span> <span class="s2">&quot;Todd Motto&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;id&quot;</span><span class="o">:</span> <span class="s2">&quot;89101112&quot;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="p">}]);</span>
</span></code></pre></div></figure>


<p>Poussons ces données vers le DOM pour les afficher :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">ng-app=</span><span class="s">&quot;myApp&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">ng-controller=</span><span class="s">&quot;UserCtrl&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">&quot;username&quot;</span><span class="nt">&gt;</span>Welcome, {{ user.details.username }}<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>    <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">&quot;id&quot;</span><span class="nt">&gt;</span>User ID: {{ user.details.id }}<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></div></figure>


<p>Résultat:</p>

<iframe width="100%" height="300" src="http://jsfiddle.net/toddmotto/425KU/embedded/result,js,html" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<p>Il est important de noter que les contrôleurs ont pour but de gérer les données
et de contenir des fonctions (ou événements) qui parlent au serveur pour
envoyer/recevoir des données JSON. Aucune manipulation du DOM ne doit y prendre
place, pas de jQuery ici donc. La manipulation du DOM se fait par les directives
que nous allons voir ensuite.</p>

<p>Astuce : dans la documentation d&#8217;Angular (au moment de la rédaction de cet
article) leur exemples créent un contrôleur comme ceci :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">myApp</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;myApp&#39;</span><span class="p">,</span> <span class="p">[]);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">MainCtrl</span> <span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">//...</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></div></figure>


<p>&hellip; N&#8217;en faites rien. Cela expose toutes vos fonctions au contexte global et ne
les cantonne pas à votre application. Cela signifie également que vous ne pouvez
pas <em>minifier</em> votre code ou le tester facilement. Ne remplissez pas le
namespace global et gardez vos contrôleurs dans votre application.</p>

<h3 id="directives">Directives</h3>

<p>Une directive (<a href="http://toddmotto.com/creating-an-angularjs-directive-from-one-of-your-existing-plugins-scripts">lisez mon article sur les directives issues de scripts/plugins
existants [en]</a>),
dans sa forme la plus simple, est un petit morceau de template HTML, utilisé de
préférence à plusieurs endroits de l&#8217;application. C&#8217;est un moyen facile
d&#8217;injecter sans effort du DOM dans votre application ou d&#8217;effectuer des
interactions particulières avec le DOM. Les directives ne sont pas simples pour
autant et la courbe d&#8217;apprentissage pour les maitriser est assez importante. Ce
qui suit devrait tout de même vous donner un bon point de départ.</p>

<p>À quoi servent donc les directives ? Beaucoup de choses dont la création de
composants DOM (onglets ou éléments de navigation) - tout dépend de l&#8217;usage que
votre application fait de l&#8217;interface utilisateur. Si vous avez, par exemple,
joué un peu avec <code>ng-show</code> ou <code>ng-hide</code>, ce sont des directives (qui n&#8217;injectent
pas de DOM).</p>

<p>Pour cet exercice, je vais faire simple et créer un type de bouton personnalisé
(appelé <code>customButton</code>) qui injecte quelques balises que je déteste devoir
écrire partout. Il y a plusieurs façons de définir une directive dans le DOM.
Voici quelques exemples :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='html'><span class='line'><span class="c">&lt;!-- 1: déclaration en tant qu&#39;attribut --&gt;</span>
</span><span class='line'><span class="nt">&lt;a</span> <span class="na">custom-button</span><span class="nt">&gt;</span>Click me<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c">&lt;!-- 2: en tant que nouvel élément --&gt;</span>
</span><span class='line'><span class="nt">&lt;custom</span><span class="na">-button</span><span class="nt">&gt;</span>Click me<span class="err">&lt;</span>/custom-button&gt;
</span><span class='line'>
</span><span class='line'><span class="c">&lt;!-- 3: en tant que classe (pour être compatible avec les vieux IE) --&gt;</span>
</span><span class='line'><span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">&quot;custom-button&quot;</span><span class="nt">&gt;</span>Click me<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c">&lt;!-- 4: en tant que commentaire (peu adapté à cette démo) --&gt;</span>
</span><span class='line'><span class="c">&lt;!-- directive: custom-button --&gt;</span>
</span></code></pre></div></figure>


<p>Je préfère les utiliser sous forme d&#8217;attribut. Les éléments personnalisés
feront partie de futures versions de HTML5 sous le nom de <em>Web Components</em> mais
Angular les considère comme assez instables, en particulier pour les vieux
navigateurs.</p>

<p>Vous savez maintenant comment utiliser une directive, créons maintenant notre
bouton. Encore une fois, j&#8217;utilise le namespace <code>myApp</code>. Voici une directive
dans sa forme la plus simple :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='javascript'><span class='line'><span class="nx">myApp</span><span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s1">&#39;customButton&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">link</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">element</span><span class="p">,</span> <span class="nx">attrs</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// manipulation du DOM et événements</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></div></figure>


<p>Je définis ma directive avec la méthode <code>.directive()</code> en lui passant le nom de
la directive <code>'customButton'</code>. Lorsque vous capitalisez une lettre dans le nom
d&#8217;une directive, il faut utiliser un tiret lorsque vous vous en servez (comme
dans l&#8217;exemple vu plus haut).</p>

<p>Une directive retourne une référence vers elle-même via un Object et accepte un
certain nombre de paramètres. Selon moi, les plus importants à connaitre sont
<code>restrict</code>, <code>replace</code>, <code>transclude</code>, <code>template</code>, <code>templateUrl</code> et, bien sûr, la
propriété <code>link</code>. Ajoutons les :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='javascript'><span class='line'><span class="nx">myApp</span><span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s1">&#39;customButton&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">restrict</span><span class="o">:</span> <span class="s1">&#39;A&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">replace</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">transclude</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">template</span><span class="o">:</span> <span class="s1">&#39;&lt;a href=&quot;&quot; class=&quot;myawesomebutton&quot; ng-transclude&gt;&#39;</span> <span class="o">+</span>
</span><span class='line'>                <span class="s1">&#39;&lt;i class=&quot;icon-ok-sign&quot;&gt;&lt;/i&gt;&#39;</span> <span class="o">+</span>
</span><span class='line'>              <span class="s1">&#39;&lt;/a&gt;&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">link</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">element</span><span class="p">,</span> <span class="nx">attrs</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// DOM manipulation/events here!</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></div></figure>


<p>Résultat :</p>

<iframe width="100%" height="300" src="http://jsfiddle.net/toddmotto/VC4H2/embedded/result,js,html" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<p>Utilisez <em>Inspecter l&#8217;Élément</em> pour vérifier que les balises ont bien été
injectées. Je sais, il n&#8217;y a pas d&#8217;icône parce que je n&#8217;ai pas inclus <em>Font
Awesome</em>, mais vous voyez le principe. En ce qui concerne les propriétés d&#8217;une
directive :</p>

<dl>
<dt>restrict</dt>
<dd>   Indique la méthode d&#8217;accès à l&#8217;élément. Si votre projet doit être
compatible avec d&#8217;anciennes versions d&#8217;IE, préférez une déclaration de type
attribut ou classe. Indiquer <code>'A'</code> signifie <em>attribut</em>, <code>'E'</code> signifie
<em>élément</em>, <code>'C'</code> signifie <em>classe</em> et <code>'M'</code> signifie <em>commentaire</em>. La valeur
par défaut est <code>'EA'</code>. Oui, il est tout à fait possible d&#8217;utiliser plusieurs
méthodes d&#8217;accès en même temps.</dd>
<dt>replace</dt>
<dd>   Indique si le balisage appelant la directive doit être remplacé ou non.
Dans l&#8217;exemple précédent, vous pouvez voir que le DOM initial est remplacé par
le template de la directive.</dd>
<dt>transclude</dt>
<dd>   Indique si le DOM original doit être copié dans la directive. Dans notre
exemple, le texte &lsquo;Click me&rsquo; apparait dans la directive lorsque celle-ci est
affichée.</dd>
<dt>template</dt>
<dd>   Un template, comme ci-dessus, permet de déclarer le balisage à injecter. Il
est préférable d&#8217;utiliser cette propriété pour de petits bouts de HTML
uniquement. Les templates injectés sont compilés par Angular, vous pouvez donc
utiliser des balises handlebars et les <em>bindings</em> dans ceux-ci.</dd>
<dt>templateUrl</dt>
<dd>   Similaire à <code>template</code>, permet de garder les templates dans leurs propres
fichiers ou au sein de balises <code>&lt;script&gt;</code>. Cette propriété permet d&#8217;indiquer
l&#8217;URL du template à utiliser. Pour des morceaux de HTML un peu plus complexes,
il est préférable de les placer chacun dans un fichier spécifique, dans un
dossier <em>templates</em> :</dd>
</dl>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='javascript'><span class='line'><span class="nx">myApp</span><span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s1">&#39;customButton&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">templateUrl</span><span class="o">:</span> <span class="s1">&#39;templates/customButton.html&#39;</span>
</span><span class='line'>    <span class="c1">// directive stuff...</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></div></figure>


<p>Et dans votre fichier (nom insensible à la casse) :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='html'><span class='line'><span class="c">&lt;!-- dans customButton.html --&gt;</span>
</span><span class='line'><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;&quot;</span> <span class="na">class=</span><span class="s">&quot;myawesomebutton&quot;</span> <span class="na">ng-transclude</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;i</span> <span class="na">class=</span><span class="s">&quot;icon-ok-sign&quot;</span><span class="nt">&gt;&lt;/i&gt;</span>
</span><span class='line'><span class="nt">&lt;/a&gt;</span>
</span></code></pre></div></figure>


<p>L&#8217;intérêt de cette technique est que le fichier HTML va être mis en cache par le
navigateur. Une alternative, qui n&#8217;est pas mise en cache, est de déclarer le
template dans une balise <code>&lt;script&gt;</code> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/ng-template&quot;</span> <span class="na">id=</span><span class="s">&quot;customButton.html&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">a</span> <span class="nx">href</span><span class="o">=</span><span class="s2">&quot;&quot;</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;myawesomebutton&quot;</span> <span class="nx">ng</span><span class="o">-</span><span class="nx">transclude</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">i</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;icon-ok-sign&quot;</span><span class="o">&gt;&lt;</span><span class="err">/i&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/a&gt;</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span></code></pre></div></figure>


<p>Cela indique à Angular que c&#8217;est un <code>ng-template</code> et lui donne un ID. Angular va
chercher le <em>ng-template</em> ou le fichier <em>*.hml</em>. Je préfère utiliser des
fichiers <em>*.html</em>, ils sont plus faciles à gérer, augmentent les performances et
gardent le DOM propre. Si vous avez une centaine de directives, ce sera plus
simple pour les parcourir.</p>

<h3 id="services">Services</h3>

<p>Les services sont souvent une notion un peu floue. D&#8217;après mes lectures et ma
propre expérience, les services sont plus un design pattern de style qu&#8217;un réel
apport de fonctionnalité. J&#8217;ai lu le code source d&#8217;Angular et à priori ils sont
très proches des factories. Ils passent par le même compilateur et semble avoir
de nombreuses fonctionnalités en commun. Il semble que les services soient
préférables pour <em>singleton</em> et les factories pour les fonctions plus complexes
comme les <em>Object Literals</em> ou d&#8217;autres cas plus compliqués.</p>

<p>Voici un exemple de service qui multiplie deux nombres :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='javascript'><span class='line'><span class="nx">myApp</span><span class="p">.</span><span class="nx">service</span><span class="p">(</span><span class="s1">&#39;Math&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">multiply</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">x</span> <span class="o">*</span> <span class="nx">y</span><span class="p">;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></div></figure>


<p>Il s&#8217;utilise ensuite comme ceci dans un contrôleur :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='javascript'><span class='line'><span class="nx">myApp</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;MainCtrl&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;$scope&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">12</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="mi">24</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// outputs 288</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">multiply</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">);</span>
</span><span class='line'><span class="p">}]);</span>
</span></code></pre></div></figure>


<p>Je sais, une multiplication ne nécessite pas un service en soi mais vous voyez
où je veux en venir.</p>

<p>Lorsque l&#8217;on crée un service (ou une factory) il faut utiliser l&#8217;injection de
dépendance pour indiquer à Angular de le prendre en charge. Sans cela, on aura
une erreur de compilation et notre contrôleur plantera. Vous avez sans doute
remarqué la partie <code>function ($scope)</code> du contrôleur, c&#8217;est une simple
injection de dépendance, c&#8217;est ici que le code doit être placé. Vous aurez
remarqué également le <code>['$scope']</code> placé avant, j&#8217;y reviendrai plus tard. Voici
comment utiliser une injection de dépendance pour dire à Angular que vous voulez
utiliser un service :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='javascript'><span class='line'><span class="c1">// Passez Math</span>
</span><span class='line'><span class="nx">myApp</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;MainCtrl&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;$scope&#39;</span><span class="p">,</span> <span class="s1">&#39;Math&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nb">Math</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">12</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="mi">24</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// outputs 288</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">multiply</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">);</span>
</span><span class='line'><span class="p">}]);</span>
</span></code></pre></div></figure>


<h3 id="factories">Factories</h3>

<p>Passer des services aux factories devrait être assez simple, on pourrait créer
un <em>Object Literal</em> dans une factory ou simplement fournir des méthodes plus
avancées :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='javascript'><span class='line'><span class="nx">myApp</span><span class="p">.</span><span class="nx">factory</span><span class="p">(</span><span class="s1">&#39;Server&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">get</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">url</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">$http</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">url</span><span class="p">);</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">post</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">url</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">$http</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="nx">url</span><span class="p">);</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></div></figure>


<p>Je crée ici un wrapper personnalisé pour l&#8217;objet XHR de Angular. Après injection
de dépendance dans le contrôleur, l&#8217;utilisation est aisée :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='javascript'><span class='line'><span class="nx">myApp</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;MainCtrl&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;$scope&#39;</span><span class="p">,</span> <span class="s1">&#39;Server&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">Server</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">jsonGet</span> <span class="o">=</span> <span class="s1">&#39;http://myserver/getURL&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">jsonPost</span> <span class="o">=</span> <span class="s1">&#39;http://myserver/postURL&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">Server</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">jsonGet</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">Server</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="nx">jsonPost</span><span class="p">);</span>
</span><span class='line'><span class="p">}]);</span>
</span></code></pre></div></figure>


<p>Si vous vouliez surveiller des changements côté serveur, vous pourriez mettre
en place <code>Server.poll(jsonPoll)</code> ou, si vous utilisez par exemple un socket,
vous pourriez mettre en place <code>Server.socket(jsonSocket)</code>. Ce mécanisme permet
de modulariser le code et de créer des outils réutilisables tout en gardant le
code des contrôleur à son minimum.</p>

<h3 id="filtres">Filtres</h3>

<p>Les filtres sont utiles avec les tableaux de données mais également en dehors
des boucles. Si vous parcourez une collection de données et que vous souhaitez
les filtrer, vous êtes au bon endroit. Les filtres peuvent également s&#8217;utiliser
pour filtrer la saisie d&#8217;un utilisateur dans un champ <code>&lt;input&gt;</code> par exemple. Les
filtres s&#8217;utilisent de deux façons : dans un contrôleur ou sous forme de
méthode. Voici la version en méthode, qui peut s&#8217;utiliser partout :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='javascript'><span class='line'><span class="nx">myApp</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="s1">&#39;reverse&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">input</span><span class="p">,</span> <span class="nx">uppercase</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">out</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">input</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">out</span> <span class="o">=</span> <span class="nx">input</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="o">+</span> <span class="nx">out</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">uppercase</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">out</span> <span class="o">=</span> <span class="nx">out</span><span class="p">.</span><span class="nx">toUpperCase</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">out</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Contrôleur inclus pour fournir des données</span>
</span><span class='line'><span class="nx">myApp</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;MainCtrl&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;$scope&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">greeting</span> <span class="o">=</span> <span class="s1">&#39;Todd Motto&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">}]);</span>
</span></code></pre></div></figure>


<p>DOM usage:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">ng-app=</span><span class="s">&quot;myApp&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">ng-controller=</span><span class="s">&quot;MainCtrl&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;p&gt;</span>Sans filtre: {{ greeting }}<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>    <span class="nt">&lt;p&gt;</span>Reverse: {{ greeting | reverse }}<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></div></figure>


<p>Résultat :</p>

<iframe width="100%" height="300" src="http://jsfiddle.net/toddmotto/pmh4s/embedded/result,js,html" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<p>Et voici comment l&#8217;utiliser dans un <code>ng-repeat</code> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='html'><span class='line'><span class="nt">&lt;ul&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li</span> <span class="na">ng-repeat=</span><span class="s">&quot;number in myNumbers |filter:oddNumbers&quot;</span><span class="nt">&gt;</span>{{ number }}<span class="nt">&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;/ul&gt;</span>
</span></code></pre></div></figure>


<p>Voici également un cas d&#8217;utilisation réel de filtres dans un contrôleur :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='javascript'><span class='line'><span class="nx">myApp</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;MainCtrl&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;$scope&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">45</span><span class="p">,</span> <span class="mi">60</span><span class="p">,</span> <span class="mi">80</span><span class="p">,</span> <span class="mi">100</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">lowerBound</span> <span class="o">=</span> <span class="mi">42</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Does the Filters</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">greaterThanNum</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">item</span> <span class="o">&gt;</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">lowerBound</span><span class="p">;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="p">}]);</span>
</span></code></pre></div></figure>


<p>Et son utilisation dans <code>ng-repeat</code> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='html'><span class='line'><span class="nt">&lt;li</span> <span class="na">ng-repeat=</span><span class="s">&quot;number in numbers | filter:greaterThanNum&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  {{ number }}
</span><span class='line'><span class="nt">&lt;/li&gt;</span>
</span></code></pre></div></figure>


<p>Résultat :</p>

<iframe width="100%" height="300" src="http://jsfiddle.net/toddmotto/cZbCf/embedded/result,js,html" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<p>Voilà notre tour des briques majeures d&#8217;Angular terminé. Ce n&#8217;est que le tout
début de notre plongée en eaux profondes, mais c&#8217;est amplement suffisant pour
vous permettre de créer votre première application Angular.</p>

<h2 id="binding-de-donnees-a-deux-sens">Binding de données à deux sens</h2>

<p>La première fois que j&#8217;ai entendu parler de <em>binding</em> de données à deux sens, je
n&#8217;étais pas sûr de bien comprendre. La meilleure façon de le décrire est sous la
forme d&#8217;un cercle de données synchronisées : si le modèle est mis à jour, la vue
est mise à jour automatiquement ; si la vue est mise à jour, le modèle est
automatiquement mis à jour. Cela veut dire que sans rien faire, la donnée est
synchronisée. Si je <em>bind</em> un <code>ng-model</code> à un <code>&lt;input&gt;</code> et commence à taper dans
ce dernier, cela crée un modèle (ou met à jour un modèle existant) en même
temps.</p>

<p>Je crée ici le <code>&lt;input&gt;</code> et lui <em>bind</em> un modèle <code>myModel</code>, je peux ensuite
utiliser les accolades pour afficher la donnée de mon modèle (ainsi que ses
mises à jour) dans la vue :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">ng-app=</span><span class="s">&quot;myApp&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">ng-controller=</span><span class="s">&quot;MainCtrl&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">ng-model=</span><span class="s">&quot;myModel&quot;</span> <span class="na">placeholder=</span><span class="s">&quot;Start typing...&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;p&gt;</span>My model data: {{ myModel }}<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='javascript'><span class='line'><span class="nx">myApp</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;MainCtrl&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;$scope&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// On capture la donnée du modèle</span>
</span><span class='line'>  <span class="c1">// et/ou on l&#39;initialise avec une chaîne de caractères vide</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">myModel</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">}]);</span>
</span></code></pre></div></figure>


<p>Résultat :</p>

<iframe width="100%" height="300" src="http://jsfiddle.net/toddmotto/qrr3q/embedded/result,js,html" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<h2 id="appels-xhr-slash-ajax-slash-$http-et-binding-json">Appels XHR/Ajax/$http et binding JSON</h2>

<p>Vous savez maintenant comment envoyer des données à <code>$scope</code> et comment
fonctionne le <em>binding</em> de données dans les modèles. Il est donc maintenant
temps de simuler quelques XHR vers le serveur. Ce n&#8217;est pas essentiel pour un
site web classique, à moins d&#8217;avoir des besoins Ajax spécifiques, c&#8217;est donc
plus orienté vers la récupération de données pour une application web.</p>

<p>En développement local, vous utilisez probablement Java, ASP .NET, PHP ou une
autre techno pour faire tourner l&#8217;application. Que vous contactiez une bonne de
données locale ou que vous utilisiez ce serveur comme une API pour communiquer
avec une autre ressource, la mise en place est globalement la même.</p>

<p>C&#8217;est ici que &lsquo;dollar http&rsquo; entre en scène. C&#8217;est dorénavant votre meilleur ami.
La méthode <code>$http</code> d&#8217;Angular est un <em>wrapper</em> bien pratique pour accéder aux
données du serveur et est d&#8217;une utilisation très simple. Voici un petit exemple
pour une requête <em>GET</em> qui, comme vous l&#8217;aurez deviné, récupère des données
depuis le serveur. Sa syntaxe est très proche de celle de jQuery, la transition
est donc aisée :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='javascript'><span class='line'><span class="nx">myApp</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;MainCtrl&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;$scope&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$http</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">method</span><span class="o">:</span> <span class="s1">&#39;GET&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;//localhost:9000/someUrl&#39;</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">}]);</span>
</span></code></pre></div></figure>


<p>Angular vous retourne ce qu&#8217;on appelle une <em>promise</em> ce qui est une façon très
efficace et lisible de gérer les <em>callbacks</em>. Les <em>promises</em> sont rattachées à
la fonction qui les as créées via la notation <code>.myPromise()</code>. Tout
naturellement, nous avons la main sur <code>success</code> et <code>error</code> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='javascript'><span class='line'><span class="nx">myApp</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;MainCtrl&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;$scope&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$http</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">method</span><span class="o">:</span> <span class="s1">&#39;GET&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;//localhost:9000/someUrl&#39;</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">success</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">status</span><span class="p">,</span> <span class="nx">headers</span><span class="p">,</span> <span class="nx">config</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// données récupérées avec succès</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">status</span><span class="p">,</span> <span class="nx">headers</span><span class="p">,</span> <span class="nx">config</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// erreur de récupération :(</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">}]);</span>
</span></code></pre></div></figure>


<p>Tout à fait lisible. C&#8217;est ici que nous fusionnons la vue et le serveur en
y attachant un modèle ou en mettant le modèle à jour dans le DOM. Disons que
tout est déjà mis en place et affichons un nom d&#8217;utilisateur dans le DOM à
partir d&#8217;un appel Ajax.</p>

<p>En théorie, nous devrions concevoir notre JSON en premier, ce qui affecte la
façon dont on l&#8217;attache à nos données. Faisons simple, voici ce que le serveur
nous fournit :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;user&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;Todd Motto&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;id&quot;</span><span class="p">:</span> <span class="s2">&quot;80138731&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></div></figure>


<p>Nous allons recevoir un <em>Object</em> (que nous appellerons <em>data</em>, on peut voir que
<em>data</em> est passé à notre handler) et devons interagir avec la propriété
<code>data.user</code>. Dans <code>data.user</code>, nous trouvons <code>name</code> et <code>id</code>. Obtenir leur valeur
est assez simple, il nous suffit par exemple de faire appel à <code>data.user.name</code>
ce qui nous donne &lsquo;Todd Motto&rsquo;.</p>

<p>Le code JavaScript :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='javascript'><span class='line'><span class="nx">myApp</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;UserCtrl&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;$scope&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Crée un Object user</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">user</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Initialise le modèle avec une chaîne vide</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">username</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Nous voulons effectuer la requête</span>
</span><span class='line'>  <span class="c1">// et obtenir le nom de l&#39;utilisateur</span>
</span><span class='line'>  <span class="nx">$http</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">method</span><span class="o">:</span> <span class="s1">&#39;GET&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;//localhost:9000/someUrlForGettingUsername&#39;</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">success</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">status</span><span class="p">,</span> <span class="nx">headers</span><span class="p">,</span> <span class="nx">config</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Ici nous assignons cet utilisateur à</span>
</span><span class='line'>    <span class="c1">// notre modèle existant !</span>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">username</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">status</span><span class="p">,</span> <span class="nx">headers</span><span class="p">,</span> <span class="nx">config</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Une erreur est survenue</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">}]);</span>
</span></code></pre></div></figure>


<p>Il nous suffit maintenant de faire ceci dans le DOM :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">ng-controller=</span><span class="s">&quot;UserCtrl&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;p&gt;</span>{{ user.username }}<span class="nt">&lt;/p&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></div></figure>


<p>Ceci va afficher le nom de l&#8217;utilisateur. Nous allons faire un pas de plus et
comprendre le <em>data-binding</em> déclaratif et c&#8217;est là que ça devient vraiment
intéressant.</p>

<h2 id="data-binding-declaratif">Data-binding déclaratif</h2>

<p>La philosophie d&#8217;Angular est de créer du HTML dynamique, riche en
fonctionnalités et d&#8217;effectuer, de façon transparente, beaucoup de choses dont
on n&#8217;oserait à peine rêver côté web client. Et c&#8217;est exactement ce qu&#8217;ils ont
fait.</p>

<p>Imaginons que nous venons de faire une requête Ajax pour récupérer une liste
d&#8217;emails avec leur sujet ainsi que leur date d&#8217;envoi et souhaitons les afficher
dans le DOM. C&#8217;est là qu&#8217;Angular montre toute sa force. Nous allons tout
d&#8217;abord devoir écrire un contrôleur d&#8217;emails :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='javascript'><span class='line'><span class="nx">myApp</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;EmailsCtrl&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;$scope&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Crée un Object emails</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">emails</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Nous écrivons ici en dur les données normalement</span>
</span><span class='line'>  <span class="c1">// reçues du serveur</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">emails</span><span class="p">.</span><span class="nx">messages</span> <span class="o">=</span> <span class="p">[{</span>
</span><span class='line'>        <span class="s2">&quot;from&quot;</span><span class="o">:</span> <span class="s2">&quot;Steve Jobs&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;subject&quot;</span><span class="o">:</span> <span class="s2">&quot;I think I&#39;m holding my phone wrong :/&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;sent&quot;</span><span class="o">:</span> <span class="s2">&quot;2013-10-01T08:05:59Z&quot;</span>
</span><span class='line'>    <span class="p">},{</span>
</span><span class='line'>        <span class="s2">&quot;from&quot;</span><span class="o">:</span> <span class="s2">&quot;Ellie Goulding&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;subject&quot;</span><span class="o">:</span> <span class="s2">&quot;I&#39;ve got Starry Eyes, lulz&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;sent&quot;</span><span class="o">:</span> <span class="s2">&quot;2013-09-21T19:45:00Z&quot;</span>
</span><span class='line'>    <span class="p">},{</span>
</span><span class='line'>        <span class="s2">&quot;from&quot;</span><span class="o">:</span> <span class="s2">&quot;Michael Stipe&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;subject&quot;</span><span class="o">:</span> <span class="s2">&quot;Everybody hurts, sometimes.&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;sent&quot;</span><span class="o">:</span> <span class="s2">&quot;2013-09-12T11:38:30Z&quot;</span>
</span><span class='line'>    <span class="p">},{</span>
</span><span class='line'>        <span class="s2">&quot;from&quot;</span><span class="o">:</span> <span class="s2">&quot;Jeremy Clarkson&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;subject&quot;</span><span class="o">:</span> <span class="s2">&quot;Think I&#39;ve found the best car... In the world&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;sent&quot;</span><span class="o">:</span> <span class="s2">&quot;2013-09-03T13:15:11Z&quot;</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'>
</span><span class='line'><span class="p">}]);</span>
</span></code></pre></div></figure>


<p>Nous devons maintenant faire le lien avec notre HTML. C&#8217;est là que nous allons
utiliser le <em>binding</em> déclaratif pour indiquer ce que va faire l&#8217;application -
créer notre premier morceau de HTML dynamique. Nous allons utiliser la
directive <code>ng-repeat</code> d&#8217;Angular qui va parcourir les données et générer un
résultat sans que nous ayant à faire de <em>callbacks</em> ou de changements d&#8217;état,
c&#8217;est gratuit :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='html'><span class='line'><span class="nt">&lt;ul&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li</span> <span class="na">ng-repeat=</span><span class="s">&quot;message in emails.messages&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;p&gt;</span>From: {{ message.from }}<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>    <span class="nt">&lt;p&gt;</span>Subject: {{ message.subject }}<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>    <span class="nt">&lt;p&gt;</span>{{ message.sent | date:&#39;MMM d, y h:mm:ss a&#39; }}<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;/ul&gt;</span>
</span></code></pre></div></figure>


<p>Résultat :</p>

<iframe width="100%" height="300" src="http://jsfiddle.net/toddmotto/TAVQc/embedded/result,js,html" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<p>J&#8217;ai également ajouté un <em>filtre</em> pour vous montrer comment afficher
correctement une date UTC.</p>

<p>Documentez vous sur les directives <code>ng-*</code> d&#8217;Angular, cela vous permettra
d&#8217;exploiter pleinement le <em>binding</em> de directives, cela vous montre comment
faire le lien entre les données du serveur, la couche modèle et la vue et
comment afficher les données.</p>

<h2 id="les-fonctions-de-scope">Les fonctions de <em>scope</em></h2>

<p>Après le <em>binding</em> de directives, les fonctions de <em>scope</em> sont la suite logique
dans la création d&#8217;une application. Voici une fonction assez simple nous
permettant de supprimer un email dans notre collection :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='javascript'><span class='line'><span class="nx">myApp</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;MainCtrl&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;$scope&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">deleteEmail</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">index</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">emails</span><span class="p">.</span><span class="nx">messages</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">index</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="p">}]);</span>
</span></code></pre></div></figure>


<p>Astuce: Il est important de penser en termes de suppression au niveau du modèle.
Vous ne touchez à rien de ce qui concerne le DOM, Angular est un framework MVC
et se charge de tout grâce à son binding de données à deux sens et à son
fonctionnement sans callbacks, il vous suffit d&#8217;organiser votre code de façon
à ce qu&#8217;il réponde à vos données !</p>

<p>L&#8217;attachement des fonctions au scope se fait également par le biais des
directives <code>ng-*</code>, dans le cas suivant, il s&#8217;agit de <code>ng-click</code> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='html'><span class='line'><span class="nt">&lt;a</span> <span class="na">ng-click=</span><span class="s">&quot;deleteEmail($index)&quot;</span><span class="nt">&gt;</span>Delete email<span class="nt">&lt;/a&gt;</span>
</span></code></pre></div></figure>


<p>Ceci est très différent d&#8217;un événement <em>click</em> inline et ce pour plusieurs
raisons dont je vous parlerai bientôt. Comme vous pouvez le voir, je passe
<code>$index</code> en paramètre. Angular sait quel élément vous êtes en train de
supprimer :</p>

<p>Résulat (supprimez quelques emails !) :</p>

<iframe width="100%" height="300" src="http://jsfiddle.net/toddmotto/BgZmt/embedded/result,js,html" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<h2 id="methodes-de-dom-declaratives">Méthodes de DOM déclaratives</h2>

<p>Nous allons maintenant voir les méthodes de DOM. Elles sont commes les
directives et permettent d&#8217;ajouter au DOM des fonctionnalités pour lesquelles
vous auriez, en temps normal, beaucoup de code à écrire. Un très bon exemple
serait une navigation déroulante. En utilisant <code>ng-show</code> et <code>ng-click</code> nous
pouvons mettre cela en place très simplement :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='html'><span class='line'><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;&quot;</span> <span class="na">ng-click=</span><span class="s">&quot;toggle = !toggle&quot;</span><span class="nt">&gt;</span>Afficher menu<span class="nt">&lt;/a&gt;</span>
</span><span class='line'><span class="nt">&lt;ul</span> <span class="na">ng-show=</span><span class="s">&quot;toggle&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li&gt;</span>Lien 1<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li&gt;</span>Lien 2<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li&gt;</span>Lien 3<span class="nt">&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;/ul&gt;</span>
</span></code></pre></div></figure>


<p>C&#8217;est ici que MVVM entre en jeu. Comme vous pouvez le voir, il n&#8217;y a pas de
contrôleur à écrire. Nous reviendrons bientôt sur MVVM.</p>

<p>Résultat (vous pouvez dérouler le menu) :</p>

<iframe width="100%" height="300" src="http://jsfiddle.net/toddmotto/ZUyW5/embedded/result,js,html" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<h2 id="les-expressions">Les expressions</h2>

<p>C&#8217;est une des choses que je préfère dans Angular, ce pour quoi on utilise
habituellement JavaScript en écrivant beaucoup de code répétitif.</p>

<p>Avez-vous déjà fait ceci ?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='javascript'><span class='line'><span class="nx">elem</span><span class="p">.</span><span class="nx">onclick</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">otherElem</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s1">&#39;No data&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">otherElem</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s1">&#39;My data&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></div></figure>


<p>Ce pourrait par exemple être le callback d&#8217;une requête <em>GET</em> dans lequel vous
modifiez le DOM en fonction de l&#8217;état des données. Angular vous permet de faire
la même chose sans écrire une ligne de JavaScript !</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='html'><span class='line'><span class="nt">&lt;p&gt;</span>{{ data.length &gt; 0 <span class="err">&amp;&amp;</span> &#39;My data&#39; || &#39;No data&#39; }}<span class="nt">&lt;/p&gt;</span>
</span></code></pre></div></figure>


<p>Ce morceau de DOM va être automatiquement mis à jour, sans besoin de callback,
au fur et à mesure que votre application récupère les données. Il vous indiquera
si des données sont présentes ou non. Il y a une de très nombreux cas d&#8217;usage et
Angular le gère automatiquement grâce au binding de données à deux sens.</p>

<p>Résultat :</p>

<iframe width="100%" height="300" src="http://jsfiddle.net/toddmotto/XCwcr/embedded/result,js,html" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<h2 id="routage-et-vues-dynamiques">Routage et vues dynamiques</h2>

<p>La philosophie des applications côté client (et des applications web en
général) est assez simple : Vous avez un header, un footer, une sidebar et le
contenu au milieu injecte du contenu par magie en fonction de l&#8217;URL.</p>

<p>Angular facilite beaucoup la mise en place d&#8217;un tel mécanisme, ce qu&#8217;on
appellerait les vues dynamiques. Les vues sont injectées dynamiquement au
travers de <code>$routeProvider</code>, en fonction de l&#8217;URL.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='javascript'><span class='line'><span class="nx">myApp</span><span class="p">.</span><span class="nx">config</span><span class="p">([</span><span class="s1">&#39;$routeProvider&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">$routeProvider</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   * $routeProvider</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="nx">$routeProvider</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">templateUrl</span><span class="o">:</span> <span class="s1">&#39;views/main.html&#39;</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">otherwise</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">redirectTo</span><span class="o">:</span> <span class="s1">&#39;/&#39;</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="p">}]);</span>
</span></code></pre></div></figure>


<p>Lorsque vous êtes sur l&#8217;URL <code>/</code> (la page d&#8217;accueil du site), le template utilisé
est <code>main.html</code>. Vous devez appeler votre vue initiale <code>main.html</code> puisque vous
avez déjà un fichier <code>index.html</code> contenant votre site en page unique. Il est
très simple d&#8217;ajouter des vues supplémentaires en fonction de l&#8217;URL :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='javascript'><span class='line'><span class="nx">myApp</span><span class="p">.</span><span class="nx">config</span><span class="p">([</span><span class="s1">&#39;$routeProvider&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">$routeProvider</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   * $routeProvider</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="nx">$routeProvider</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">templateUrl</span><span class="o">:</span> <span class="s1">&#39;views/main.html&#39;</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="s1">&#39;/emails&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">templateUrl</span><span class="o">:</span> <span class="s1">&#39;views/emails.html&#39;</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">otherwise</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">redirectTo</span><span class="o">:</span> <span class="s1">&#39;/&#39;</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="p">}]);</span>
</span></code></pre></div></figure>


<p>Nous pouvons par exemple charger le HTML de notre liste d&#8217;emails quand on visite
l&#8217;URL <code>emails.html</code>. Vous pouvez créer une application sophistiquée avec assez
peu d&#8217;efforts.</p>

<p><code>$routeProvider</code> propose d&#8217;autres fonctionnalités qui valent la peine de
fouiller un peu, mais avec ceci vous avez déjà de quoi faire des choses
intéressantes. Il y a, par exemple, les intercepteurs <code>$http</code> qui émettent des
événements lorsqu&#8217;une requête Ajax est en cours, ce qui permettrait d&#8217;afficher
un spinner pendant que les données sont récupérées.</p>

<h2 id="donnees-statiques-globales">Données statiques globales</h2>

<p>Gmail récupère une bonne partie de ses données en les écrivant en JSON dans la
page (inspectez les sources de la page). Si vous voulez accéder instantanément à
vos données dès le chargement de l&#8217;application et accélérer son lancement, cette
technique est très pratique.</p>

<p>Lorsque je développe nos applications, des balises issues de Java sont insérez
dans le DOM et, une fois l&#8217;application chargée, les données viennent du serveur.
Je parle ici de Java mais vous pouvez utiliser n&#8217;importe quel langage côté
serveur. Voici comment ajouter le JSON dans votre page et comment le charger
ensuite depuis un contrôleur :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='html'><span class='line'><span class="c">&lt;!-- dans index.html (en bas de page) --&gt;</span>
</span><span class='line'><span class="nt">&lt;script&gt;</span>
</span><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nx">globalData</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'><span class="nx">globalData</span><span class="p">.</span><span class="nx">emails</span> <span class="o">=</span> <span class="o">&lt;</span><span class="nx">baliseJavaPourGenererLesMessages</span><span class="o">&gt;</span><span class="p">;</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span></code></pre></div></figure>


<p>Ma balise Java va être remplacée par les bonnes données au moment de l&#8217;affichage
et Angular va affiche instantanément les emails. Récupérez simplement les
données dans un contrôleur :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='javascript'><span class='line'><span class="nx">myApp</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;EmailsCtrl&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;$scope&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">emails</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Assigner les données initiales !</span>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">emails</span><span class="p">.</span><span class="nx">messages</span> <span class="o">=</span> <span class="nx">globalData</span><span class="p">.</span><span class="nx">emails</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">}]);</span>
</span></code></pre></div></figure>


<h2 id="minification-reduction-du-code">Minification (réduction du code)</h2>

<p>Je vais parler rapidement de minification avec le code Angular. Vous avez
probablement joué un peu avec Angular et avez peut-être utilisé un
<em>minifier</em>&hellip; et eu une erreur !</p>

<p>Minifier le code AngularJS est simple, vous devez simplement spécifier les
injections de dépendances dans un tableau, avant la fonction :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='javascript'><span class='line'><span class="nx">myApp</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;MainCtrl&#39;</span><span class="p">,</span>
</span><span class='line'><span class="p">[</span><span class="s1">&#39;$scope&#39;</span><span class="p">,</span> <span class="s1">&#39;Dependency&#39;</span><span class="p">,</span> <span class="s1">&#39;Service&#39;</span><span class="p">,</span> <span class="s1">&#39;Factory&#39;</span><span class="p">,</span>
</span><span class='line'><span class="kd">function</span> <span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">Dependency</span><span class="p">,</span> <span class="nx">Service</span><span class="p">,</span> <span class="nx">Factory</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// code</span>
</span><span class='line'>
</span><span class='line'><span class="p">}]);</span>
</span></code></pre></div></figure>


<p>Une fois minifié :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='javascript'><span class='line'><span class="nx">myApp</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;MainCtrl&#39;</span><span class="p">,</span>
</span><span class='line'><span class="p">[</span><span class="s1">&#39;$scope&#39;</span><span class="p">,</span> <span class="s1">&#39;Dependency&#39;</span><span class="p">,</span> <span class="s1">&#39;Service&#39;</span><span class="p">,</span> <span class="s1">&#39;Factory&#39;</span><span class="p">,</span>
</span><span class='line'><span class="kd">function</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// a = $scope</span>
</span><span class='line'>  <span class="c1">// b = Dependency</span>
</span><span class='line'>  <span class="c1">// c = Service</span>
</span><span class='line'>  <span class="c1">// d = Factory</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// $scope alias usage</span>
</span><span class='line'>  <span class="nx">a</span><span class="p">.</span><span class="nx">someFunction</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{...};</span>
</span><span class='line'>
</span><span class='line'><span class="p">}]);</span>
</span></code></pre></div></figure>


<p>Rappelez-vous bien de garder la liste des injections dans le même ordre que les
paramètres de la fonction, vous risqueriez un bon mal de crâne dans le cas
contraire.</p>

<h2 id="differences-avec-mvc-et-mvvm">Différences avec MVC et MVVM</h2>

<p>Nous arrivons à la fin de ce long article sur AngularJS. Je vais cependant faire
une passe rapide sur les différences avec MVC/MVVM dont AngularJS est fier :</p>

<ul>
<li><em>MVC</em>: parle avec un contrôleur, Modèle-Vue-Contrôleur</li>
<li><em>MVVM</em>: encapsule une <em>binding</em> de données décalaratif qui, téchniquement, se
parle à lui-même. Modèle-Vue-Vue-Modèle. Le modèle parle à la vue et la vue
peut parler au modèle. Le binding de données à deux sens d&#8217;Angular permet de
garder cette synchronisation sans rian avoir à écrire. Cela vous permet
d&#8217;écrire de la logique sans contrôleur.</li>
</ul>


<p>Un exemple rapide, vous pouvez utiliser <code>ng-repeat</code> sans contrôleur en
fournissant directement les données :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='html'><span class='line'><span class="nt">&lt;li</span> <span class="na">ng-repeat=</span><span class="s">&quot;number in [1,2,3,4,5,6,7,8,9]&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  {{ number }}
</span><span class='line'><span class="nt">&lt;/li&gt;</span>
</span></code></pre></div></figure>


<p>Pour un test rapide c&#8217;est acceptable mais je vous conseille de toujours avoir
un contrôleur lorsque vous développez.</p>

<p>Résultat :</p>

<iframe width="100%" height="300" src="http://jsfiddle.net/toddmotto/C9GHF/embedded/result,js,html" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<h2 id="html5-web-components">HTML5 Web Components</h2>

<p>Comme nous l&#8217;avons vu plus haut, AngularJS permet de créer des éléments
personnalisés :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='html'><span class='line'><span class="nt">&lt;myCustomElement&gt;&lt;/myCustomElement&gt;</span>
</span></code></pre></div></figure>


<p>Cela permet d&#8217;aligner le web avec le futur de HTML5 qui introduit les <em>web
components</em> et l&#8217;élément <code>&lt;template&gt;</code>. Angular nous permet de les utiliser dès
aujourd&#8217;hui. Les <em>web components</em> mélangent éléments personnalisés et injection
dynamique de JavaScript pour peupler dynamiquement la vue, c&#8217;est très excitant
et déjà possible avec Angular ! Ils ont un cran d&#8217;avance et permettent de
s&#8217;assurer que ce qui arrive fonctionne - chapeau bas.</p>

<h2 id="commentaires-de-scope">Commentaires de scope</h2>

<p>Les commentaires de scopes sont, selon moi, utiles dans mon workflow. Plutôt que
d&#8217;ajouter des commentaires comme ceci dans mon HTML :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='html'><span class='line'><span class="c">&lt;!-- header --&gt;</span>
</span><span class='line'><span class="nt">&lt;header&gt;</span>
</span><span class='line'>  Stuff.
</span><span class='line'><span class="nt">&lt;/header&gt;</span>
</span><span class='line'><span class="c">&lt;!-- /header --&gt;</span>
</span></code></pre></div></figure>


<p>Lorsque l&#8217;on parle d&#8217;Angular, il faut penser en termes de vues et de scopes, pas
de DOM ! Les scopes sont cloisonnés, ce qui signifie que, à moins de partager
délibérément les données entre les contrôleurs, vos données sont encapsulées et
inaccessibles de l&#8217;extérieur. Je trouve que noter les régions cloisonnées aide
beaucoup :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='html'><span class='line'><span class="c">&lt;!-- scope: MainCtrl --&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;content&quot;</span> <span class="na">ng-controller=</span><span class="s">&quot;MainCtrl&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="c">&lt;!-- /scope: MainCtrl --&gt;</span>
</span></code></pre></div></figure>


<h2 id="debugger-angularjs">Debugger AngularJS</h2>

<p>Il y a une extension Chrome géniale que les gens de Google recommandent pour
développer et debugger avec Angular, il s&#8217;agit de Batarang et vous pouvez la
récupérer <a href="https://chrome.google.com/webstore/detail/angularjs-batarang/ighdmehidhipcmcojjgiloacoafjmpfk">ici</a>.</p>

<p>Happy coding.</p>

<h2 id="a-lire-egalement">À lire également</h2>

<p>Apprenez comment <a href="http://toddmotto.com/creating-an-angularjs-directive-from-one-of-your-existing-plugins-scripts">créer votre propre directive</a> depuis un script ou un plugin.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elixir pour les rubyists (partie 2)]]></title>
    <link href="http://vfsvp.fr/article/elixir-pour-les-rubyists-2"/>
    <updated>2013-10-29T21:00:00+01:00</updated>
    <id>http://vfsvp.fr/article/elixir-pour-les-rubyists-2</id>
    <content type="html"><![CDATA[<p>Source: <a href="http://www.natescottwest.com/blog/2013/10/09/elixir-for-rubyists-part-2/">Elixir for Rubyists part 2 par Nate West</a></p>

<p>Voici une tentative de réponse aux questions de la <a href="http://vfsvp.fr/article/elixir-pour-les-rubyists-1">partie 1</a>.</p>

<h2 id="immuable">Immuable ??</h2>

<p>Les variables d&#8217;Elixir sont immuables. Elles ne sont pas à assignation unique.
Je vous entends déjà dire &ldquo;Mais Nate ! Si on réassigne une variable, n&#8217;est-ce
pas une mutation ?&rdquo;. Non !</p>

<h2 id="elixir-assure-la-transparence-referentielle-des-variables">Elixir assure la transparence référentielle des variables</h2>

<p>Transparence référentielle est une façon académique de dire &ldquo;quand je fais
quelque chose qui modifie une valeur, je peux toujours revenir à la valeur
originale&rdquo;. Jessica Kerr (<a href="https://twitter.com/jessitron">@jessitron</a>) appelle
cela &ldquo;données en entrée, données en sortie&rdquo; (<em>data in, data out</em>). Sous forme
de code :</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='elixir'><span class='line'><span class="n">name</span> <span class="o">=</span> <span class="s2">&quot;Nate&quot;</span>
</span><span class='line'><span class="c1"># =&gt; &quot;Nate&quot;</span>
</span><span class='line'><span class="no">String</span><span class="o">.</span><span class="n">upcase</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; &quot;NATE&quot;</span>
</span><span class='line'><span class="n">name</span>
</span><span class='line'><span class="c1"># =&gt; &quot;Nate&quot;</span>
</span></code></pre></div></figure>


<p><code>String.upcase</code> est référentiellement transparent. Il retourne une nouvelle
valeur transformée mais ne modifie pas la valeur originale. On peut comparer
cela avec <code>String#upcase!</code> en Ruby.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="nb">name</span> <span class="o">=</span> <span class="s2">&quot;Nate&quot;</span>
</span><span class='line'><span class="c1"># =&gt; &quot;Nate&quot;</span>
</span><span class='line'><span class="nb">name</span><span class="o">.</span><span class="n">upcase!</span>
</span><span class='line'><span class="c1"># =&gt; &quot;NATE&quot;</span>
</span><span class='line'><span class="nb">name</span>
</span><span class='line'><span class="c1"># =&gt; &quot;NATE&quot;</span>
</span></code></pre></div></figure>


<p><code>String#upcase!</code> <em>n&#8217;est pas</em> référentiellement transparent. Non seulement il
retourne une valeur transformée mais modifie également la valeur originale.</p>

<p>Avec Elixir, dans le contexte d&#8217;une fonction vous ne pourrez pas modifier la
valeur d&#8217;une variable.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='elixir'><span class='line'><span class="n">name</span> <span class="o">=</span> <span class="s2">&quot;Nate&quot;</span>
</span><span class='line'><span class="c1"># =&gt; &quot;Nate&quot;</span>
</span><span class='line'><span class="n">capitalize</span> <span class="o">=</span> <span class="k">fn</span><span class="p">(</span><span class="n">string</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">string</span> <span class="o">=</span> <span class="no">String</span><span class="o">.</span><span class="n">upcase</span><span class="p">(</span><span class="n">string</span><span class="p">)</span> <span class="k">end</span>
</span><span class='line'><span class="c1"># =&gt; #Function&lt;6.80484245 in :erl_eval.expr/5&gt;</span>
</span><span class='line'><span class="n">capitalize</span><span class="o">.</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; &quot;NATE&quot;</span>
</span><span class='line'><span class="n">name</span>
</span><span class='line'><span class="c1"># =&gt; &quot;Nate&quot;</span>
</span></code></pre></div></figure>


<h2 id="en-quoi-la-transparence-referentielle-est-importante">En quoi la transparence référentielle est importante ?</h2>

<p>Pour faire court, un code référentiellement transparent est simple à tester,
facile à comprendre et à rendre <em>threadsafe</em>. Si on a ceci en Ruby :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='elixir'><span class='line'><span class="n">greeting</span> <span class="o">=</span> <span class="s2">&quot;Hello&quot;</span>
</span><span class='line'><span class="n">do_something_to_string</span><span class="p">(</span><span class="n">greeting</span><span class="p">)</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">greeting</span><span class="p">)</span>
</span></code></pre></div></figure>


<p>On s&#8217;attend à ce que <code>greeting</code> ait la valeur &ldquo;Hello&rdquo; lorsque l&#8217;on appelle
<code>print</code> mais <code>do_something_to_string</code> a pu modifier la valeur de <code>greeting</code>.
D&#8217;autant plus si <code>greeting</code> est transmis un peu partout dans l&#8217;application et
passe par toutes sortes de <code>do_somethings</code>. Au moment d&#8217;afficher <code>greeting</code>, il
pourrait tout aussi bien contenir &ldquo;Game over !&rdquo;.</p>

<p>Pour en savoir plus :</p>

<ul>
<li><a href="http://confreaks.com/videos/2382-rmw2013-functional-principles-for-oo-development">Jessica Kerr’s Functional Principles (en)</a></li>
<li><a href="http://rubyrogues.com/115-rr-functional-and-object-oriented-programming-with-jessica-kerr/">Ruby Rogues Podcast: Functional and OO Programming (en)</a></li>
<li>Si vous pensez à d&#8217;autres ressources, dites le moi, je les ajouterai.</li>
</ul>


<h2 id="un-piege">Un piège&hellip;</h2>

<p>Il est possible d&#8217;assigner une nouvelle valeur à une variable en se basant sur
sa valeur actuelle. Notez bien qu&#8217;ici <code>=</code> n&#8217;est pas un opérateur d&#8217;assignation.
C&#8217;est un opérateur de test de correspondance. Lorsque l&#8217;on utilise sur une
variable, on peut choisir de tester la valeur de la variable ou nous pouvons
l&#8217;autoriser à prendre une nouvelle valeur.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='elixir'><span class='line'><span class="m">1</span> <span class="o">=</span> <span class="m">2</span> <span class="c1"># la valeur 1 ne correspond pas à la valeur 2</span>
</span><span class='line'><span class="c1"># =&gt; ** (MatchError) aucune correspondance avec : 3</span>
</span><span class='line'><span class="c1">#    :erl_eval.expr/3</span>
</span><span class='line'>
</span><span class='line'><span class="ss">:a</span> <span class="o">=</span> <span class="m">2</span> <span class="c1"># la valeur :a, un atôme (un peu comme un symbole en Ruby),</span>
</span><span class='line'>       <span class="c1"># ne correspond pas à la valeur 2</span>
</span><span class='line'><span class="c1"># =&gt; ** (MatchError) aucune correspondance avec : 3</span>
</span><span class='line'><span class="c1">#    :erl_eval.expr/3</span>
</span><span class='line'>
</span><span class='line'><span class="n">num</span> <span class="o">=</span> <span class="m">2</span> <span class="c1"># num est une variable. Nous pouvons lui assigner 2 pour établir</span>
</span><span class='line'>        <span class="c1"># une correspondance.</span>
</span><span class='line'><span class="c1"># =&gt; 2</span>
</span><span class='line'>
</span><span class='line'><span class="o">^</span><span class="n">num</span> <span class="o">=</span> <span class="m">3</span> <span class="c1"># la valeur de num (2) ne correspond pas à la valeur 3</span>
</span><span class='line'><span class="c1"># =&gt; ** (MatchError) aucune correspondance avec : 3</span>
</span><span class='line'><span class="c1">#    :erl_eval.expr/3</span>
</span><span class='line'>
</span><span class='line'><span class="n">num</span> <span class="o">=</span> <span class="m">3</span> <span class="c1"># ici on ne cherche pas de correspondance, on peut donc assigner la</span>
</span><span class='line'>        <span class="c1"># valeur 3 à num</span>
</span><span class='line'><span class="c1"># =&gt; 3</span>
</span></code></pre></div></figure>


<p>Tel que je le comprends, cela fait parti d&#8217;Elixir pour des questions pratique
et est particulièrement utile pour écrire des macros. Les puristes de la
programmation fonctionnelle vont détester ça. Si c&#8217;est votre cas, vous pouvez
lire <a href="https://groups.google.com/forum/#!searchin/elixir-lang-core/single$20assignment/elixir-lang-core/FrK7MQGuqWc/2aimbHDAAHMJ">cette discussion</a>
au sujet de la réassignation de variables dans Elixir et jeter un oeil au
commentaire de Joe Armstrong.</p>

<p>Encore une fois, cela ne change pas l&#8217;état de l&#8217;objet. Il n&#8217;y a pas d&#8217;objet dans
Elixir. <code>num</code> est un simple conteneur de données auquel vous pouvez donner une
nouvelle valeur. Lorsque vous le faites, l&#8217;ancienne valeur va être retirée du
contexte d&#8217;exécution afin de laisser la place libre pour stocker une nouvelle
valeur.</p>

<h2 id="essayez-donc-de-le-briser">Essayez donc de le briser</h2>

<p>Vous aurez tout de même beaucoup de mal à écrire une fonction qui brise la
transparence référentielle. Si vous réassignez une variable dans une fonction,
vous ne changez sa valeur que pour le contexte de cette fonction.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='elixir'><span class='line'><span class="k">defmodule</span> <span class="no">Assignment</span> <span class="k">do</span>
</span><span class='line'><span class="k">  def</span> <span class="n">change_me</span><span class="p">(</span><span class="n">string</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="n">string</span> <span class="o">=</span> <span class="m">2</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># lorsque vous compilez ce module, vous aurez un warning indiquant</span>
</span><span class='line'><span class="c1"># qu&#39;une variable de type string n&#39;est pas utilisée!</span>
</span><span class='line'>
</span><span class='line'><span class="n">greeting</span> <span class="o">=</span> <span class="s2">&quot;Hi&quot;</span>
</span><span class='line'><span class="c1"># =&gt; &quot;Hi&quot;</span>
</span><span class='line'><span class="no">Assignment</span><span class="o">.</span><span class="n">change_me</span><span class="p">(</span><span class="n">greeting</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; 2</span>
</span><span class='line'><span class="n">greeting</span>
</span><span class='line'><span class="c1"># =&gt; &quot;Hi&quot;</span>
</span></code></pre></div></figure>


<h2 id="cest-tout-pour-aujourdhui">C&#8217;est tout pour aujourd&#8217;hui</h2>

<p>Voici la fin de la partie 2. À bientôt pour la partie 3.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git est une structure de données purement fonctionnelle]]></title>
    <link href="http://vfsvp.fr/article/Git-est-une-structure-de-donnees-purement-fonctionnelle"/>
    <updated>2013-10-28T23:00:00+01:00</updated>
    <id>http://vfsvp.fr/article/Git-est-une-structure-de-donnees-purement-fonctionnelle</id>
    <content type="html"><![CDATA[<p>Source: <a href="http://www.jayway.com/2013/03/03/git-is-a-purely-functional-data-structure/">Git is a purely functional data structure de Philip Nilsson sur le blog de Jayway</a></p>

<p>Bien que les systèmes de gestion de versions décentralisés, comme Git, aient le
vent en poupe en ce moment, ils semblent toujours avoir la réputation d&#8217;être
plus complexes que leurs homologues centralisés, comme SVN. Je pense que l&#8217;une
des raisons est que l&#8217;on a tendance à expliquer Git par comparaison : lorsque tu
fait X avec SVN, tu fais Y avec Git.</p>

<p>Selon moi nous devrions plutôt présenter Git comme ce qu&#8217;il est : une structure
de données purement fonctionnelle. Devenir expert Git implique d&#8217;apprendre à
maitriser cette structure de données.</p>

<p>Si la notion de structure de données purement fonctionnelle vous est étrangère,
cela ne va pas vous être d&#8217;une grande aide. Il se trouve qu&#8217;un minimum de
connaissances sur le sujet suffit pour comprendre, nous allons donc passer
rapidement sur ce sujet avant de revenir à Git.</p>

<!-- more -->


<h2 id="notions-preliminaires">Notions préliminaires</h2>

<p>Une structure de données fonctionnelle est essentiellement une structure de
données immuable : ses valeurs ne changent jamais. Cependant, contrairement à la
<code>ReadOnlyCollection</code> de C# qui n&#8217;a pas d&#8217;opérations (insertion par exemple), les
structures de données fonctionnelles supportent les opération comme l&#8217;insertion
ou la suppression. Ces opérations sont effectuées en créant une nouvelle
structure mise à jour.</p>

<p>Par exemple, une liste classique ressemble à <code>[3,2,1]</code>. Si cette liste est
modifiable et que nous voulons insérer la valeur <code>4</code> en tête (<em>head</em>) de liste,
cette dernière ressemble maintenant à <code>[4,3,2,1]</code>. Elle a été directement
modifiée et l&#8217;ancienne valeur, <code>[3,2,1]</code> est perdue. Si quelqu&#8217;un d&#8217;autre
utilisait cette liste, il voit maintenant <code>[4,3,2,1]</code>. Si cette personne était
en pleine itération sur la liste, elle a maintenant une jolie exception.</p>

<p>Dans le modèle fonctionnel, ce genre de cas n&#8217;arrive pas. Lorsque l&#8217;on insert
<code>4</code> dans la liste, une nouvelle valeur <code>[4,3,2,1]</code> est créée, sans modifier la
liste originale. Les deux valeurs <code>[4,3,2,1]</code> et <code>[3,2,1]</code> existent et si
quelqu&#8217;un utilisait l&#8217;ancienne liste <code>[3,2,1]</code>, il a toujours accès à celle-ci.</p>

<p>Vous vous dites peut être que c&#8217;est une façon inefficace de fonctionner. Si nous
avons accès aux deux listes <code>[4,3,2,1]</code> et <code>[3,2,1]</code>, nous devons stocker ces
sept éléments en mémoire, non ? Même si nous n&#8217;avons pas besoin d&#8217;accéder à la
valeur <code>[3,2,1]</code>. En réalité, l&#8217;efficacité des structures de données
fonctionnelles dépend des opérations effectuées dessus et de comment leur
représentation interne est utilisée (tout comme les structures classiques mais
avec d&#8217;autres avantages, coûts et compromis).</p>

<p>Pour une liste (simplement chaînée), si tout ce que nous voulons est insérer de
nouveaux éléments en tête, nous pouvons le faire efficacement en stockant les
éléments comme ceci :</p>

<pre><code>  +---+    +---+    +---+    +---+
  | 4 +---&gt;+ 3 +---&gt;+ 2 +---&gt;+ 1 |
  +---+    +---+    +---+    +---+
    |        |
new list  original
</code></pre>

<p>Nous ajoutons <code>4</code> dans une nouvelle cellule contenant un lien vers le reste de
la liste. Cette valeur originale est représentée par la référence existante,
en commençant à la cellule de valeur <code>3</code>. Si quelqu&#8217;un d&#8217;autre a une référence
sur cette cellule, il ne verra jamais que la liste a été mise à jour (ce qui ne
serait pas le cas pour une liste doublement chaînée). Nous pouvons donc affirmer
avoir un accès indépendant aux deux listes, <code>[4,2,3,1]</code> et <code>[3,2,1]</code>, quand bien
même elles partagent des éléments en mémoire. Sans opération de modification
directe, aucune différence n&#8217;est perceptible.</p>

<p>Nous pourrions aller encore plus loin : Si quelqu&#8217;un souhaite insérer la valeur
<code>9</code> en tête de la liste <code>[3,2,1]</code>, il peut le faire indépendamment de notre
utilisation de celle-ci, en utilisant les mêmes éléments.</p>

<pre><code>              +---+      +---+    +---+    +---+
new list 1 -&gt; | 4 +---+-&gt;+ 3 +---&gt;+ 2 +---&gt;+ 1 |
              +---+  /   +---+    +---+    +---+
                    /      |
              +---+/    original
new list 2 -&gt; | 9 +
              +---+
</code></pre>

<p>Nous pourrions bien sûr stocker de cette façon une liste modifiable mais cela
pourrait être dangereux. Si, par exemple, nous mettions à jour la cellule <code>3</code>
dans la liste <code>[4,3,2,1]</code>, elle serait également mise à jour dans la liste
<code>[9,3,2,1]</code> ce qui pourrait ne pas être apprécié.</p>

<p>Mais… comment faire si je souhaite vraiment changer <code>3</code> en lui donnant la valeur
<code>5</code>, par exemple ? Comme nous ne pouvons pas effectuer de modification directe,
nous devons copier quelques cellules dans la liste mise à jour. Le résultat de
l&#8217;opération ressemble donc à ceci :</p>

<pre><code>                +---+    +---+
updated list -&gt; | 4 +---&gt;+ 5 +----+
                +---+    +---+     \
                                    \
                +---+    +---+    +-+-+    +---+
  new list 1 -&gt; | 4 +---&gt;+ 3 +---&gt;+ 2 +---&gt;+ 1 |
                +---+  / +---+    +---+    +---+
                      /    |
                +---+/  original
  new list 2 -&gt; | 9 +
                +---+
</code></pre>

<p>En allant vers l&#8217;arrière à partir de chaque pointeur, nous pouvons voir que ceci
représente à la fois les listes <code>[4,5,2,1]</code>, <code>[4,3,2,1]</code>, <code>[9,3,2,1]</code> et
<code>[3,2,1]</code>. Si nous voulons stocker toutes ces valeurs en même temps, cette
représentation est bien plus efficace que plusieurs listes modifiables.</p>

<p>Les structures de données purement fonctionnelles sont très utiles en
programmation multi-thread puisque une modification effectuée dans un thread
n&#8217;impactera pas les autres.</p>

<h2 id="comprendre-git">Comprendre Git</h2>

<p>Voyons maintenant quel est le rapport entre tout ceci et Git. Avec un système de
gestion de versions, ce que l&#8217;on cherche à accomplir c&#8217;est :</p>

<ul>
<li>Mettre à jour notre code avec de nouvelles versions tout en gardant les
anciennes disponibles ;</li>
<li>Travailler à plusieurs sur un même code sans que les mises à jour
n&#8217;interfèrent entre elles de façon imprévisible.</li>
</ul>


<p>Une structure de données fonctionnelle permet de :</p>

<ul>
<li>Mettre à jour la structure tout en gardant un accès aux anciennes valeurs ;</li>
<li>Mettre à jour la structure à un endroit sans interférer avec quelqu&#8217;un d&#8217;autre
mettant également la structure à jour.</li>
</ul>


<p>Si vous vous dites que les structures de données fonctionnelles sont une bonne
représentation pour un système de gestion de versions, vous êtes dans le vrai.
J&#8217;irais même plus loin en disant que Git est simplement une structure de données
purement fonctionnelle avec un client en ligne de commande permettant
d&#8217;effectuer des opérations dessus.</p>

<p>Pour compléter l&#8217;analogie, nous devons remplacer ce qui était précédemment une
suite de chiffres par des commits. Les commits Git sont des copies indépendantes
de l&#8217;état complet du code à un point donné dans le temps. Ce que jusque là nous
appelions liste est ce que l&#8217;on appelle historique en Git.</p>

<p>Soit un dépôt contenant, dans la branche <code>master</code> et dans l&#8217;ordre, les commits
A, B et C. Nous avons demandé trois fois à Git de stocker l&#8217;intégralité de
l&#8217;état de notre code.</p>

<p>Nous pouvons représenter cela sous la forme <code>[C,B,A]</code>. En réalité, chaque commit
a des meta-données, comme un message de commit, mais nous allons ignorer ce
fait pour une question de simplicité. Voici la version graphe :</p>

<pre><code>+---+    +---+    +---+
+ C +---&gt;+ B +---&gt;+ A |
+---+    +---+    +---+
  |
master
</code></pre>

<h2 id="faire-un-commit">Faire un commit</h2>

<p>Si nous créons un nouveau commit, cela revient à l&#8217;ajouter en tête de
l&#8217;historique. Git utilise même le nom <code>HEAD</code> pour référencer le commit actif.</p>

<pre><code>+---+    +---+    +---+    +---+
+ D +---&gt;+ C +---&gt;+ B +---&gt;+ A |
+---+    +---+    +---+    +---+
  |        |
master   master^
</code></pre>

<p>Lorsque Git créer un commit, il déplace le pointeur de la branche courante pour
nous et fait pointer <code>master</code> sur l&#8217;historique <code>[D,C,B,A]</code>. Nous pouvons
toujours faire référence à <code>[C,B,A]</code> en utilisant <code>master^</code>, le parent de
<code>master</code>. Si quelqu&#8217;un travaille avec cette historique, il ne verra pas nos
modifications.</p>

<h2 id="corriger-un-commit">Corriger un commit</h2>

<p>Si vous avez déjà utilisé Git, vous savez probablement que l&#8217;on peut modifier
son dernier commit grâce à <code>commit --amend</code>. Mais pouvez-vous réellement
modifier un commit ? En réalité, non. Git crée simplement un nouveau commit et
fait pointer votre branche dessus. L&#8217;ancien commit peut être retrouvé grâce à
<code>git reflog</code> et vous pouvez y faire référence via son <em>hash</em> (j&#8217;ai ici utilisé
la valeur arbitraire <code>ef4d34</code>). L&#8217;état du dépôt est donc le suivant :</p>

<pre><code>          +---+    +---+    +---+    +---+
ef4d34 -&gt; | D +--+&gt;+ C +---&gt;+ B +---&gt;+ A |
          +---+ /  +---+    +---+    +---+
               /     |
          +---+    master^
master -&gt; | E |
          +---+
</code></pre>

<h2 id="les-branches">Les branches</h2>

<p>Comme vous avez pu le voir juste avant, lorsque vous utilisez <code>commit --amend</code>,
vous créez en fait une nouvelle branche (il y a une fourche dans le graphe). La
seule différence lors de la création d&#8217;une branche est qu&#8217;un nouveau nom est
créé pour se référer aux commits. Nous pouvons même créer une branche à partir
du commit <code>ef4d34</code> grâce à la commande <code>git checkout -b branch ef4d34</code>.</p>

<pre><code>          +---+    +---+    +---+    +---+
branch -&gt; | D +--+&gt;+ C +---&gt;+ B +---&gt;+ A |
          +---+ /  +---+    +---+    +---+
               /     |
          +---+  master^
master -&gt; | E |
          +---+
</code></pre>

<p>En général, lorsque l&#8217;on crée une branche dans Git, celle-ci pointe sur le
<code>HEAD</code> courant mais dés lors que l&#8217;on voit Git comme une structure de données
fonctionnelle, rien n&#8217;empêche de créer une branche à partir de n&#8217;importe quel
commit existant.</p>

<h2 id="utiliser-rebase">Utiliser rebase</h2>

<p>Dans les exemples sur les structures de données, lorsque nous modifions une
cellule à un certain point de l&#8217;historique, nous devions copier toutes les
cellules se trouvant à la suite de celle modifiée (la cellule <code>4</code> dans notre
exemple mais il aurait pu y en avoir plus). Dans Git, c&#8217;est ce que l&#8217;on appelle
rejouer les commits et la commande permettant de le faire est nommée <code>rebase</code>.
Pour mettre à jour un ancien commit, nous ajoutons l&#8217;option <code>-i</code> pour passer en
mode <em>interactif</em>.</p>

<p>Si nous souhaitons modifier le commit <code>C</code> et changer son message, nous faisons
un checkout sur le commit <code>B</code></p>

<p>NOTE: Erreur dans le texte original B/D</p>

<pre><code>git checkout B
git rebase -i C
</code></pre>

<p>Cette commande ouvre le même éditeur que celui utilisé par Git pour les messages
de commit avec un contenu similaire à cette liste de commandes :</p>

<figure class='code'><div class="highlight"><pre><code class=''><span class='line'>pick cd3ff32 &lt;message de commit de C&gt;
</span><span class='line'>pick a65a671 &lt;message de commit de D&gt;
</span><span class='line'>
</span><span class='line'># some helpful comments from git</span></code></pre></div></figure>


<p>Si nous changeons la commande du commit <code>C</code> pour <code>edit</code>, Git nous permet de
modifier ce commit avant de rejouer les commits suivants.</p>

<figure class='code'><div class="highlight"><pre><code class=''><span class='line'>edit cd3ff32 &lt;message de commit de C&gt;
</span><span class='line'>pick a65a671 &lt;message de commit de D&gt;</span></code></pre></div></figure>


<p>Lorsque nous sauvegardons le fichier et fermons l&#8217;éditeur, Git commence une
opération de <em>rebase</em>. Il s&#8217;arrête pour nous permettre de modifier le commit
<code>C</code>.</p>

<figure class='code'><div class="highlight"><pre><code class=''><span class='line'>Stoppé à cd3ff32... &lt;message de commit de C&gt;
</span><span class='line'>Vous pouvez modifier votre commit avec
</span><span class='line'>
</span><span class='line'>        git commit --amend
</span><span class='line'>
</span><span class='line'>Une fois satisfait de vos changements, lancez
</span><span class='line'>
</span><span class='line'>        git rebase --continue</span></code></pre></div></figure>


<p>Le message est assez clair, nous pouvons modifier le commit comme bon nous
semble. Une fois cela fait nous appelons <code>commit --amend</code> pour créer le commit
mis à jour puis reprenons la liste des commandes de <em>rebase</em> grâce à <code>rebase
--continue</code>. Les autres commits seront rejoués l&#8217;un après l&#8217;autre puisque nous
avons choisi la commande <code>pick</code>. En cas de conflit, Git s&#8217;arrête et vous laisse
corriger avant de continuer. Notre dépôt ressemble maintenant à ceci :</p>

<pre><code>          +---+    +---+
rebased -&gt;| D'+---&gt;+ C'+
          +---+    +---+\
                         \
          +---+    +---+  \ +---+    +---+
branch -&gt; | D +--+&gt;+ C +---&gt;+ B +---&gt;+ A |
          +---+ /  +---+    +---+    +---+
               /     |
          +---+  master^
master -&gt; | E |
          +---+
</code></pre>

<p>Ce graphe ne doit pas vous être inconnu. J&#8217;espère que vous comprenez maintenant
pourquoi la commande <code>rebase</code> crée de nouveaux commits. Git est une structure de
données fonctionnelle et ne peut donc pas modifier un commit existant.</p>

<p>Puisque <code>rebase</code> crée une nouvelle chaîne de commits, il semble normal de
pouvoir modifier ce que cette dernière contient et c&#8217;est le cas : <code>rebase -i</code>
nous permet de réordonner, fusionner ou supprimer des commits. Nous pouvons
également en créer de nouveaux à tout moment (pour couper un commit en deux par
exemple) ou commencer à un autre point de l&#8217;historique grâce à l&#8217;option
<code>--onto</code>. Le processus classique de reporter des changements locaux &ldquo;au dessus&rdquo;
de mise à jour d&#8217;une branche distante est simplement un cas d&#8217;application plus
spécifique de la puissance de <code>rebase</code>.</p>

<h2 id="fusionner">Fusionner</h2>

<p>Nous n&#8217;avons pas parlé de la fusion de commits (merging). Git nous permet de
fusionner deux branches en une.</p>

<pre><code>        +---+
      --+ X |
+---+/  +---+
| M |
+---+\  +---+
      --+ Y |
        +---+
</code></pre>

<p>Fusionner ajoute un peu de complexité à notre modèle. Notre historique n&#8217;est
plus vraiment un arbre, c&#8217;est un graphe acyclique. En réalité, cela ne change
pas grand chose mais il est amusant de noter que <code>rebase</code>, qui a la réputation
d&#8217;être plus complexe, introduit moins de complications conceptuelles que
<code>merge</code>.</p>

<p>Rebase peut se voir comme l&#8217;application de nouveaux commits dans une nouvelle
direction. Merge est une opération fondamentalement différente. Une structure de
données dans laquelle il est possible de combiner deux cellules en une a un
nom : c&#8217;est ce qu&#8217;on appelle une structure de données persistante confluante.
Une autre appellation des structures de données fonctionnelles est
structures de données persistantes. J&#8217;ai préféré éviter ce terme pour ne pas
entrainer de confusion avec la notion de stockage sur médias persistants comme
un disque dur par exemple.</p>

<h2 id="conclusion">Conclusion</h2>

<p>Git peut être assez justement perçu comme une simple structure de données
fonctionnelle. Plutôt que de présenter Git comme un outil gestion de versions, nous pouvons voir la gestion de versions comme une résultante de l&#8217;utilisation
de cette structure de données. Je pense qu&#8217;expliquer Git de cette façon exprime
mieux la simplicité et la puissance de Git que de comparer son fonctionnement
avec celui des systèmes centralisés.</p>

<p>Lorsque l&#8217;on voit cela sous cet angle, je trouve que finalement Git est bien
plus simple que SVN par exemple. La seule raison pour laquelle Git peut être
perçu comme plus complexe est que cette simplicité nous permet d&#8217;implémenter des
workflows plus intéressants.</p>

<p>Si vous avez toujours trouvé Git intimidant, gardez en mémoire sa structure
simple et le fait que dans toute structure de données fonctionnelle, rien n&#8217;est
jamais réellement perdu et peut être retrouvé (regardez <code>reflog</code>).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elixir pour les rubyists (partie 1)]]></title>
    <link href="http://vfsvp.fr/article/elixir-pour-les-rubyists-1"/>
    <updated>2013-10-27T18:30:00+01:00</updated>
    <id>http://vfsvp.fr/article/elixir-pour-les-rubyists-1</id>
    <content type="html"><![CDATA[<p>Source: <a href="http://www.natescottwest.com/blog/2013/09/26/elixir-for-rubyists/">Elixir for Rubyists part 1 par Nate West</a></p>

<p>Elixir est mon nouveau langage préféré. Cet article est le premier d&#8217;une série
de longueur indéterminée sur Elixir. En tant que rubyist, la syntaxe d&#8217;Elixir va
vous sembler familière. Je vais donc vous montrer beaucoup de code pour
vous expliquer comment il marche. Elixir est fonctionnel et amusant
(FUNctional).</p>

<p>Elixir est un langage fonctionnel qui tourne sur la VM Erlang mais ressemble
beaucoup à Ruby.</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='elixir'><span class='line'><span class="m">2</span> <span class="o">+</span> <span class="m">2</span>
</span><span class='line'><span class="c1"># =&gt; 4</span>
</span><span class='line'>
</span><span class='line'><span class="no">IO</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;Hello!&quot;</span>
</span><span class='line'><span class="c1"># =&gt; Hello!</span>
</span><span class='line'><span class="c1">#    :ok</span>
</span><span class='line'>
</span><span class='line'><span class="no">String</span><span class="o">.</span><span class="n">downcase</span><span class="p">(</span><span class="s2">&quot;JE NE CRIE PAS&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; &quot;je ne crie pas&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">defmodule</span> <span class="no">Numbers</span> <span class="k">do</span>
</span><span class='line'><span class="k">  def</span> <span class="n">add_to</span><span class="p">(</span><span class="n">num</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'><span class="k">    if</span> <span class="n">is_number</span><span class="p">(</span><span class="n">num</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'><span class="k">      </span><span class="n">num</span> <span class="o">+</span> <span class="m">2</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="k">raise</span><span class="p">(</span><span class="no">ArgumenError</span><span class="p">,</span> <span class="ss">message:</span> <span class="s2">&quot;L&#39;argument doit etre un nombre&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Numbers</span><span class="o">.</span><span class="n">add_to</span><span class="p">(</span><span class="m">4</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; 6</span>
</span><span class='line'><span class="no">Numbers</span><span class="o">.</span><span class="n">add_to</span><span class="p">(</span><span class="s2">&quot;Nate&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; ** (ArgumenError) L&#39;argument doit etre un nombre</span>
</span></code></pre></div></figure>


<p>Elixir utilise la détection par motif (<em>pattern matching</em>) pour effectuer des
comparaisons et assigner des valeurs aux variables.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='elixir'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="m">2</span>
</span><span class='line'><span class="c1"># =&gt; 2</span>
</span><span class='line'>
</span><span class='line'><span class="m">2</span> <span class="o">=</span> <span class="n">a</span>
</span><span class='line'><span class="c1"># =&gt; 2</span>
</span><span class='line'>
</span><span class='line'><span class="p">{</span> <span class="n">success</span><span class="p">,</span> <span class="n">string</span> <span class="p">}</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">:ok</span><span class="p">,</span> <span class="s2">&quot;Hey Joe, tu sais quoi ?&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="c1"># =&gt; {:ok, &quot;Hey Joe, tu sais quoi ?&quot;}</span>
</span><span class='line'><span class="n">success</span>
</span><span class='line'><span class="c1"># =&gt; :ok</span>
</span><span class='line'><span class="n">string</span>
</span><span class='line'><span class="c1"># =&gt; &quot;Hey Joe, tu sais quoi ?&quot;</span>
</span></code></pre></div></figure>


<p>Elixir est fonctionnel, les variables sont donc immuables. Cependant,
contrairement à Erlang, ces dernières ne sont pas limitées à une seule
assignation. Si vous voulez détecter le motif de la valeur d&#8217;une variable, vous
devez utiliser un circonflexe <code>^</code>. Sans le circonflexe vous pouvez assigner une
nouvelle valeur à la variable.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='elixir'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="m">2</span>
</span><span class='line'><span class="c1"># =&gt; 2</span>
</span><span class='line'><span class="o">^</span><span class="n">a</span> <span class="o">=</span> <span class="m">3</span>
</span><span class='line'><span class="c1"># =&gt; ** (MatchError) aucune correspondance avec : 3</span>
</span><span class='line'><span class="c1">#    :erl_eval.expr/3</span>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="m">3</span>
</span><span class='line'><span class="c1"># =&gt; 3</span>
</span></code></pre></div></figure>


<p>Comme tout langage fonctionnel, Elixir traite les fonctions comme des citoyens
de premier ordre. Vous pouvez assigner une fonction à une variable pour une
évaluation différée. Notez l&#8217;interpolation de chaîne dans l&#8217;exemple suivant,
une autre ressemblance à Ruby.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='elixir'><span class='line'><span class="n">greeter</span> <span class="o">=</span> <span class="k">fn</span> <span class="p">(</span><span class="n">name</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="no">IO</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;Hello </span><span class="si">#{</span><span class="n">name</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">end</span>
</span><span class='line'><span class="c1"># =&gt; #Function&lt;6.80484245 in :erl_eval.expr/5&gt;</span>
</span><span class='line'><span class="n">greeter</span><span class="o">.</span><span class="p">(</span><span class="s2">&quot;Nate&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; Hello Nate</span>
</span><span class='line'><span class="c1">#    :ok</span>
</span></code></pre></div></figure>


<p>Vous pouvez écrire des fonctions qui retournent des fonctions.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='elixir'><span class='line'><span class="k">defmodule</span> <span class="no">FunctionExamples</span> <span class="k">do</span>
</span><span class='line'><span class="k">  def</span> <span class="n">build_greeter</span><span class="p">(</span><span class="n">kind</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'><span class="k">    case</span> <span class="n">kind</span> <span class="k">do</span>
</span><span class='line'><span class="k">      </span><span class="ss">:hello</span> <span class="o">-&gt;</span> <span class="k">fn</span> <span class="p">(</span><span class="n">name</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="s2">&quot;Coucou, </span><span class="si">#{</span><span class="n">name</span><span class="si">}</span><span class="s2">!&quot;</span> <span class="k">end</span>
</span><span class='line'>      <span class="ss">:goodbye</span> <span class="o">-&gt;</span> <span class="k">fn</span> <span class="p">(</span><span class="n">name</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="s2">&quot;A plus, </span><span class="si">#{</span><span class="n">name</span><span class="si">}</span><span class="s2">!&quot;</span> <span class="k">end</span>
</span><span class='line'>      <span class="n">_</span> <span class="o">-&gt;</span> <span class="k">fn</span> <span class="p">(</span><span class="n">name</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="s2">&quot;Je ne sais pas quoi te dire, </span><span class="si">#{</span><span class="n">name</span><span class="si">}</span><span class="s2">.&quot;</span> <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">say_hello</span> <span class="o">=</span> <span class="no">FunctionExamples</span><span class="o">.</span><span class="n">build_greeter</span><span class="p">(</span><span class="ss">:hello</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; #Function&lt;0.63189797 in FunctionExamples.build_greeter/1&gt;</span>
</span><span class='line'><span class="n">say_hello</span><span class="o">.</span><span class="p">(</span><span class="s2">&quot;Nate&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; Coucou, Nate!</span>
</span><span class='line'><span class="c1">#    :ok</span>
</span><span class='line'>
</span><span class='line'><span class="n">wat</span> <span class="o">=</span> <span class="no">FunctionExamples</span><span class="o">.</span><span class="n">build_greeter</span><span class="p">(</span><span class="ss">:something_else</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; #Function&lt;2.63189797 in FunctionExamples.build_greeter/1&gt;</span>
</span><span class='line'><span class="n">wat</span><span class="o">.</span><span class="p">(</span><span class="s2">&quot;Nate&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; &quot;Je ne sais pas quoi te dire, Nate.&quot;</span>
</span><span class='line'><span class="c1">#    :ok</span>
</span></code></pre></div></figure>


<p>Comme dans d&#8217;autres langages fonctionnels, plutôt que de reposer sur des
boucles, Elixir utilise énormément la récursivité. Cela dit, le module <code>Enum</code>
fournit quelques fonctions bien connues des rubyists, comme <code>each</code> par exemple.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='elixir'><span class='line'><span class="no">Enum</span><span class="o">.</span><span class="n">each</span><span class="p">([</span><span class="s2">&quot;Joe&quot;</span><span class="p">,</span> <span class="s2">&quot;Matz&quot;</span><span class="p">,</span> <span class="s2">&quot;Jose&quot;</span><span class="p">],</span> <span class="k">fn</span> <span class="p">(</span><span class="n">name</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="no">IO</span><span class="o">.</span><span class="n">puts</span><span class="p">(</span><span class="n">name</span><span class="p">)</span> <span class="k">end</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; Joe</span>
</span><span class='line'><span class="c1"># =&gt; Matz</span>
</span><span class='line'><span class="c1"># =&gt; Jose</span>
</span><span class='line'><span class="c1"># =&gt; :ok</span>
</span><span class='line'>
</span><span class='line'><span class="k">defmodule</span> <span class="no">RecursionExamples</span> <span class="k">do</span>
</span><span class='line'><span class="k">  def</span> <span class="n">recurse</span><span class="p">([])</span> <span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="ss">:ok</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">recurse</span><span class="p">([</span><span class="n">head</span><span class="o">|</span><span class="n">tail</span><span class="p">])</span> <span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="no">IO</span><span class="o">.</span><span class="n">puts</span> <span class="n">head</span>
</span><span class='line'>    <span class="n">recurse</span><span class="p">(</span><span class="n">tail</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">RecursionExamples</span><span class="o">.</span><span class="n">recurse</span><span class="p">([</span><span class="s2">&quot;Joe&quot;</span><span class="p">,</span> <span class="s2">&quot;Matz&quot;</span><span class="p">,</span> <span class="s2">&quot;Jose&quot;</span><span class="p">])</span>
</span><span class='line'><span class="c1"># =&gt; Joe</span>
</span><span class='line'><span class="c1"># =&gt; Matz</span>
</span><span class='line'><span class="c1"># =&gt; Jose</span>
</span><span class='line'><span class="c1"># =&gt; :ok</span>
</span></code></pre></div></figure>


<p>C&#8217;est tout pour cette première partie. À bientôt pour <a href="http://vfsvp.fr/article/elixir-pour-les-rubyists-2">la deuxième</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[6 façons de réduire la souffrance due aux tests fonctionnels avec Rails]]></title>
    <link href="http://vfsvp.fr/article/6-facons-de-reduire-la-souffrance-des-tests-fonctionnels-avec-Rails"/>
    <updated>2013-10-12T13:00:00+02:00</updated>
    <id>http://vfsvp.fr/article/6-facons-de-reduire-la-souffrance-des-tests-fonctionnels-avec-Rails</id>
    <content type="html"><![CDATA[<p>Source: <a href="http://gaslight.co/blog/6-ways-to-remove-pain-from-feature-testing-in-ruby-on-rails">6 Ways to Remove Pain From Feature Testing in Ruby on Rails de Mitch Lloyd</a></p>

<p>L&#8217;écriture des tests fonctionnels a été une des parts les plus douloureuses de
mon travail avec Ruby on Rails. Mais aujourd&#8217;hui c&#8217;est quelque chose que
j&#8217;apprécie et voici pourquoi :</p>

<h2 id="1-je-nutilise-pas-cucumber">1. Je n&#8217;utilise pas Cucumber</h2>

<p><strong>Attention:</strong> Le point de vue exprimé dans le paragraphe suivant ne reflète pas
forcement celui de l&#8217;équipe ou des partenaires de Gaslight Software, LLC.</p>

<p>Si vous avez installé Cucumber, supprimez-le. Les tests sont déjà assez
difficiles sans que l&#8217;on ait besoin de transformer le langage naturel en code
Ruby.</p>

<!-- more -->


<p>J&#8217;utilise :</p>

<ul>
<li>Rspec &ndash; DSL spécialisé dans les tests</li>
<li>FactoryGirl &ndash; Constructeur de modèles</li>
<li>Capybara &ndash; DOM Dominator</li>
<li>Database Cleaner - Nettoyeur de bases de données</li>
<li>Spring - Accélérateur de démarrage</li>
</ul>


<p>Et j&#8217;en suis très content. Écrivons une spec.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="n">feature</span> <span class="s1">&#39;Navigating through workpapers&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span> <span class="p">{</span> <span class="n">create</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:audit</span><span class="p">)</span> <span class="p">{</span> <span class="n">create</span><span class="p">(</span><span class="ss">:audit</span><span class="p">,</span> <span class="ss">users</span><span class="p">:</span> <span class="o">[</span><span class="n">user</span><span class="o">]</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">scenario</span> <span class="s2">&quot;User sees workpapers within an audit&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">workpaper</span> <span class="o">=</span> <span class="n">create</span><span class="p">(</span><span class="ss">:workpaper</span><span class="p">,</span> <span class="ss">audit</span><span class="p">:</span> <span class="n">audit</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">visit</span> <span class="s1">&#39;/&#39;</span>
</span><span class='line'>    <span class="n">fill_in</span> <span class="s1">&#39;email&#39;</span><span class="p">,</span> <span class="ss">with</span><span class="p">:</span> <span class="n">user</span><span class="o">.</span><span class="n">email</span>
</span><span class='line'>    <span class="n">fill_in</span> <span class="s1">&#39;password&#39;</span><span class="p">,</span> <span class="ss">with</span><span class="p">:</span> <span class="s1">&#39;password&#39;</span>
</span><span class='line'>    <span class="n">click_on</span> <span class="s1">&#39;Log In&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">find</span><span class="p">(</span><span class="s1">&#39;#audit-selector&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">select</span> <span class="n">audit</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">have_css?</span><span class="p">(</span><span class="s1">&#39;.workpaper&#39;</span><span class="p">,</span> <span class="ss">text</span><span class="p">:</span> <span class="n">workpaper</span><span class="o">.</span><span class="n">name</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></div></figure>


<p>Tout cela est plutôt pas mal mais une <em>feature</em> un peu plus complexe deviendrait
vite illisible. La logique de connexion va immanquablement être dupliquée entre
plusieurs tests. Même cette <em>feature</em> n&#8217;est pas aussi lisible que je le
souhaiterais.</p>

<h2 id="2-utilisez-des-page-objects">2. Utilisez des <em>Page Objects</em></h2>

<p>Les sélecteurs Capybara ont une forte probabilité de casser au fur et à mesure
que le développement avance. Le responsable du contenu décide que le bouton du
formulaire de connexion va maintenant indiquer &ldquo;Connectez-vous à un monde où
tout est possible&rdquo;, vous devez maintenant corriger tous vos tests.</p>

<p>Les <em>page objects</em> sont des interfaces spécifiques à votre DOM. Lorsque le HTML
change, vous saurez exactement où corriger cela dans vos tests.</p>

<p>Voici un <em>page objet</em> &ldquo;page de connexion&#8221; :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">LoginPage</span>
</span><span class='line'>  <span class="kp">include</span> <span class="ss">Capybara</span><span class="p">:</span><span class="ss">:DSL</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">visit_page</span>
</span><span class='line'>    <span class="n">visit</span> <span class="s1">&#39;/&#39;</span>
</span><span class='line'>    <span class="nb">self</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">login</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
</span><span class='line'>    <span class="n">fill_in</span> <span class="s1">&#39;email&#39;</span><span class="p">,</span> <span class="ss">with</span><span class="p">:</span> <span class="n">user</span><span class="o">.</span><span class="n">email</span>
</span><span class='line'>    <span class="n">fill_in</span> <span class="s1">&#39;password&#39;</span><span class="p">,</span> <span class="ss">with</span><span class="p">:</span> <span class="s1">&#39;password&#39;</span>
</span><span class='line'>    <span class="n">click_on</span> <span class="s1">&#39;Log In&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></div></figure>


<p>Voici un autre <em>page object</em> &ldquo;index des documents&#8221; :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">WorkpaperIndexPage</span>
</span><span class='line'>  <span class="kp">include</span> <span class="ss">Capybara</span><span class="p">:</span><span class="ss">:DSL</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">select_audit</span><span class="p">(</span><span class="n">audit</span><span class="p">)</span>
</span><span class='line'>    <span class="n">find</span><span class="p">(</span><span class="s1">&#39;#audit-selector&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">select</span> <span class="n">audit</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">has_workpaper?</span><span class="p">(</span><span class="n">workpaper</span><span class="p">)</span>
</span><span class='line'>    <span class="n">has_css?</span><span class="p">(</span><span class="s1">&#39;.workpaper&#39;</span><span class="p">,</span> <span class="ss">text</span><span class="p">:</span> <span class="n">workpaper</span><span class="o">.</span><span class="n">name</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></div></figure>


<p>Et voici maintenant un test utilisant ces <em>page objects</em> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="n">feature</span> <span class="s1">&#39;Navigating through workpapers&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span> <span class="p">{</span> <span class="n">create</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:audit</span><span class="p">)</span> <span class="p">{</span> <span class="n">create</span><span class="p">(</span><span class="ss">:audit</span><span class="p">,</span> <span class="ss">users</span><span class="p">:</span> <span class="o">[</span><span class="n">user</span><span class="o">]</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:login_page</span><span class="p">)</span> <span class="p">{</span> <span class="no">LoginPage</span><span class="o">.</span><span class="n">new</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:workpaper_page</span><span class="p">)</span> <span class="p">{</span> <span class="no">WorkpaperIndexPage</span><span class="o">.</span><span class="n">new</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">scenario</span> <span class="s2">&quot;User sees workpapers within an audit&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">workpaper</span> <span class="o">=</span> <span class="n">create</span><span class="p">(</span><span class="ss">:workpaper</span><span class="p">,</span> <span class="ss">audit</span><span class="p">:</span> <span class="n">audit</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">login_page</span><span class="o">.</span><span class="n">visit_page</span><span class="o">.</span><span class="n">login</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
</span><span class='line'>    <span class="n">workpaper_page</span><span class="o">.</span><span class="n">select</span><span class="p">(</span><span class="n">audit</span><span class="p">)</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">workpaper_page</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">have_workpaper</span><span class="p">(</span><span class="n">workpaper</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></div></figure>


<p>Considérons maintenant que quelqu&#8217;un modifie sans arrêt ce bouton de connexion.
Vous avez simplement à modifier <code>LoginPage</code> et utiliser un ID ou une entrée I18n
(ce qui aurait été une bonne idée dés le départ). Vous n&#8217;avez à vous inquiéter
d&#8217;aucun autre test, tout ce qui concerne cette page est contenu dans ce <em>page
object</em>.</p>

<p>Ces objets sont assez simples mais peuvent tout à fait grossir pour fournir des
fonctionnalités supplémentaires comme la vérification d&#8217;erreurs au fur et à
mesure que l&#8217;utilisateur au travers des pages (ou sections) du site. Le retour
sur investissement des <em>page objects</em> est si rapide que j&#8217;utilise toujours ce
type d&#8217;objet dans mes tests fonctionnels. De la même façon que je n&#8217;écris jamais
de SQL dans mes vues Rails, je n&#8217;accède pas au DOM depuis un test fonctionnel
sans <em>page object</em>.</p>

<h2 id="3-creer-des-messages-derreur-utiles">3. Créer des messages d&#8217;erreur utiles</h2>

<p>Un test fonctionnel qui échoue peut être difficile à diagnostiquer. Mettons que
vous utilisez un <em>page object</em> comme ceci :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="n">expect</span><span class="p">(</span><span class="n">workpaper_page</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">have_one_workpaper</span><span class="p">(</span><span class="n">workpaper</span><span class="p">)</span>
</span></code></pre></div></figure>


<pre><code>Failure/Error: expect(workpaper_page).to have_one_workpaper(workpaper)
  expected #has_one_workpaper?(workpaper) to return true, got false
</code></pre>

<p>L&#8217;erreur est lisible mais il serait plus facile de savoir si elle est provoquée
par l&#8217;absence du document ou si la présence d&#8217;autres documents.</p>

<p>En général, je lève une exception lorsque j&#8217;appelle ce genre de prédicat sur
un <em>page object</em>.</p>

<pre><code>Failure/Error: expect(workpaper_page).to have_one_workpaper(workpaper)
  PageExpectationNotMetError:
    expected one workpaper called "My Sweet Workpaper", but the following
    workpapers were on the page:
      * "Bogus Workpaper"
      * "My Sweet Workpaper"
</code></pre>

<p>J&#8217;utilise cette technique avec modération et je cherche toujours une approche
plus élégante. Cela me donne tout de même des messages d&#8217;erreur plus précis et
m&#8217;épargne quelques aller-retours avec le navigateur. Faites moi signe si vous
utilisez une autre technique de retour d&#8217;erreur dans vos tests.</p>

<h2 id="4-embrassez-les-tests-asynchrones">4. Embrassez les tests asynchrones</h2>

<p>Une grande part de la frustration relative aux tests automatisés dans un
navigateur est due aux assertions qui doivent attendre. Ajouter un <code>sleep</code> à vos
tests est passable si vous pensez que l&#8217;un de vos tests a un souci de timing
mais un <code>sleep</code> ne devrait jamais se trouver dans votre code de test final.</p>

<p>Les tests clignotants (ceux qui échouent de façon intermittente) tuent la
confiance que vous avez envers votre suite de tests. Ils devraient être corrigés
ou supprimés.</p>

<p>En général, je conseille surtout de bien apprendre l&#8217;API de Capybara. Voici
quelques pointeurs :</p>

<ul>
<li><code>#all</code> n&#8217;attend pas, ce n&#8217;est dont probablement pas le <em>matcher</em> que vous
cherchez ;</li>
<li>La méthode <code>#has_css?</code> peut prendre un compteur en paramètre de façon à
indiquer combien d&#8217;éléments vous voulez attendre ;</li>
<li>Écrire un test comme <code>expect(page).to_not have_css('.post')</code> est, en général,
une mauvaise idée. Ce matcher attend l&#8217;apparition d&#8217;éléments <code>.post</code> pour
passer ce qui peut engendrer un certain ralentissement. Dans ce genre de cas,
il est préférable d&#8217;utiliser <code>expect(page).to have_no_css('.post')</code> qui
passera immédiatement si les éléments sont absents de la page ou attendra
leur disparition s&#8217;ils sont présents. Dans ce dernier cas, il vaut mieux
s&#8217;assurer de leur présence au préalable.</li>
</ul>


<p>Il peut arriver que vous souhaitiez attendre que quelque chose se produise en
dehors de Capybara. Pour cela, <a href="https://gist.github.com/mattwynne/1228927">ce helper</a>
<code>eventually</code> est très pratique :</p>

<p>Le code suivant attend que le document soit <em>awesome</em> et échoue si ce n&#8217;est pas le cas après deux secondes.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="n">eventually</span> <span class="p">{</span> <span class="n">expect</span><span class="p">(</span><span class="n">workpaper</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be_awesome</span> <span class="p">}</span>
</span></code></pre></div></figure>


<p>Quand pourriez-vous avoir besoin de ce type d&#8217;assertion en dehors de Capybara ?
Lisez la suite…</p>

<h2 id="5-prenez-la-construction-de-donnees-au-serieux">5. Prenez la construction de données au sérieux</h2>

<p>Je me souviens avoir entendu un mantra pour les tests fonctionnels qui disait
&ldquo;Tout faire du point de vue de l&#8217;utilisateur&rdquo;. Ce conseil visait à l&#8217;origine à
décourager les testeurs de manipuler les données directement dans les tests
fonctionnels. Je peux vous assurer que c&#8217;était un mauvais conseil. Il est juste
impensable d&#8217;inscrire un utilisateur et de passer au travers de vingt autres
étapes simplement pour le faire cliquer sur un bouton.</p>

<p>J&#8217;utilise beaucoup FactoryGirl pour mettre en place mes données de test. Cela
signifie que j&#8217;ai des factories permettant de générer des objets complexes.
Voici, par exemple, comment faire un document avec un workflow ayant des étapes
assignées à certains utilisateurs appelés <code>preparers</code> et <code>reviewers</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="no">FactoryGirl</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:workpaper</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">sequence</span><span class="p">(</span><span class="ss">:name</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">n</span><span class="o">|</span> <span class="s2">&quot;workpaper </span><span class="si">#{</span><span class="n">n</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">factory</span> <span class="ss">:assigned_workpaper</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">ignore</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">preparer</span> <span class="p">{</span> <span class="n">create</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>        <span class="n">reviewer</span> <span class="p">{</span> <span class="n">create</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">after</span><span class="p">(</span><span class="ss">:create</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">workpaper</span><span class="p">,</span> <span class="n">evaluator</span><span class="o">|</span>
</span><span class='line'>        <span class="n">create</span><span class="p">(</span><span class="ss">:assigned_workflow</span><span class="p">,</span> <span class="ss">workpaper</span><span class="p">:</span> <span class="n">workpaper</span><span class="p">,</span> <span class="ss">preparer</span><span class="p">:</span> <span class="n">evaluator</span><span class="o">.</span><span class="n">preparer</span><span class="p">,</span> <span class="ss">reviewer</span><span class="p">:</span> <span class="n">evaluator</span><span class="o">.</span><span class="n">reviewer</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:workflow</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">factory</span> <span class="ss">:assigned_workflow</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">ignore</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">preparer</span> <span class="p">{</span> <span class="n">create</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>        <span class="n">reviewer</span> <span class="kp">false</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">after</span><span class="p">(</span><span class="ss">:create</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">workflow</span><span class="p">,</span> <span class="n">evaluator</span><span class="o">|</span>
</span><span class='line'>        <span class="n">create</span><span class="p">(</span><span class="ss">:step</span><span class="p">,</span> <span class="ss">workflow</span><span class="p">:</span> <span class="n">workflow</span><span class="p">,</span> <span class="ss">user</span><span class="p">:</span> <span class="n">evaluator</span><span class="o">.</span><span class="n">preparer</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="n">evaluator</span><span class="o">.</span><span class="n">reviewer</span>
</span><span class='line'>          <span class="n">create</span><span class="p">(</span><span class="ss">:step</span><span class="p">,</span> <span class="ss">workflow</span><span class="p">:</span> <span class="n">workflow</span><span class="p">,</span> <span class="ss">user</span><span class="p">:</span> <span class="n">evaluator</span><span class="o">.</span><span class="n">reviewer</span><span class="p">)</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:step</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></div></figure>


<p>Cela me permet de créer de façon déclarative des objets spécifiques à mes tests.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="n">create</span><span class="p">(</span><span class="ss">:assigned_workpaper</span><span class="p">,</span> <span class="ss">preparer</span><span class="p">:</span> <span class="n">first_user</span><span class="p">,</span> <span class="ss">reviewer</span><span class="p">:</span> <span class="n">second_user</span><span class="p">)</span>
</span></code></pre></div></figure>


<p>Je crée toujours des instances de mes modèles via FactoryGirl dans mes tests
fonctionnels. Je suis fan de FactoryGirl mais je pense qu&#8217;il est possible de
faire encore mieux en ce qui concerne la construction de données complexes comme
celles-ci. Quel que soit l&#8217;outil utilisé, la mise en place des données de test
doit toujours être lisible et facilement exploitable.</p>

<p>Il est non seulement acceptable de mettre en place des données avant de
commencer vos tests mais il est également acceptable de vérifier les effets de
bord qui ne sont pas nécessairement visibles par l&#8217;utilisateur. Dans le monde
des applications en client riche par exemple, voir quelque chose à l&#8217;écran ne
signifie pas forcement que tout a été sauvegardé en base de données.</p>

<p>Tout comme nous avons des helpers pour construire nos données, nous devrions
avoir des helpers pour les inspecter. Ce test va s&#8217;assurer que le <em>preparer</em>
d&#8217;un document a été sauvegardé en base de données :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="n">eventually</span> <span class="p">{</span> <span class="n">preparer_for</span><span class="p">(</span><span class="n">workpaper</span><span class="p">)</span><span class="o">.</span><span class="n">should</span> <span class="n">be</span><span class="p">(</span><span class="n">preparer</span><span class="p">)</span> <span class="p">}</span>
</span></code></pre></div></figure>


<h2 id="6-creez-moins-de-tests-affinez-ceux-existant">6. Créez moins de tests, affinez ceux existant</h2>

<p>Lorsque j&#8217;ai commencé à écrire des tests fonctionnels avec Rails, on m&#8217;a donné
le conseil suivant &ldquo;chaque test doit contenir une action et une assertion&rdquo;. J&#8217;ai
donc travaillé comme ceci :</p>

<ul>
<li>Écrire un scénario cucumber pour une fonctionnalité</li>
<li>Faire fonctionner le code</li>
<li>Écrire un scénario cucumber pour un autre aspect de la fonctionnalité</li>
<li>Faire fonctionner le code</li>
</ul>


<p>C&#8217;est une bonne méthodologie pour les tests unitaires mais c&#8217;est une mauvaise
idée en ce qui concerne les tests fonctionnels.</p>

<p>Prenons le test suivant :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="n">scenario</span> <span class="s2">&quot;assigning a reviewer to a workpaper&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">user_visits_workpaper</span><span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="n">workpaper</span><span class="p">)</span>
</span><span class='line'>  <span class="n">ui</span><span class="o">.</span><span class="n">begin_assigning_reviewer</span>
</span><span class='line'>  <span class="n">ui</span><span class="o">.</span><span class="n">assign_work_to</span><span class="p">(</span><span class="n">reviewer</span><span class="p">)</span>
</span><span class='line'>  <span class="n">eventually</span> <span class="p">{</span> <span class="n">expect</span><span class="p">(</span><span class="n">reviewer_for</span> <span class="n">workpaper</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span><span class="p">(</span><span class="n">other_tester</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></div></figure>


<p>Lorsque l&#8217;on appelle <code>ui.begin_assigning_reviewer</code> une boite de dialogue
s&#8217;ouvre pour permettre à l&#8217;utilisateur de choisir qui qui sera le <code>reviewer</code>.
Cette fonctionnalité marche. Très bien.</p>

<p>Je veux maintenant m&#8217;assurer que le seuls les utilisateurs ayant le droit de
faire des relectures soient listés. Plutôt que de créer un nouveau test, je vais
affiner celui que je viens d&#8217;écrire :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="n">scenario</span> <span class="s2">&quot;assigning a reviewer to a workpaper&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">user_visits_workpaper</span><span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="n">workpaper</span><span class="p">)</span>
</span><span class='line'>  <span class="n">ui</span><span class="o">.</span><span class="n">begin_assigning_reviewer</span>
</span><span class='line'>  <span class="n">expect</span><span class="p">(</span><span class="n">ui</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">have_excluded_user</span><span class="p">(</span><span class="n">non_reviewer</span><span class="p">)</span>
</span><span class='line'>  <span class="n">ui</span><span class="o">.</span><span class="n">assign_work_to</span><span class="p">(</span><span class="n">reviewer</span><span class="p">)</span>
</span><span class='line'>  <span class="n">eventually</span> <span class="p">{</span> <span class="n">expect</span><span class="p">(</span><span class="n">reviewer_for</span> <span class="n">workpaper</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span><span class="p">(</span><span class="n">other_tester</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></div></figure>


<p>Je n&#8217;utiliserais bien sûr pas cette technique pour les tests unitaires mais elle
est efficace pour les tests fonctionnels dont le but est de guider votre
progression et détecter les régressions.</p>

<h2 id="mais-qui-teste-vos-tests">Mais qui teste vos tests ?</h2>

<p>Lorsque vos tests commencent à contenir beaucoup de logique, quelqu&#8217;un va finir
par vous dire &ldquo;Mais qui teste vos tests ?&rdquo; pour vous signifier que vos tests
sont trop compliqués, trop complexes. Votre code de production teste vos tests.
Ce n&#8217;est pas pour autant une excuse pour écrire de mauvais tests ou des tests
illisibles.</p>

<p>Les outils et techniques cités ci-dessus vont changer au fur et à mesure que le
temps passe mais j&#8217;ai augmenté ma sensibilité aux mauvais tests fonctionnels
pour toujours. Refactorez de façon agressive, concevez intelligemment et aimez
vos tests fonctionnels.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les méthodes pack et unpack en Ruby]]></title>
    <link href="http://vfsvp.fr/article/les-methodes-pack-et-unpack-en-ruby"/>
    <updated>2013-10-07T10:00:00+02:00</updated>
    <id>http://vfsvp.fr/article/les-methodes-pack-et-unpack-en-ruby</id>
    <content type="html"><![CDATA[<p>Source: <a href="http://blog.bigbinary.com/2011/07/20/ruby-pack-unpack.html">Ruby Pack Unpack de Neeraj Singh sur le blog de BigBinary</a></p>

<p>Le langage C permet aux développeurs d&#8217;accéder directement à la mémoire où sont
stockées les variables. Ruby ne le permet pas. Il est cependant des cas dans
lesquels on peut avoir besoin d&#8217;accéder aux bits et octets contenus dans cette
mémoire tout en travaillant avec Ruby. Ce dernier fournit deux méthods <code>pack</code> et
<code>unpack</code> pour cela.</p>

<p>Voici un exemple :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="s1">&#39;A&#39;</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s1">&#39;b*&#39;</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; [&quot;10000010&quot;]</span>
</span></code></pre></div></figure>




<!-- more -->


<p>Dans le cas ci-dessus, <code>'A'</code> est une chaîne de caractères stockée et, grâce à
<code>unpack</code> je tente d&#8217;en lire la valeur binaire. La table ASCII indique que la
valeur de <code>'A'</code> est 65 et la représentation binaire de 65 est <code>10000010</code>.</p>

<p>Un autre exemple :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="s1">&#39;A&#39;</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s1">&#39;B*&#39;</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; [&quot;01000001&quot;]</span>
</span></code></pre></div></figure>


<p>Notez bien le changement de résultat entre les deux exemples. Quelle est la
différence entre <code>b*</code> et <code>B*</code> ? Pour le comprendre nous devons d&#8217;abord parler
de <em>MSB</em> et <em>LSB</em>.</p>

<h2 id="bit-de-poids-fort-et-bit-de-poids-faible">Bit de poids fort et bit de poids faible</h2>

<p>Tous les bits ne sont pas créés égaux. <code>'C'</code> a la valeur ASCII 67. La
représentation binaire de 67 est <code>1000011</code>.</p>

<p>Parlons d&#8217;abord du style <em>MSB</em> (most significant bit, bit de poids fort). Si
vous utilisez le style <em>MSB</em>, et lisez donc de gauche à droite (en lisant tout
le temps de gauche à droite), le bit de poids le plus fort est donc le premier.
Puisque le bit de poids le plus fort vient en premier, nous pouvons ajouter un
<code>0</code> devant pour obtenir huit bits. Après avoir ajouté un <code>0</code> la représentation
binaire est donc <code>01000011</code>.</p>

<p>Pour convertir cette valeur en <em>LSB</em> (least significant bit, bit de poids
faible), nous devons stocker le bit de poids faible en premier (à gauche). Nous
pouvons voir ci-dessous comment les bits vont être déplacés lors de la
convertion de <em>MSB</em> vers <em>LSB</em>. Notez qu&#8217;ici la position 1 indique le bit le
plus à gauche.</p>

<ul>
<li>déplacer la valeur 1 de la position <em>MSB</em> 8 à la position <em>LSB</em> 1</li>
<li>déplacer la valeur 1 de la position <em>MSB</em> 7 à la position <em>LSB</em> 2</li>
<li>déplacer la valeur 0 de la position <em>MSB</em> 6 à la position <em>LSB</em> 3</li>
<li>et ainsi de suite</li>
</ul>


<p>Une fois l&#8217;exercice terminé, la valeur sera <code>11000010</code>.</p>

<p>Nous avons effectué cette transformation à la main pour bien comprendre la
différence entre bit de poids fort et bit de poids faible. La méthode <code>unpack</code>
est cependant capable de donner les deux représentations. Cette méthode peut
prendre <code>b*</code> ou <code>B*</code> en entrée, voici leur différence selon la documentation de
Ruby :</p>

<pre><code>B | bit string (MSB first) | représentation binaire (bit de poids fort en premier)
b | bit string (LSB first) | représentation binaire (bit de poids faible en
</code></pre>

<p>Voyons maintenant deux exemples.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="s1">&#39;C&#39;</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s1">&#39;b*&#39;</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; [&quot;11000010&quot;]</span>
</span><span class='line'>
</span><span class='line'><span class="s1">&#39;C&#39;</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s1">&#39;B*&#39;</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; [&quot;01000011&quot;]</span>
</span></code></pre></div></figure>


<p><code>b*</code> et <code>B*</code> voient tous les deux là même donnée. Ils représentent simplement
cette donnée différemment.</p>

<h2 id="differentes-facons-de-representer-une-meme-donnee">Différentes façons de représenter une même donnée</h2>

<p>Disons que je souhaite la représentation binaire de la chaîne <code>hello</code>. D&#8217;après
ce que nous avons vu précédemment cela devrait être assez facile :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="s2">&quot;hello&quot;</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s1">&#39;B*&#39;</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; [&quot;0110100001100101011011000110110001101111&quot;]</span>
</span></code></pre></div></figure>


<p>Nous pouvons également obtenir le résultat suivant</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="s2">&quot;hello&quot;</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s1">&#39;C*&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span><span class="o">|</span><span class="n">e</span><span class="o">|</span> <span class="n">e</span><span class="o">.</span><span class="n">to_s</span> <span class="mi">2</span><span class="p">}</span>
</span><span class='line'><span class="c1">#=&gt; [&quot;1101000&quot;, &quot;1100101&quot;, &quot;1101100&quot;, &quot;1101100&quot;, &quot;1101111&quot;]</span>
</span></code></pre></div></figure>


<p>Voyons un exemple similaire mais en découpant les étapes cette fois.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="s2">&quot;hello&quot;</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s1">&#39;C*&#39;</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; [104, 101, 108, 108, 111]</span>
</span></code></pre></div></figure>


<p>La directive <code>C*</code> retourne les caractères sous la forme d&#8217;un entier non signé
tenant sur 8 bits. On peut voir que la valeur ASCII de <code>h</code> est 104 et celle de
<code>e</code> est 101, etc.</p>

<p>En utilisant la technique vu précédemment, nous pouvons obtenir une
représentation hexadécimale de notre chaîne :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="s2">&quot;hello&quot;</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s1">&#39;C*&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span><span class="o">|</span><span class="n">e</span><span class="o">|</span> <span class="n">e</span><span class="o">.</span><span class="n">to_s</span> <span class="mi">16</span><span class="p">}</span>
</span><span class='line'><span class="c1">#=&gt; [&quot;68&quot;, &quot;65&quot;, &quot;6c&quot;, &quot;6c&quot;, &quot;6f&quot;]</span>
</span></code></pre></div></figure>


<p>Il est toutefois possible d&#8217;obtenir directement cette valeur hexadécimale :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="s2">&quot;hello&quot;</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s1">&#39;H*&#39;</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; [&quot;68656c6c6f&quot;]</span>
</span></code></pre></div></figure>


<h2 id="high-nibble-first-vs-low-nibble-first">High nibble first vs Low nibble first</h2>

<p>Observez la différence entre les deux cas suivants :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="s2">&quot;hello&quot;</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s1">&#39;H*&#39;</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; [&quot;68656c6c6f&quot;]</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&quot;hello&quot;</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s1">&#39;h*&#39;</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; [&quot;8656c6c6f6&quot;]</span>
</span></code></pre></div></figure>


<p>La documentation Ruby indique</p>

<pre><code>H | hex string (high nibble first) | représentation hexadécimale (moitié haute en premier)
h | hex string (low nibble first)  | représentation hexadécimale (moitié basse en premier)
</code></pre>

<p>Un octet est composé de 8 bits. Une moitié contient donc 4 bits. Un octet
donc deux moitiés. La valeur ASCII de <code>h</code> est 104. 104 en hexadécimale s&#8217;écrit
68. Ce nombre 68 est stocké en deux moitiés. La première contient la valeur 6
sur 4 bits et la seconde contient la valeur 8. En général on utilise la notation
moitié haute puis moitié basse, de gauche à droite, la valeur 6 pour la
valeur 8.</p>

<p>Si cependant vous devez utiliser la notation moitié basse puis moitié haute, la
valeur 8 prendra la première place suivie de la valeur 6. La notation <em>moitié
basse en premier</em> donne donc 86.</p>

<p>Cette notation est utilisée pour chaque octet. Pour cette raison, la version
<em>moitié basse en premier</em> de <code>68 65 6c 6c 6f</code> est <code>86 56 c6 c6 f6</code>.</p>

<h2 id="melanger-les-directives">Mélanger les directives</h2>

<p>Dans les exemples précédents, nous avons utilisé le caractère <code>*</code>. Cela indique
de traiter autant de caractères que possible. Par exemple :</p>

<p>A single C will get a single byte.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="s2">&quot;hello&quot;</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s1">&#39;C&#39;</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; [104]</span>
</span></code></pre></div></figure>


<p>Vous pouvez ajouter plus de <code>C</code> si vous le souhaitez.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="s2">&quot;hello&quot;</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s1">&#39;CC&#39;</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; [104, 101]</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&quot;hello&quot;</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s1">&#39;CCC&#39;</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; [104, 101, 108]</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&quot;hello&quot;</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s1">&#39;CCCCC&#39;</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; [104, 101, 108, 108, 111]</span>
</span></code></pre></div></figure>


<p>Plutôt que de répéter ces directives, nous pouvons utiliser un nombre pour
indiquer combien de fois la directive doit être répétée.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="s2">&quot;hello&quot;</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s1">&#39;C5&#39;</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; [104, 101, 108, 108, 111]</span>
</span></code></pre></div></figure>


<p>Nous pouvons utiliser <code>*</code> pour capturer toutes les octets restants.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="s2">&quot;hello&quot;</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s1">&#39;C*&#39;</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; [104, 101, 108, 108, 111]</span>
</span></code></pre></div></figure>


<p>Voyons un exemple dans lequel nous mélangeons les notations <em>MSB</em> et <em>LSB</em> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="s2">&quot;aa&quot;</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s1">&#39;b8B8&#39;</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; [&quot;10000110&quot;, &quot;01100001&quot;]</span>
</span></code></pre></div></figure>


<h2 id="pack-est-linverse-de-unpack">pack est l&#8217;inverse de unpack</h2>

<p>La méthode <code>pack</code> est utilisée pour lire les données stockées. Voyons quelques
exemples d&#8217;utilisation :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">1000001</span><span class="o">].</span><span class="n">pack</span><span class="p">(</span><span class="s1">&#39;C&#39;</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; &quot;A&quot;</span>
</span></code></pre></div></figure>


<p>Dans le code ci-dessus, le valeur binaire est interpretée comme un entier non
signé sur 8 bits et le résultat est <code>'A'</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="s1">&#39;A&#39;</span><span class="o">].</span><span class="n">pack</span><span class="p">(</span><span class="s1">&#39;H&#39;</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; &quot;\xA0&quot;</span>
</span></code></pre></div></figure>


<p>Ici, l&#8217;entrée <code>'A'</code> n&#8217;est pas le <code>A</code> ASCII mais le <code>A</code> hexadécimale. C&#8217;est
la version hexadécimale à cause de la directive <code>H</code>. Cette dernière indique à
<code>pack</code> de traiter l&#8217;entrée comme une valeur hexadécimale. Comme <code>H</code> utilise la
notation <em>moitié haute en premier</em>, puisque l&#8217;entrée ne contient qu&#8217;une moitié,
cela signifie que la deuxième moitié, la moitié basse, a la valeur <code>0</code>. L&#8217;entrée
est donc vue comme <code>'A0'</code>.</p>

<p>Comme la valeur hexadécimale <code>A0</code> ne correspond à rien dans la table ASCII, le
résultat final est laissé tel quel et vaut donc <code>'\xA0'</code>. Le préfix <code>\x</code> indique
qu&#8217;il s&#8217;agit d&#8217;une valeur hexadécimale.</p>

<p>En hexadécimale, <code>a</code> a la même valeur que <code>A</code>. Nous pouvons donc remplacer <code>A</code>
par <code>a</code> dans notre exemple précédent et le résultat reste inchangé. Essayons
pour voir :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="s1">&#39;a&#39;</span><span class="o">].</span><span class="n">pack</span><span class="p">(</span><span class="s1">&#39;H&#39;</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; &quot;\xA0&quot;</span>
</span></code></pre></div></figure>


<p>Un autre exemple :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="s1">&#39;a&#39;</span><span class="o">].</span><span class="n">pack</span><span class="p">(</span><span class="s1">&#39;h&#39;</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; &quot;\n&quot;</span>
</span></code></pre></div></figure>


<p>Dans le code ci-dessus, il y a une différence notable dans le résultat. Nous
avons changé la directive de <code>H</code> à <code>h</code>. Comme <code>h</code> indique d&#8217;utiliser la notation
<em>moitié basse en premier</em> et que l&#8217;entrée ne contient qu&#8217;une moitié, la moitié
basse vaut <code>0</code> et l&#8217;entrée est donc <code>0a</code>. Le résultat est <code>\x0A</code> et si l&#8217;on
regarde dans la table ASCII, <code>0A</code> vaut 10 et le caractère correspondant est
<code>NL</code>, <em>new line</em> soit un saut de ligne. C&#8217;est pour cela que nous voyons
s&#8217;afficher <code>\n</code> qui représente un saut de ligne.</p>

<h2 id="utilisation-de-unpack-dans-le-code-de-rails">Utilisation de unpack dans le code de Rails</h2>

<p>J&#8217;ai cherché un peu dans le code source de Rails et trouvé les utilisations
suivantes de la méthode <code>unpack</code> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="n">email_address_obfuscated</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s1">&#39;C*&#39;</span><span class="p">)</span>
</span><span class='line'><span class="s1">&#39;mailto:&#39;</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s1">&#39;C*&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">email_address</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s1">&#39;C*&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">char</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s1">&#39;H2&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">column</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">string_to_binary</span><span class="p">(</span><span class="n">value</span><span class="p">)</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s2">&quot;H*&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">data</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s2">&quot;m&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s2">&quot;U*&quot;</span><span class="p">)</span>
</span></code></pre></div></figure>


<p>Nous avons déjà vu les directives <code>C*</code> et <code>H</code>, les directives <code>m</code> et <code>U</code> sont
cependant nouvelles. La première sert à donner une représentation encodée en
base64 de la valeur, la seconde retourne le caractère UTF-8 correspondant. Voici
un exemple :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="s2">&quot;Hello&quot;</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s1">&#39;U*&#39;</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; [72, 101, 108, 108, 111]</span>
</span></code></pre></div></figure>


<h2 id="versions-de-test">Versions de test</h2>

<p>Les exmples de code précédents ont été testés avec la version <em>1.9.2</em> de Ruby.</p>

<p>NDT: J&#8217;ai testé avec les versions 1.9.3 et 2.0.0, les exemples sont toujours
valides.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Utiliser les Expressions Régulières en Ruby (3/3)]]></title>
    <link href="http://vfsvp.fr/article/utiliser-les-expressions-regulieres-en-ruby-3-sur-3"/>
    <updated>2013-10-05T12:00:00+02:00</updated>
    <id>http://vfsvp.fr/article/utiliser-les-expressions-regulieres-en-ruby-3-sur-3</id>
    <content type="html"><![CDATA[<p>Source: <a href="http://www.bluebox.net/about/blog/2013/03/using-regular-expressions-in-ruby-part-3-of-3/">Using Regular Expressions in Ruby de Nell Shamrell sur le blog de Blue Box</a></p>

<p>Voici la seconde partie dans une série sur les Expressions Régulières en Ruby.
Vous pouvez lire la
<a href="http://vfsvp.fr/article/utiliser-les-expressions-regulieres-en-ruby-1-sur-3">première partie ici</a> et la
<a href="http://vfsvp.fr/article/utiliser-les-expressions-regulieres-en-ruby-2-sur-3">deuxième partie ici</a>.</p>

<h2 id="le-comportement-des-expressions-regulieres">Le comportement des Expressions Régulières</h2>

<p>Les expressions régulières sont puissantes. Comme un célèbre super-héros l&#8217;a dit
un jour &ldquo;with great power comes great responsibility&rdquo; (à grands pouvoirs,
grande responsabilité). Pour éviter qu&#8217;une expression régulière ne cause une
catastrophe, vous devez être capable d&#8217;en contrôler le comportement.</p>

<!-- more -->


<p>Les expressions régulières ont trois comportements distincts : greedy
(gourmande), lazy (fainéante) et possessive. Ces termes peuvent sembler
négatifs mais ne sont pas pour autant de mauvaises attitudes pour vos
expressions. Ce sont simplement des descriptions des différentes façon d&#8217;agir
que peuvent utiliser vos expressions et que vous pouvez contrôler. Je vais vous
expliquer comment.</p>

<p>Pour comprendre ces comportements, il nous faut d&#8217;abord comprendre les
quantificateurs. Ils permettent de dire au moteur d&#8217;expressions régulières
combien de fois un caractère ou un groupe de caractères doit apparaitre dans
notre chaîne.</p>

<p>Un des quantificateurs que j&#8217;utilise le plus souvent est le <code>+</code>. Lorsque je le
place derrière un caractère, j&#8217;indique que ce dernier doit apparaitre au moins
une fois. Il peut apparaitre autant de fois qu&#8217;il le souhaite mais doit être au
minimum présent une fois.</p>

<p>Prenons l&#8217;expression suivante :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="sr">/.+/</span>
</span></code></pre></div></figure>


<p>Celle-ci trouverait une correspondance pour tout caractère apparaissant au moins
une fois. Elle garantie donc la présence d&#8217;un caractère dans la chaîne.</p>

<p>Les quantificateurs sont à la base même du comportement de votre expression, à
savoir gourmande, fainéante ou possessive. Par défaut, elle est gourmande.</p>

<p>Un quantificateur gourmand tente de trouver la correspondance la plus longue
possible au sein de la chaîne. Il attrape autant de caractères que ses petites
mains gourmandes le lui permettent et tente de trouver une correspondance. Si
toute la chaîne ne correspond pas, il prend un caractère de moins et tente de
nouveau la recherche. Il recommence ce processus jusqu&#8217;à ce qu&#8217;il ne trouve
plus de caractères à tester.</p>

<p>Les quantificateurs gourmands fournissent un effort maximum pour un retour
maximum. Un quantificateur gourmand essaie autant de cas que possible pour
trouver une correspondance et retourne le maximum de caractères en faisant
partie.</p>

<p>Pour l&#8217;exemple suivant, je vais changer de science fiction et emprunter une
citation de <em>Star Trek: First Contact</em> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="n">string</span> <span class="o">=</span> <span class="s2">&quot;There&#39;s no time to talk about time we don&#39;t have the time&quot;</span>
</span><span class='line'><span class="sr">/.+time/</span>
</span></code></pre></div></figure>


<p>Cette expression régulière capture tout caractère apparaissant au moins une
fois, le tout suivi du mot &ldquo;time&rdquo;. Si je fais appel à la méthode <code>match</code> sur
mon expression régulière en lui passant ma chaîne en paramètre :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="sr">/.+time/</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="n">string</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; &quot;There&#39;s no time to talk about time we don&#39;t have the time&quot;</span>
</span></code></pre></div></figure>


<p>Toute la chaîne correspond.</p>

<p>Lorsque cette expression analyse la chaîne, elle tente d&#8217;abord de trouver la
première partie du modèle, <code>.+</code>. Cela correspond à toute la chaîne. Elle essaie
ensuite de trouver la deuxième partie, le mot <code>time</code>. Comme toute la chaîne a
été consommée, elle cherche &ldquo;time&rdquo; après la fin de cette dernière et ne trouve
rien. Elle recule donc d&#8217;un caractère (<em>backtrack</em>) et retente le test pour
trouver une correspondance. Une fois celle-ci trouvée, elle est retournée. Dans
notre cas, cela représente toute la chaîne.</p>

<p>Les quantificateurs gourmands tentent de faire correspondre toute la chaine puis
reculent progressivement. Ce recule progressif signifie que, si notre chaîne ne
correspond pas du tout au modèle, l&#8217;expression va tenter autant que possible de
trouver une correspondance. Elle doit garder en mémoire les possibilités déjà
tentées ce qui peut prendre beaucoup de ressources systèmes, en particulier
lorsque vous avez plusieurs tests effectués sur un texte long.</p>

<p>Oniguruma a certaines optimisations qui rendent le recule progressif plus
rapide. Patrick Shaughnessy a écrit un fantastique article sur son blog qui
détail comment Oniguruma gère le recul progressif. Malgré les optimisations, une
expression régulière gourmande consommera tout de même beaucoup de ressources.</p>

<p>Lorsque vous souhaitez une recherche plus réduite et qui consomme moins de
ressources, vous devez utiliser un quantificateurs fainéant. Également appelé
quantificateur réticent, celui-ci va commencer sa recherche au tout début
de la chaîne et tenter de faire correspondre le premier caractère. Si cela ne
suffit pas, il va consommer un caractère supplémentaire. En dernier ressort il
tentera de consommer toute la chaîne.</p>

<p>Un quantificateur fainéant fournit l&#8217;effort minimum pour un retour minimum. Il
retourne le moins de caractères possible pour une correspondance. S&#8217;il trouve ce
qu&#8217;il cherche avec le premier caractère de la chaîne, il va simplement retourner
celui-ci. Il est fainéant, il fait le minimum demandé et rien de plus.</p>

<p>Pour utiliser un quantificateur fainéant, il suffit de lui ajouter un point
d&#8217;interrogation.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="sr">/.+?time/</span>
</span></code></pre></div></figure>


<p>Si j&#8217;appelle la méthode <code>match</code> sur ma chaîne en utilisant un quantificateur
fainéant</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="sr">/.+?time/</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="n">string</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; &quot;There&#39;s no time&quot;</span>
</span></code></pre></div></figure>


<p>Je récupère seulement &ldquo;There&rsquo;s no time&rdquo;. La recherche a commencé au tout début
de la chaîne et retourne la correspondance minimum. Les expressions régulière
fainéantes utilisent beaucoup moins de recul progressif et, par conséquent,
moins de ressources que les expressions gourmandes.</p>

<p>Comment faire lorsque l&#8217;on souhaite récupérer un maximum de caractères tout en
limitant le recul progressif et la consommation de ressources ? Pour cela, il
existe un troisième quantificateur, le quantificateur possessif. Il fonctionne
sur le principe de tout ou rien, soit il trouve une correspondance au premier
essai soit il échoue. Comme le gourmand, il consomme le plus de caractères possibles (la chaîne entière) et tente la correspondance. Si cette tentative
échoue, il n&#8217;y aura ni recul ni nouvel essai.</p>

<p>Les quantificateurs possessifs utilisent un effort minimum pour un retour
maximum. Ils tentent de retournent autant de caractères que possible en en
faisant le moins possible (ils tentent une fois puis abandonnent).</p>

<p>Pour rendre un quantificateur possessif, il suffit de lui ajouter un plus <code>+</code> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="sr">/.++time/</span>
</span></code></pre></div></figure>


<p>Lançons la méthode <code>match</code> sur notre chaîne en lui passant cette expression
possessive :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="sr">/.++time/</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="n">string</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; nil</span>
</span></code></pre></div></figure>


<p>Cet appel retourne <code>nil</code> car le test a échoué. Pourquoi cet échec ? Il semble
pourtant que notre chaîne corresponde à l&#8217;expression. La raison est qu&#8217;aucun
recul progressif n&#8217;est effectué.</p>

<p>L&#8217;expression va d&#8217;abord tenter de trouver <code>.++</code> ce qui va consommer tout la
chaîne. Lorsqu&#8217;elle tente de trouver le mot <code>time</code>, il ne reste plus de
caractère à consommer. L&#8217;expression ne peut pas reculer à cause du
quantificateur possessif et va donc échouer.</p>

<p>Le principal avantage des quantificateurs possessifs est l&#8217;échec rapide.
L&#8217;absence de recul consomme très peu de ressources. Un quantificateur gourmand
va tenter tout ce qui est possible pour trouver une correspondance. En cas
d&#8217;échec, tout ce travail et toutes ces ressources n&#8217;auront servi à rien. Un
quantificateur possessif évite cela, si aucune correspondance n&#8217;existe l&#8217;échec
sera rapide.</p>

<p>En général, l&#8217;utilisation de quantificateurs possessifs se limite à des
expressions très courte, lorsque vous avez une petite sous-expression au sein
d&#8217;une expression plus large. Ils sont très utiles mais à utiliser avec
précaution.</p>

<h2 id="conclusion">Conclusion</h2>

<p>Les expressions régulières peuvent sembler extrêmement complexes. Lorsque j&#8217;ai
appris à aller plus loin que les bases, au delà des petites astuces de
validation d&#8217;email par exemple, j&#8217;ai trouvé que cela m&#8217;aidait de les voir comme
un sous-programme dans un langage différent. En réalité c&#8217;est exactement ça.
Vous écrivez un programme, au sein d&#8217;un autre programme, au sein de Ruby
lui-même.</p>

<p>Comme tout langage de programmation, il est plus simple d&#8217;écrire vos expressions
par petites parties. Lorsque j&#8217;écris un <em>lookbehind</em>, j&#8217;écris d&#8217;abord le modèle
principal, m&#8217;assure qu&#8217;il fonctionne. J&#8217;écris ensuite le modèle du lookbehind,
séparément, et m&#8217;assure qu&#8217;il fonctionne également. Une fois cela fait, je
joins les deux modèles pour valider qu&#8217;ils fonctionnent ensemble.</p>

<p><a href="http://rubular.com/">Rubular</a> est un site fantastic pour écrire et tester vos
expressions régulières. Testez le, utilisez le, il m&#8217;a vraiment facilité la vie.</p>

<p>Comme tout programme informatique, les expressions régulières s&#8217;écrivent en
plusieurs fois. Lorsque vous concevez une expression, il est tout à fait normal
que celle-ci soit laide au début. Faites la fonctionner et après seulement
tentez de la rendre plus lisible. C&#8217;est le même processus rouge, vert,
réusinage (red, green, refector) qui est utilisé dans le développement dirigé
par les tests.</p>

<p>Les expressions régulières sont puissantes. Si puissantes qu&#8217;elles font peur à
beaucoup d&#8217;entre-nous. Cette peur peut être surpassée. Aussi obscures qu&#8217;elle
peuvent paraître, elles ont une structure logique et réfléchie. Utilisez-les,
lancez Rubular et essayez quelques <em>lookaheads</em> et <em>lookbehinds</em>. Tentez les
quantificateurs gourmands, fainéants et possessifs. Explorez la fantastique
intégration des expressions régulières dans Ruby, je pense que vous en serez
surpris ce que vous trouverez.</p>

<h2 id="lauteur-chez-blue-box">L&#8217;auteur chez Blue Box</h2>

<p>Nell Shamrell travaille chez Blue Box en tant qu&#8217;Ingénieur Développement
Logiciel. Elle siège également au conseil de Certification de Programmation
Ruby de l&#8217;Université de Washington et est spécialisée en Ruby, Rails et
Développement Dirigé par les Tests (TDD). Avant le développement, Nell a étudié
et travaillé dans le domaine du théâtre, une excellente préparation à
l&#8217;environnement dynamique de la création d&#8217;applications logicielles. Dans ces
deux mondes, elle s&#8217;efforce de créer une expérience unique. Sur son temps
libre, elle pratique l&#8217;art martial appelé Naginata.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Utiliser les Expressions Régulières en Ruby (2/3)]]></title>
    <link href="http://vfsvp.fr/article/utiliser-les-expressions-regulieres-en-ruby-2-sur-3"/>
    <updated>2013-10-05T12:00:00+02:00</updated>
    <id>http://vfsvp.fr/article/utiliser-les-expressions-regulieres-en-ruby-2-sur-3</id>
    <content type="html"><![CDATA[<p>Source: <a href="http://www.bluebox.net/about/blog/2013/03/using-regular-expressions-in-ruby-part-2-of-3/">Using Regular Expressions in Ruby de Nell Shamrell sur le blog de Blue Box</a></p>

<p>Voici la seconde partie dans une série sur les Expressions Régulières en Ruby.
Vous pouvez lire la
<a href="http://vfsvp.fr/article/utiliser-les-expressions-regulieres-en-ruby-1-sur-3">première partie ici</a> et la
<a href="http://vfsvp.fr/article/utiliser-les-expressions-regulieres-en-ruby-3-sur-3">troisième partie ici</a>.</p>

<h2 id="les-lookarounds">Les LookArounds</h2>

<p>Les lookarounds me permettent d&#8217;aller plus loin que la simple comparaison avec
un modèle. En effet, ils offrent la possibilité de donner un contexte à cette
comparaison. Une expression contenant un lookaround ne retourne un résultat que
lorsqu&#8217;elle est effectuée dans ce contexte.</p>

<!-- more -->


<p>Soit une nouvelle chaîne de caractère, une autre citation d&#8217;Obiwan Kenobi dans
Star Wars.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="n">string</span> <span class="o">=</span> <span class="s2">&quot;Who&#39;s the more foolish?  The fool or the fool who follows him?&quot;</span>
</span></code></pre></div></figure>


<p>Je veux connaître tous les emplacements du mot &ldquo;fool&rdquo; dans cette chaîne. Je vais
donc utiliser l&#8217;expression régulière <code>/fool/</code>. Dans ce cas précis, je vais
utiliser la méthode <code>scan</code> sur ma chaîne. Cette méthode retourne toutes les
occurrences de mon expression dans la chaîne :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="n">string</span><span class="o">.</span><span class="n">scan</span><span class="p">(</span><span class="sr">/fool/</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; [&quot;fool&quot;, &quot;fool&quot;, &quot;fool&quot;]</span>
</span></code></pre></div></figure>


<p>Comme on peut le voir, scan retourne une partie du mot &ldquo;foolish&rdquo; et les deux
occurrences du mot &ldquo;fool&rdquo;.</p>

<p>Comment fait-on si l&#8217;on souhaite que notre modèle <code>/fool/</code> retourne un résultat
seulement s&#8217;il fait partie du mot &ldquo;foolish&rdquo; ? Pour ce cas j&#8217;utiliserais un
<em>lookahead positif</em> (recherche vers l&#8217;avant). Cela indique à mon expression
régulière de trouver toutes les correspondances à mon modèle directement suivies
d&#8217;une correspondance à un autre modèle. En Ruby, un lookahead positif est
exprimé grâce à l&#8217;opérateur <code>?=</code> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="sr">/fool(?=ish)/</span>
</span></code></pre></div></figure>


<p>Voici mon expression modifiée. Comme vous pouvez le voir, j&#8217;ai mon modèle
contenant le mot &ldquo;fool&rdquo; directement suivi du modèle lookahead &ldquo;ish&rdquo;.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="n">string</span><span class="o">.</span><span class="n">scan</span><span class="p">(</span><span class="sr">/fool(?=ish)/</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;=&gt;</span> <span class="o">[</span><span class="s2">&quot;fool&quot;</span><span class="o">]</span>
</span></code></pre></div></figure>


<p>Cette fois-ci, la méthode <code>scan</code> retourne un seul résultat, la seule occurrence
de &ldquo;fool&rdquo; suivie de &ldquo;ish&rdquo;.</p>

<p>De nouveau, utilisons la méthode <code>gsub</code> pour modifier notre chaîne. Remplaçons
chaque occurrence de &ldquo;fool&rdquo; (suivie de &ldquo;ish&rdquo;) par le mot &ldquo;self&#8221; :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="n">string</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/fool(?=ish)/</span><span class="p">,</span> <span class="s2">&quot;self&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; &quot;Who&#39;s the more selfish?  The fool or the fool who follows him?&quot;</span>
</span></code></pre></div></figure>


<p>Nos excuses à Obiwan Kenobi, nous avons changé la ligne pour <em>&ldquo;Who&rsquo;s the more
selfish?  The fool or the fool who follows him?&rdquo;</em>.</p>

<p>Techniquement, c&#8217;est ce que l&#8217;on appelle une <em>zero-width, positive lookahead
assertion</em> (recherche positive vers l&#8217;avant de taille zéro). Facile à prononcer
n&#8217;est-ce pas ? Dans le livre <em>The Well Grounded Rubyist</em>, David Black
l&#8217;explique comme ceci :</p>

<dl>
<dt>Zero-width</dt>
<dd>   (taille zéro) signifie que le modèle lookahead (&ldquo;ish&rdquo; dans notre cas) ne
   consomme pas de caractères. Cela veut dire que la correspondance est
   cherchée mais n&#8217;est pas retournée. Seule la présence d&#8217;une correspondance
   est retournée, vrai ou faux.</dd>
<dt>Positive</dt>
<dd>   signifie que le modèle doit être présent, obligatoirement.</dd>
<dt>Lookahead</dt>
<dd>   veut dire que cette expression est recherchée après le modèle principal.</dd>
<dt>Assertion</dt>
<dd>   indique que seule la présence d&#8217;une correspondance est retournée sous la
   forme true/false (vrai/faux).</dd>
</dl>

<p>Quelles sont mes autres possibilité ? Si par exemple je souhaite trouver toutes
les occurrences du mot &ldquo;fool&rdquo; qui ne sont <strong>pas</strong> suivies des lettres &ldquo;ish&rdquo; ?
Dans ce cas, je dois utiliser un lookahead négatif. Techniquement, c&#8217;est ce que
l&#8217;on appelle une <em>zero-width, negative lookahead assertion</em> (recherche négative
vers l&#8217;avant de taille zéro). Négative signifie qu&#8217;aucune correspondance à ce
modèle ne doit être trouvée. Pour effectuer un lookahead négatif, uilisez
l&#8217;opérateur <code>?!</code>.</p>

<p>Je vais de nouveau appeler <code>scan</code> sur ma chaîne en utilisant cette fois un
lookahead négatif dans mon expression régulière. Je veux trouver toutes les
occurrences de &ldquo;fool&rdquo; qui ne font pas partie du mot &ldquo;foolish&#8221; :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="n">string</span><span class="o">.</span><span class="n">scan</span><span class="p">(</span><span class="sr">/fool(?!ish)/</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; [&quot;fool&quot;, &quot;fool&quot;]</span>
</span></code></pre></div></figure>


<p>Deux correspondances sont retournées, les deux fois où le mot &ldquo;fool&rdquo; apparait
sans faire partie de &ldquo;foolish&rdquo;.</p>

<p>Utilisons maintenant la méthode <code>gsub</code>. À chaque fois que nous
trouvons le mot &ldquo;fool&rdquo; (non suivi des lettres &ldquo;ish&rdquo;), nous allons le remplacer
pas le mot &ldquo;self&#8221; :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="n">string</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/fool(?!ish)/</span><span class="p">,</span> <span class="s2">&quot;self&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; &quot;Who&#39;s the more foolish?  The self or the self who follows him?&quot;</span>
</span></code></pre></div></figure>


<p>Encore une fois j&#8217;ai changé une réplique classique. On peut maintenant lire
&ldquo;Who&rsquo;s the more foolish?  The self or the self who follows him?&rdquo;</p>

<p>Les lookaheads sont très pratiques lorsque l&#8217;on souhaite trouver une
correspondance en prenant en compte ce qui la suit. Allons de nouveau un peu
plus loin. Comment dois-je m&#8217;y prendre si je souhaite trouver une correspondance
à partir de ce qui la précède ? Pour faire cela, je dois utiliser une <em>positive
lookbehind assertion</em> (recherche positive vers l&#8217;arrière). Cela signifie que je
veux trouver toutes les correspondances à mon modèle précédées d&#8217;un autre
modèle.</p>

<p>Utilisons une autre citation de Star Wars, une de Yoda cette fois-ci :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="n">string</span> <span class="o">=</span> <span class="s2">&quot;For my ally is the force, and a powerful ally it is.&quot;</span>
</span></code></pre></div></figure>


<p>The modèle principal que je souhaite chercher est le mot &ldquo;ally&rdquo;, je vais donc
utiliser l&#8217;expression régulière <code>/ally/</code>. J&#8217;aimerais cependant trouver le mot
&ldquo;ally&rdquo; uniquement s&#8217;il est directement précédé du mot &ldquo;powerful&rdquo;. C&#8217;est le cas
parfait pour un <em>positive lookbehind</em> (recherche positive vers l&#8217;arrière). Les
lookbehinds positifs utilisent l&#8217;opérateur <code>?&lt;=</code>. Utilisons le dans notre
expression régulière :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="sr">/(?&lt;=powerful )ally/</span>
</span></code></pre></div></figure>


<p>Cette expression régulière relève le mot &ldquo;ally&rdquo; chaque fois qu&#8217;il est
directement précédé du mot &ldquo;powerful&rdquo;. Comme vous pouvez le remarquer, le
lookbehind est positionné avant le modèle principal. Cela montre bien que le mot
&ldquo;powerful&rdquo; doit est devant le mot &ldquo;ally&rdquo;.</p>

<p>Je vais maintenant utiliser la méthode <code>gsub</code> sur ma chaîne. Chaque fois que le
mot &ldquo;ally&rdquo; est précédé par le mot &ldquo;powerful&rdquo;, je veux le remplacer par le mot
&ldquo;friend&#8221; :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="n">string</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/(?&lt;=powerful )ally/</span><span class="p">,</span> <span class="s2">&quot;friend&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; For my ally is the force, and a powerful friend it is.</span>
</span></code></pre></div></figure>


<p>Cela change quelque peu les mots de Yoda : &ldquo;For my ally is the force, and a
powerful friend it is.&rdquo;</p>

<p>Comment dois-je m&#8217;y prendre si je souhaite faire le contraire ? Si par exemple
je veux toutes les occurrences du mot &ldquo;ally&rdquo; qui ne sont <strong>pas</strong> précédées du
mot &ldquo;powerful&rdquo;. Dans ce cas, je dois utiliser un <em>negative lookbehind</em>
(recherche négative vers l&#8217;arrière). Pour cela on trouve l&#8217;opérateur <code>?&lt;!</code>.
Utilisons-le dans notre expression régulière :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="sr">/(?&lt;!powerful )ally/</span>
</span></code></pre></div></figure>


<p>Utilisons maintenant <code>gsub</code> sur notre chaîne pour remplacer chaque occurence du
mot &ldquo;ally&rdquo;, non précédée du mot &ldquo;powerful&rdquo;, par le mot &ldquo;friend&#8221; :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="n">string</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/(?&lt;!powerful )ally/</span><span class="p">,</span> <span class="s2">&quot;friend&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; &quot;For my friend is the force, and a powerful ally it is.&quot;</span>
</span></code></pre></div></figure>


<p>J&#8217;ai de nouveau changé les paroles de Yoda : &ldquo;For my ally is the force, and a
powerful friend it is.&rdquo;.</p>

<p>Les lookarounds donnent une puissance incroyable à vos expressions régulières en
leur apportant un contexte. Plutôt que d&#8217;utiliser un modèle strict qui
correspond ou non, vos expressions régulières deviennent puissantes, flexibles
et capables de trouver bien plus de choses.</p>

<p><a href="http://vfsvp.fr/article/utiliser-les-expressions-regulieres-en-ruby-3-sur-3">Lire le troisième article de cette série</a></p>

<h2 id="lauteur-chez-blue-box">L&#8217;auteur chez Blue Box</h2>

<p>Nell Shamrell travaille chez Blue Box en tant qu&#8217;Ingénieur Développement
Logiciel. Elle siège également au conseil de Certification de Programmation
Ruby de l&#8217;Université de Washington et est spécialisée en Ruby, Rails et
Développement Dirigé par les Tests (TDD). Avant le développement, Nell a étudié
et travaillé dans le domaine du théâtre, une excellente préparation à
l&#8217;environnement dynamique de la création d&#8217;applications logicielles. Dans ces
deux mondes, elle s&#8217;efforce de créer une expérience unique. Sur son temps
libre, elle pratique l&#8217;art martial appelé Naginata.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Utiliser les Expressions Régulières en Ruby (1/3)]]></title>
    <link href="http://vfsvp.fr/article/utiliser-les-expressions-regulieres-en-ruby-1-sur-3"/>
    <updated>2013-10-05T12:00:00+02:00</updated>
    <id>http://vfsvp.fr/article/utiliser-les-expressions-regulieres-en-ruby-1-sur-3</id>
    <content type="html"><![CDATA[<p>Source: <a href="http://www.bluebox.net/about/blog/2013/02/using-regular-expressions-in-ruby-part-1-of-3/">Using Regular Expressions in Ruby de Nell Shamrell sur le blog de Blue Box</a></p>

<p>Voici la première partie d&#8217;une série sur les Expressions Régulières en Ruby.
Vous pouvez lire la
<a href="http://vfsvp.fr/article/utiliser-les-expressions-regulieres-en-ruby-2-sur-3">deuxième partie ici</a> et la
<a href="http://vfsvp.fr/article/utiliser-les-expressions-regulieres-en-ruby-3-sur-3">troisième partie ici</a>.</p>

<h2 id="introduction">Introduction</h2>

<p>Pour être honnête, la première fois que j&#8217;ai vu une expression régulière,
j&#8217;étais intimidée. Cela semblait si cryptique et mystérieux. Je peinais à voir
comment la comprendre et a fortiori en écrire une. Encore récemment, je
n&#8217;utilisais les expressions régulières qu&#8217;en cas d&#8217;absolue nécessité (une
validation d&#8217;email par ici, un remplacement basique par là). Cela m&#8217;a empêché
d&#8217;approfondir ma connaissance de leur utilisation en Ruby. Ruby travaille avec
les expressions régulière dans une harmonie, une symphonie de code. Pour
exploiter pleinement Ruby, je devais surpasser mon intimidation, ma peur des
expressions régulières.</p>

<p>J&#8217;ai dépassé cette peur. Comme toute chose dans la vie, les expressions
régulières semblent insurmontables jusqu&#8217;à ce qu&#8217;on les découpe. Je veux vous
aider à dépasser votre peur des expressions régulières. Pour cela, je vais les
découper, étape par étape, et vous guider au travers du concept d&#8217;expressions
régulières en Ruby et ce jusqu&#8217;aux techniques avancées. J&#8217;espère que vous verrez
la beauté, surpasserez votre intimidation et les adopterez dans votre code.</p>

<!-- more -->


<h2 id="les-expressions-regulieres">Les Expressions Régulières</h2>

<p>Une expression régulière est simplement un modèle. Un modèle auquel une chaîne
de caractères correspond ou non. Le livre <em>Programming Ruby 1.9</em> de Dave Thomas
(plus connu sous le nom <em>Pickaxe Book</em> [livre pic-à-glace]) regroupe en trois
catégories ce que l&#8217;on peut faire avec une expression régulière : tester,
extraire et modifier. Vous pouvez tester une chaîne de caractères pour voir si
elle correspond au modèle. Vous pouvez également modifier une chaîne de
caractères en remplaçant les parties correspondant au modèle par un autre texte.
Tester, extraire, modifier. Si simple et à la fois si puissant.</p>

<h2 id="les-expressions-regulieres-en-ruby">Les Expressions Régulières en Ruby</h2>

<p>Ruby vous permet de pousser les expressions régulières plus loin. En Ruby, tout
est objet. Cela inclus les expressions régulières. Vous pouvez envoyer des
messages aux objets, vous pouvez donc envoyer des messages aux expressions
régulières. Vous pouvez également les assigner à des variables, les passer à une
méthode et bien plus.</p>

<p>Depuis la version 1.9, Ruby utilise la bibliothèque d&#8217;expressions régulières
Oniguruma. Cette dernière fournit toutes les fonctionnalités standards des
expressions régulières ainsi qu&#8217;un certain nombre d&#8217;extensions. Elle supporte
parfaitement les caractères complexes comme les caractères japonais par exemple.
Une fonctionnalité que j&#8217;apprécie particulièrement est la possibilité d&#8217;utiliser
<code>\h</code> et <code>\H</code> comme raccourcis pour les chiffres hexadécimaux.</p>

<p>J&#8217;ai découvert récemment que Ruby 2.0 utilisait une bibliothèque différente,
Onigmo. Onigmo est un <em>fork</em> d&#8217;Oniguruma et ajoute encore plus de
fonctionnalités exploitables par Ruby. Il sera intéressant de voir jusqu&#8217;où cela
peut aller.</p>

<p>Malgré les modifications apportées par Onigmo, les fondamentaux de l&#8217;utilisation
des expressions régulières ne changent pas. Vous testez vos chaînes de
caractères avec une expression régulière. Vous composez un modèle auquel la
chaîne doit correspondre.</p>

<h2 id="test-basique">Test basique</h2>

<p>Dans la plupart des cas en Ruby, j&#8217;utilise l&#8217;opérateur <code>=~</code>. C&#8217;est l&#8217;opérateur
de test basique. Lorsque j&#8217;utilise cet opérateur, je demande à Ruby &ldquo;Est-ce que
cette chaîne de caractères contient ce modèle ?&rdquo;.</p>

<p>Voyons un premier exemple :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="sr">/force/</span> <span class="o">=~</span> <span class="s2">&quot;Use the force&quot;</span>
</span></code></pre></div></figure>


<p>À gauche, on trouve une expression régulière qui représente le mot <em>force</em>. À
droite, une citation d&#8217;un de mes films préférés, Star Wars, &ldquo;Use the force&rdquo;.
Lorsque je lance ce code, je demande à Ruby si mon modèle, à gauche, est présent
dans la chaîne de caractères située à droite.</p>

<p>Détail appréciable, je peux en inverser l&#8217;écriture si je le souhaite.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="s2">&quot;Use the force&quot;</span> <span class="o">=~</span> <span class="sr">/force/</span>
</span></code></pre></div></figure>


<p>Je peux mettre la chaîne à gauche et l&#8217;expression régulière à droite. Je fais le
même travail, simplement formulé autrement, &ldquo;Est-ce que ma chaîne contient mon
expression régulière ?&rdquo;. Certains trouvent cette formulation plus lisible.</p>

<p>Lorsque je lance ce code, il retourne le numéro du caractère auquel la
correspondance commence. Ici, le modèle <code>/force/</code> est trouvé au huitième
caractère de ma chaîne.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="s2">&quot;Use the force&quot;</span> <span class="o">=~</span> <span class="sr">/force/</span>
</span><span class='line'><span class="c1">#=&gt; 8</span>
</span></code></pre></div></figure>


<p>Je peux également tester si une chaîne <strong>ne contient pas</strong> un modèle en
utilisant l&#8217;opérateur <code>!~</code>. Cela retourne vrai (<em>true</em>) ou faux (<em>false</em>).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="sr">/dark side/</span> <span class="o">!~</span> <span class="s2">&quot;Use the force&quot;</span>
</span></code></pre></div></figure>


<p>Si je lance ce code, je demande si l&#8217;expression <code>/dark side/</code> est absente de la
chaîne <code>"Use the force"</code>. Dans le cas présent, vrai est retourné.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="sr">/dark side/</span> <span class="o">!~</span> <span class="s2">&quot;Use the force&quot;</span>
</span><span class='line'><span class="c1">#=&gt; true</span>
</span></code></pre></div></figure>


<p>Les opérateurs sont parfaits pour la vérification simple, savoir si ma chaîne
correspond à mon expression régulière ou non paer exemple. Ruby fournit
cependant bien plus d&#8217;informations sur la correspondance. Tout ce que j&#8217;ai à
faire, c&#8217;est demander.</p>

<h2 id="matchdata">MatchData</h2>

<p>Le secret c&#8217;est de transformer ma correspondance en un objet <code>MatchData</code>. Je
peux créer cet objet avec la méthode <code>match</code>.</p>

<p>Soit la chaîne de caractères suivante :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="n">string</span> <span class="o">=</span> <span class="s2">&quot;The force will be with you always&quot;</span>
</span></code></pre></div></figure>


<p>Je veux savoir si cette chaîne contient le mot <em>force</em>. Je peux utiliser
l&#8217;expression régulière suivante :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="sr">/force/</span>
</span></code></pre></div></figure>


<p>J&#8217;appelle la méthode <code>match</code> sur mon expression régulière et lui passe ma
chaîne. Lorsque je lance ce code, il retourne une instance de la classe
<code>MatchData</code> pour ma correspondance.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="n">my_match</span> <span class="o">=</span> <span class="sr">/force/</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="n">string</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; #&lt;MatchData &quot;force&quot;&gt;</span>
</span></code></pre></div></figure>


<p>Depuis Ruby 1.9, la correspondance ne se fait plus obligatoirement au début de
la chaîne. Je peux passer un second argument, un entier, qui indique que la
correspondance doit commencer à partir de ce numéro de caractère.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="n">my_match</span> <span class="o">=</span> <span class="sr">/force/</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="n">string</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; nil</span>
</span></code></pre></div></figure>


<p>Ici, le code retourne <code>nil</code>. Pour trouver une correspondance au mot <em>force</em>, il
faudrait commencer plus tôt dans la chaîne.</p>

<p>Pour les exemples suivants, je me contenterai de passer simplement ma chaîne de
caractères :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="n">my_match</span> <span class="o">=</span> <span class="sr">/force/</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="n">string</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; #&lt;MatchData &quot;force&quot;&gt;</span>
</span></code></pre></div></figure>


<p>J&#8217;ai accès à des méthodes qui fournissent <strong>bien plus</strong> d&#8217;informations sur ma
correspondance car c&#8217;est maintenant une instance de la classe <code>MatchData</code>.</p>

<p>Si j&#8217;appelle <code>to_s</code> sur ma correspondance, cela va retourner l&#8217;intégralité de
son texte :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="n">my_match</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'><span class="c1">#=&gt; &quot;force&quot;</span>
</span></code></pre></div></figure>


<p>Si j&#8217;appelle <code>pre_match</code> dessus, cela retourne la partie de ma chaîne qui
<strong>précède</strong> ma correspondance :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="n">my_match</span><span class="o">.</span><span class="n">pre_match</span>
</span><span class='line'><span class="c1">#=&gt; &quot;The &quot;</span>
</span></code></pre></div></figure>


<p>Si j&#8217;appelle <code>post_match</code> dessus, cela retourne la partie de ma chaîne qui
<strong>suit</strong> ma correspondance :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="n">my_match</span><span class="o">.</span><span class="n">post_match</span>
</span><span class='line'><span class="c1">#=&gt; &quot; will be with you&quot;</span>
</span></code></pre></div></figure>


<p>Toutes ces méthodes (et il y en a d&#8217;autres) sont bien utiles. <code>MatchData</code>
montre cependant sa réelle utilité lorsque l&#8217;on parle de groupes de captures.
Les groupes de captures sont des sous expressions au sein d&#8217;une expression
régulière. Voici un exemple :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="sr">/(.*)force(.*)/</span>
</span></code></pre></div></figure>


<p>Pour qu&#8217;une chaîne de caractères contienne cette expression régulière, elle doit
avoir n&#8217;importe quel caractère zéro, une ou plusieurs fois (c&#8217;est la
signification de <code>.*</code>), suivi du mot <em>force</em>, suivi par n&#8217;importe quel caractère
zéro, une ou plusieurs fois.</p>

<p>Notez bien que la première et la dernière partie de l&#8217;expression sont en entre
parenthèses. C&#8217;est ce qu&#8217;on appelle des groupes. Lorsque que je lance ce modèle
sur ma chaîne, ce qui correspond à ces groupes va être mémorisé. Je peux ensuite
accéder à ces groupes et les utiliser dans d&#8217;autres parties de mon code.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="n">my_match</span> <span class="o">=</span> <span class="sr">/(.*)force(.*)/</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="n">string</span><span class="p">)</span>
</span></code></pre></div></figure>


<p>Si je souhaite voir tous ces groupes, mes groupes de captures, je peux appeler
la méthode <code>captures</code> sur ma correspondance.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="n">my_match</span><span class="o">.</span><span class="n">captures</span>
</span><span class='line'><span class="c1">#=&gt; [&quot;The &quot;, &quot; will be with you always&quot;]</span>
</span></code></pre></div></figure>


<p>Les objets <code>MatchData</code> sont très proches des tableaux. Je peux accéder à
chaque capture en utilisant les crochets, de la même façon que pour accéder aux
éléments d&#8217;un tableau.</p>

<p>Si j&#8217;appelle <code>my_match[1]</code>, j&#8217;obtiens le premier groupe de capture, <code>"The "</code>.</p>

<p>De la même manière, <code>my_match[2]</code> retourne mon second groupe de captures, <code>"
will be with you always"</code>.</p>

<p>Notez bien que je ne commence pas avec <code>my_match[0]</code> comme je le ferais pour un
tableau classique. Si j&#8217;appelle <code>my_match[0]</code>, plutôt que de récupérer le
premier groupe, j&#8217;obtiens la chaîne sur laquelle j&#8217;ai lancé le modèle.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="n">my_match</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'><span class="c1">#=&gt; &quot;The force will be with you always&quot;</span>
</span></code></pre></div></figure>


<p>Il est important de garder en mémoire que malgré leur ressemblance avec les
tableaux, les objets <code>MatchData</code> ne sont pas des tableaux.</p>

<p>Si j&#8217;essaie d&#8217;appeler une méthode de tableau comme <code>each</code> sur mon objet
<code>MatchData</code>, j&#8217;obtiens une erreur :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="n">my_match</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">m</span><span class="o">|</span>
</span><span class='line'> <span class="nb">puts</span> <span class="n">m</span><span class="o">.</span><span class="n">upcase</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1">#=&gt; NoMethodError</span>
</span></code></pre></div></figure>


<p>Cependant, je peux facilement corriger cela en convertissant mon objet
<code>MatchData</code> en tableau grâce à la méthode <code>to_a</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='ruby'><span class='line'><span class="n">my_match</span><span class="o">.</span><span class="n">to_a</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">m</span><span class="o">|</span>
</span><span class='line'> <span class="nb">puts</span> <span class="n">m</span><span class="o">.</span><span class="n">upcase</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1">#=&gt; THE FORCE WILL BE WITH YOU ALWAYS THE WILL BE WITH YOU ALWAYS</span>
</span></code></pre></div></figure>


<p><a href="http://vfsvp.fr/article/utiliser-les-expressions-regulieres-en-ruby-2-sur-3">Lire le deuxième article de cette série</a></p>

<h2 id="lauteur-chez-blue-box">L&#8217;auteur chez Blue Box</h2>

<p>Nell Shamrell travaille chez Blue Box en tant qu&#8217;Ingénieur Développement
Logiciel. Elle siège également au conseil de Certification de Programmation
Ruby de l&#8217;Université de Washington et est spécialisée en Ruby, Rails et
Développement Dirigé par les Tests (TDD). Avant le développement, Nell a étudié
et travaillé dans le domaine du théâtre, une excellente préparation à
l&#8217;environnement dynamique de la création d&#8217;applications logicielles. Dans ces
deux mondes, elle s&#8217;efforce de créer une expérience unique. Sur son temps
libre, elle pratique l&#8217;art martial appelé Naginata.</p>
]]></content>
  </entry>
  
</feed>
