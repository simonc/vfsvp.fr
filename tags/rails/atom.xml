<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: rails | VF svp]]></title>
  <link href="http://vfsvp.fr/tags/rails/atom.xml" rel="self"/>
  <link href="http://vfsvp.fr/"/>
  <updated>2014-07-16T20:17:47+02:00</updated>
  <id>http://vfsvp.fr/</id>
  <author>
    <name><![CDATA[Simon Courtois (@simonc)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[6 façons de réduire la souffrance due aux tests fonctionnels avec Rails]]></title>
    <link href="http://vfsvp.fr/article/6-facons-de-reduire-la-souffrance-des-tests-fonctionnels-avec-Rails"/>
    <updated>2013-10-12T13:00:00+02:00</updated>
    <id>http://vfsvp.fr/article/6-facons-de-reduire-la-souffrance-des-tests-fonctionnels-avec-Rails</id>
    <content type="html"><![CDATA[<p>Source: <a href="http://gaslight.co/blog/6-ways-to-remove-pain-from-feature-testing-in-ruby-on-rails">6 Ways to Remove Pain From Feature Testing in Ruby on Rails de Mitch Lloyd</a></p>

<p>L'écriture des tests fonctionnels a été une des parts les plus douloureuses de
mon travail avec Ruby on Rails. Mais aujourd'hui c'est quelque chose que
j'apprécie et voici pourquoi :</p>

<h2>1. Je n'utilise pas Cucumber</h2>

<p><strong>Attention:</strong> Le point de vue exprimé dans le paragraphe suivant ne reflète pas
forcement celui de l'équipe ou des partenaires de Gaslight Software, LLC.</p>

<p>Si vous avez installé Cucumber, supprimez-le. Les tests sont déjà assez
difficiles sans que l'on ait besoin de transformer le langage naturel en code
Ruby.</p>

<!-- more -->


<p>J'utilise :</p>

<ul>
<li>Rspec &ndash; DSL spécialisé dans les tests</li>
<li>FactoryGirl &ndash; Constructeur de modèles</li>
<li>Capybara &ndash; DOM Dominator</li>
<li>Database Cleaner - Nettoyeur de bases de données</li>
<li>Spring - Accélérateur de démarrage</li>
</ul>


<p>Et j'en suis très content. Écrivons une spec.</p>

<pre><code class="ruby">feature 'Navigating through workpapers' do
  let(:user) { create(:user) }
  let(:audit) { create(:audit, users: [user]) }

  scenario "User sees workpapers within an audit" do
    workpaper = create(:workpaper, audit: audit)

    visit '/'
    fill_in 'email', with: user.email
    fill_in 'password', with: 'password'
    click_on 'Log In'

    find('#audit-selector').select audit.name
    expect(page).to have_css?('.workpaper', text: workpaper.name)
  end
end
</code></pre>

<p>Tout cela est plutôt pas mal mais une <em>feature</em> un peu plus complexe deviendrait
vite illisible. La logique de connexion va immanquablement être dupliquée entre
plusieurs tests. Même cette <em>feature</em> n'est pas aussi lisible que je le
souhaiterais.</p>

<h2>2. Utilisez des <em>Page Objects</em></h2>

<p>Les sélecteurs Capybara ont une forte probabilité de casser au fur et à mesure
que le développement avance. Le responsable du contenu décide que le bouton du
formulaire de connexion va maintenant indiquer &ldquo;Connectez-vous à un monde où
tout est possible&rdquo;, vous devez maintenant corriger tous vos tests.</p>

<p>Les <em>page objects</em> sont des interfaces spécifiques à votre DOM. Lorsque le HTML
change, vous saurez exactement où corriger cela dans vos tests.</p>

<p>Voici un <em>page objet</em> &ldquo;page de connexion" :</p>

<pre><code class="ruby">class LoginPage
  include Capybara::DSL

  def visit_page
    visit '/'
    self
  end

  def login(user)
    fill_in 'email', with: user.email
    fill_in 'password', with: 'password'
    click_on 'Log In'
  end
end
</code></pre>

<p>Voici un autre <em>page object</em> &ldquo;index des documents" :</p>

<pre><code class="ruby">class WorkpaperIndexPage
  include Capybara::DSL

  def select_audit(audit)
    find('#audit-selector').select audit.name
  end

  def has_workpaper?(workpaper)
    has_css?('.workpaper', text: workpaper.name)
  end
end
</code></pre>

<p>Et voici maintenant un test utilisant ces <em>page objects</em> :</p>

<pre><code class="ruby">feature 'Navigating through workpapers' do
  let(:user) { create(:user) }
  let(:audit) { create(:audit, users: [user]) }
  let(:login_page) { LoginPage.new }
  let(:workpaper_page) { WorkpaperIndexPage.new }

  scenario "User sees workpapers within an audit" do
    workpaper = create(:workpaper, audit: audit)

    login_page.visit_page.login(user)
    workpaper_page.select(audit)
    expect(workpaper_page).to have_workpaper(workpaper)
  end
end
</code></pre>

<p>Considérons maintenant que quelqu'un modifie sans arrêt ce bouton de connexion.
Vous avez simplement à modifier <code>LoginPage</code> et utiliser un ID ou une entrée I18n
(ce qui aurait été une bonne idée dés le départ). Vous n'avez à vous inquiéter
d'aucun autre test, tout ce qui concerne cette page est contenu dans ce <em>page
object</em>.</p>

<p>Ces objets sont assez simples mais peuvent tout à fait grossir pour fournir des
fonctionnalités supplémentaires comme la vérification d'erreurs au fur et à
mesure que l'utilisateur au travers des pages (ou sections) du site. Le retour
sur investissement des <em>page objects</em> est si rapide que j'utilise toujours ce
type d'objet dans mes tests fonctionnels. De la même façon que je n'écris jamais
de SQL dans mes vues Rails, je n'accède pas au DOM depuis un test fonctionnel
sans <em>page object</em>.</p>

<h2>3. Créer des messages d'erreur utiles</h2>

<p>Un test fonctionnel qui échoue peut être difficile à diagnostiquer. Mettons que
vous utilisez un <em>page object</em> comme ceci :</p>

<pre><code class="ruby">expect(workpaper_page).to have_one_workpaper(workpaper)
</code></pre>

<pre><code>Failure/Error: expect(workpaper_page).to have_one_workpaper(workpaper)
  expected #has_one_workpaper?(workpaper) to return true, got false
</code></pre>

<p>L'erreur est lisible mais il serait plus facile de savoir si elle est provoquée
par l'absence du document ou si la présence d'autres documents.</p>

<p>En général, je lève une exception lorsque j'appelle ce genre de prédicat sur
un <em>page object</em>.</p>

<pre><code>Failure/Error: expect(workpaper_page).to have_one_workpaper(workpaper)
  PageExpectationNotMetError:
    expected one workpaper called "My Sweet Workpaper", but the following
    workpapers were on the page:
      * "Bogus Workpaper"
      * "My Sweet Workpaper"
</code></pre>

<p>J'utilise cette technique avec modération et je cherche toujours une approche
plus élégante. Cela me donne tout de même des messages d'erreur plus précis et
m'épargne quelques aller-retours avec le navigateur. Faites moi signe si vous
utilisez une autre technique de retour d'erreur dans vos tests.</p>

<h2>4. Embrassez les tests asynchrones</h2>

<p>Une grande part de la frustration relative aux tests automatisés dans un
navigateur est due aux assertions qui doivent attendre. Ajouter un <code>sleep</code> à vos
tests est passable si vous pensez que l'un de vos tests a un souci de timing
mais un <code>sleep</code> ne devrait jamais se trouver dans votre code de test final.</p>

<p>Les tests clignotants (ceux qui échouent de façon intermittente) tuent la
confiance que vous avez envers votre suite de tests. Ils devraient être corrigés
ou supprimés.</p>

<p>En général, je conseille surtout de bien apprendre l'API de Capybara. Voici
quelques pointeurs :</p>

<ul>
<li><code>#all</code> n'attend pas, ce n'est dont probablement pas le <em>matcher</em> que vous
cherchez ;</li>
<li>La méthode <code>#has_css?</code> peut prendre un compteur en paramètre de façon à
indiquer combien d'éléments vous voulez attendre ;</li>
<li>Écrire un test comme <code>expect(page).to_not have_css('.post')</code> est, en général,
une mauvaise idée. Ce matcher attend l'apparition d'éléments <code>.post</code> pour
passer ce qui peut engendrer un certain ralentissement. Dans ce genre de cas,
il est préférable d'utiliser <code>expect(page).to have_no_css('.post')</code> qui
passera immédiatement si les éléments sont absents de la page ou attendra
leur disparition s'ils sont présents. Dans ce dernier cas, il vaut mieux
s'assurer de leur présence au préalable.</li>
</ul>


<p>Il peut arriver que vous souhaitiez attendre que quelque chose se produise en
dehors de Capybara. Pour cela, <a href="https://gist.github.com/mattwynne/1228927">ce helper</a>
<code>eventually</code> est très pratique :</p>

<p>Le code suivant attend que le document soit <em>awesome</em> et échoue si ce n'est pas le cas après deux secondes.</p>

<pre><code class="ruby">eventually { expect(workpaper).to be_awesome }
</code></pre>

<p>Quand pourriez-vous avoir besoin de ce type d'assertion en dehors de Capybara ?
Lisez la suite…</p>

<h2>5. Prenez la construction de données au sérieux</h2>

<p>Je me souviens avoir entendu un mantra pour les tests fonctionnels qui disait
&ldquo;Tout faire du point de vue de l'utilisateur&rdquo;. Ce conseil visait à l'origine à
décourager les testeurs de manipuler les données directement dans les tests
fonctionnels. Je peux vous assurer que c'était un mauvais conseil. Il est juste
impensable d'inscrire un utilisateur et de passer au travers de vingt autres
étapes simplement pour le faire cliquer sur un bouton.</p>

<p>J'utilise beaucoup FactoryGirl pour mettre en place mes données de test. Cela
signifie que j'ai des factories permettant de générer des objets complexes.
Voici, par exemple, comment faire un document avec un workflow ayant des étapes
assignées à certains utilisateurs appelés <code>preparers</code> et <code>reviewers</code>.</p>

<pre><code class="ruby">FactoryGirl.define do
  factory :workpaper do
    sequence(:name) {|n| "workpaper #{n}"}

    factory :assigned_workpaper do
      ignore do
        preparer { create(:user) }
        reviewer { create(:user) }
      end

      after(:create) do |workpaper, evaluator|
        create(:assigned_workflow, workpaper: workpaper, preparer: evaluator.preparer, reviewer: evaluator.reviewer)
      end
    end
  end

  factory :workflow do
    factory :assigned_workflow do
      ignore do
        preparer { create(:user) }
        reviewer false
      end

      after(:create) do |workflow, evaluator|
        create(:step, workflow: workflow, user: evaluator.preparer)

        if evaluator.reviewer
          create(:step, workflow: workflow, user: evaluator.reviewer)
        end
      end
    end
  end

  factory :step
end
</code></pre>

<p>Cela me permet de créer de façon déclarative des objets spécifiques à mes tests.</p>

<pre><code class="ruby">create(:assigned_workpaper, preparer: first_user, reviewer: second_user)
</code></pre>

<p>Je crée toujours des instances de mes modèles via FactoryGirl dans mes tests
fonctionnels. Je suis fan de FactoryGirl mais je pense qu'il est possible de
faire encore mieux en ce qui concerne la construction de données complexes comme
celles-ci. Quel que soit l'outil utilisé, la mise en place des données de test
doit toujours être lisible et facilement exploitable.</p>

<p>Il est non seulement acceptable de mettre en place des données avant de
commencer vos tests mais il est également acceptable de vérifier les effets de
bord qui ne sont pas nécessairement visibles par l'utilisateur. Dans le monde
des applications en client riche par exemple, voir quelque chose à l'écran ne
signifie pas forcement que tout a été sauvegardé en base de données.</p>

<p>Tout comme nous avons des helpers pour construire nos données, nous devrions
avoir des helpers pour les inspecter. Ce test va s'assurer que le <em>preparer</em>
d'un document a été sauvegardé en base de données :</p>

<pre><code class="ruby">eventually { preparer_for(workpaper).should be(preparer) }
</code></pre>

<h2>6. Créez moins de tests, affinez ceux existant</h2>

<p>Lorsque j'ai commencé à écrire des tests fonctionnels avec Rails, on m'a donné
le conseil suivant &ldquo;chaque test doit contenir une action et une assertion&rdquo;. J'ai
donc travaillé comme ceci :</p>

<ul>
<li>Écrire un scénario cucumber pour une fonctionnalité</li>
<li>Faire fonctionner le code</li>
<li>Écrire un scénario cucumber pour un autre aspect de la fonctionnalité</li>
<li>Faire fonctionner le code</li>
</ul>


<p>C'est une bonne méthodologie pour les tests unitaires mais c'est une mauvaise
idée en ce qui concerne les tests fonctionnels.</p>

<p>Prenons le test suivant :</p>

<pre><code class="ruby">scenario "assigning a reviewer to a workpaper" do
  user_visits_workpaper(user, workpaper)
  ui.begin_assigning_reviewer
  ui.assign_work_to(reviewer)
  eventually { expect(reviewer_for workpaper).to eq(other_tester) }
end
</code></pre>

<p>Lorsque l'on appelle <code>ui.begin_assigning_reviewer</code> une boite de dialogue
s'ouvre pour permettre à l'utilisateur de choisir qui qui sera le <code>reviewer</code>.
Cette fonctionnalité marche. Très bien.</p>

<p>Je veux maintenant m'assurer que le seuls les utilisateurs ayant le droit de
faire des relectures soient listés. Plutôt que de créer un nouveau test, je vais
affiner celui que je viens d'écrire :</p>

<pre><code class="ruby">scenario "assigning a reviewer to a workpaper" do
  user_visits_workpaper(user, workpaper)
  ui.begin_assigning_reviewer
  expect(ui).to have_excluded_user(non_reviewer)
  ui.assign_work_to(reviewer)
  eventually { expect(reviewer_for workpaper).to eq(other_tester) }
end
</code></pre>

<p>Je n'utiliserais bien sûr pas cette technique pour les tests unitaires mais elle
est efficace pour les tests fonctionnels dont le but est de guider votre
progression et détecter les régressions.</p>

<h2>Mais qui teste vos tests ?</h2>

<p>Lorsque vos tests commencent à contenir beaucoup de logique, quelqu'un va finir
par vous dire &ldquo;Mais qui teste vos tests ?&rdquo; pour vous signifier que vos tests
sont trop compliqués, trop complexes. Votre code de production teste vos tests.
Ce n'est pas pour autant une excuse pour écrire de mauvais tests ou des tests
illisibles.</p>

<p>Les outils et techniques cités ci-dessus vont changer au fur et à mesure que le
temps passe mais j'ai augmenté ma sensibilité aux mauvais tests fonctionnels
pour toujours. Refactorez de façon agressive, concevez intelligemment et aimez
vos tests fonctionnels.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les méthodes pack et unpack en Ruby]]></title>
    <link href="http://vfsvp.fr/article/les-methodes-pack-et-unpack-en-ruby"/>
    <updated>2013-10-07T10:00:00+02:00</updated>
    <id>http://vfsvp.fr/article/les-methodes-pack-et-unpack-en-ruby</id>
    <content type="html"><![CDATA[<p>Source: <a href="http://blog.bigbinary.com/2011/07/20/ruby-pack-unpack.html">Ruby Pack Unpack de Neeraj Singh sur le blog de BigBinary</a></p>

<p>Le langage C permet aux développeurs d'accéder directement à la mémoire où sont
stockées les variables. Ruby ne le permet pas. Il est cependant des cas dans
lesquels on peut avoir besoin d'accéder aux bits et octets contenus dans cette
mémoire tout en travaillant avec Ruby. Ce dernier fournit deux méthods <code>pack</code> et
<code>unpack</code> pour cela.</p>

<p>Voici un exemple :</p>

<pre><code class="ruby">'A'.unpack('b*')
#=&gt; ["10000010"]
</code></pre>

<!-- more -->


<p>Dans le cas ci-dessus, <code>'A'</code> est une chaîne de caractères stockée et, grâce à
<code>unpack</code> je tente d'en lire la valeur binaire. La table ASCII indique que la
valeur de <code>'A'</code> est 65 et la représentation binaire de 65 est <code>10000010</code>.</p>

<p>Un autre exemple :</p>

<pre><code class="ruby">'A'.unpack('B*')
#=&gt; ["01000001"]
</code></pre>

<p>Notez bien le changement de résultat entre les deux exemples. Quelle est la
différence entre <code>b*</code> et <code>B*</code> ? Pour le comprendre nous devons d'abord parler
de <em>MSB</em> et <em>LSB</em>.</p>

<h2>Bit de poids fort et bit de poids faible</h2>

<p>Tous les bits ne sont pas créés égaux. <code>'C'</code> a la valeur ASCII 67. La
représentation binaire de 67 est <code>1000011</code>.</p>

<p>Parlons d'abord du style <em>MSB</em> (most significant bit, bit de poids fort). Si
vous utilisez le style <em>MSB</em>, et lisez donc de gauche à droite (en lisant tout
le temps de gauche à droite), le bit de poids le plus fort est donc le premier.
Puisque le bit de poids le plus fort vient en premier, nous pouvons ajouter un
<code>0</code> devant pour obtenir huit bits. Après avoir ajouté un <code>0</code> la représentation
binaire est donc <code>01000011</code>.</p>

<p>Pour convertir cette valeur en <em>LSB</em> (least significant bit, bit de poids
faible), nous devons stocker le bit de poids faible en premier (à gauche). Nous
pouvons voir ci-dessous comment les bits vont être déplacés lors de la
convertion de <em>MSB</em> vers <em>LSB</em>. Notez qu'ici la position 1 indique le bit le
plus à gauche.</p>

<ul>
<li>déplacer la valeur 1 de la position <em>MSB</em> 8 à la position <em>LSB</em> 1</li>
<li>déplacer la valeur 1 de la position <em>MSB</em> 7 à la position <em>LSB</em> 2</li>
<li>déplacer la valeur 0 de la position <em>MSB</em> 6 à la position <em>LSB</em> 3</li>
<li>et ainsi de suite</li>
</ul>


<p>Une fois l'exercice terminé, la valeur sera <code>11000010</code>.</p>

<p>Nous avons effectué cette transformation à la main pour bien comprendre la
différence entre bit de poids fort et bit de poids faible. La méthode <code>unpack</code>
est cependant capable de donner les deux représentations. Cette méthode peut
prendre <code>b*</code> ou <code>B*</code> en entrée, voici leur différence selon la documentation de
Ruby :</p>

<pre><code>B | bit string (MSB first) | représentation binaire (bit de poids fort en premier)
b | bit string (LSB first) | représentation binaire (bit de poids faible en
</code></pre>

<p>Voyons maintenant deux exemples.</p>

<pre><code class="ruby">'C'.unpack('b*')
#=&gt; ["11000010"]

'C'.unpack('B*')
#=&gt; ["01000011"]
</code></pre>

<p><code>b*</code> et <code>B*</code> voient tous les deux là même donnée. Ils représentent simplement
cette donnée différemment.</p>

<h2>Différentes façons de représenter une même donnée</h2>

<p>Disons que je souhaite la représentation binaire de la chaîne <code>hello</code>. D'après
ce que nous avons vu précédemment cela devrait être assez facile :</p>

<pre><code class="ruby">"hello".unpack('B*')
#=&gt; ["0110100001100101011011000110110001101111"]
</code></pre>

<p>Nous pouvons également obtenir le résultat suivant</p>

<pre><code class="ruby">"hello".unpack('C*').map {|e| e.to_s 2}
#=&gt; ["1101000", "1100101", "1101100", "1101100", "1101111"]
</code></pre>

<p>Voyons un exemple similaire mais en découpant les étapes cette fois.</p>

<pre><code class="ruby">"hello".unpack('C*')
#=&gt; [104, 101, 108, 108, 111]
</code></pre>

<p>La directive <code>C*</code> retourne les caractères sous la forme d'un entier non signé
tenant sur 8 bits. On peut voir que la valeur ASCII de <code>h</code> est 104 et celle de
<code>e</code> est 101, etc.</p>

<p>En utilisant la technique vu précédemment, nous pouvons obtenir une
représentation hexadécimale de notre chaîne :</p>

<pre><code class="ruby">"hello".unpack('C*').map {|e| e.to_s 16}
#=&gt; ["68", "65", "6c", "6c", "6f"]
</code></pre>

<p>Il est toutefois possible d'obtenir directement cette valeur hexadécimale :</p>

<pre><code class="ruby">"hello".unpack('H*')
#=&gt; ["68656c6c6f"]
</code></pre>

<h2>High nibble first vs Low nibble first</h2>

<p>Observez la différence entre les deux cas suivants :</p>

<pre><code class="ruby">"hello".unpack('H*')
#=&gt; ["68656c6c6f"]

"hello".unpack('h*')
#=&gt; ["8656c6c6f6"]
</code></pre>

<p>La documentation Ruby indique</p>

<pre><code>H | hex string (high nibble first) | représentation hexadécimale (moitié haute en premier)
h | hex string (low nibble first)  | représentation hexadécimale (moitié basse en premier)
</code></pre>

<p>Un octet est composé de 8 bits. Une moitié contient donc 4 bits. Un octet
donc deux moitiés. La valeur ASCII de <code>h</code> est 104. 104 en hexadécimale s'écrit
68. Ce nombre 68 est stocké en deux moitiés. La première contient la valeur 6
sur 4 bits et la seconde contient la valeur 8. En général on utilise la notation
moitié haute puis moitié basse, de gauche à droite, la valeur 6 pour la
valeur 8.</p>

<p>Si cependant vous devez utiliser la notation moitié basse puis moitié haute, la
valeur 8 prendra la première place suivie de la valeur 6. La notation <em>moitié
basse en premier</em> donne donc 86.</p>

<p>Cette notation est utilisée pour chaque octet. Pour cette raison, la version
<em>moitié basse en premier</em> de <code>68 65 6c 6c 6f</code> est <code>86 56 c6 c6 f6</code>.</p>

<h2>Mélanger les directives</h2>

<p>Dans les exemples précédents, nous avons utilisé le caractère <code>*</code>. Cela indique
de traiter autant de caractères que possible. Par exemple :</p>

<p>A single C will get a single byte.</p>

<pre><code class="ruby">"hello".unpack('C')
#=&gt; [104]
</code></pre>

<p>Vous pouvez ajouter plus de <code>C</code> si vous le souhaitez.</p>

<pre><code class="ruby">"hello".unpack('CC')
#=&gt; [104, 101]

"hello".unpack('CCC')
#=&gt; [104, 101, 108]

"hello".unpack('CCCCC')
#=&gt; [104, 101, 108, 108, 111]
</code></pre>

<p>Plutôt que de répéter ces directives, nous pouvons utiliser un nombre pour
indiquer combien de fois la directive doit être répétée.</p>

<pre><code class="ruby">"hello".unpack('C5')
#=&gt; [104, 101, 108, 108, 111]
</code></pre>

<p>Nous pouvons utiliser <code>*</code> pour capturer toutes les octets restants.</p>

<pre><code class="ruby">"hello".unpack('C*')
#=&gt; [104, 101, 108, 108, 111]
</code></pre>

<p>Voyons un exemple dans lequel nous mélangeons les notations <em>MSB</em> et <em>LSB</em> :</p>

<pre><code class="ruby">"aa".unpack('b8B8')
#=&gt; ["10000110", "01100001"]
</code></pre>

<h2>pack est l'inverse de unpack</h2>

<p>La méthode <code>pack</code> est utilisée pour lire les données stockées. Voyons quelques
exemples d'utilisation :</p>

<pre><code class="ruby">[1000001].pack('C')
#=&gt; "A"
</code></pre>

<p>Dans le code ci-dessus, le valeur binaire est interpretée comme un entier non
signé sur 8 bits et le résultat est <code>'A'</code>.</p>

<pre><code class="ruby">['A'].pack('H')
#=&gt; "\xA0"
</code></pre>

<p>Ici, l'entrée <code>'A'</code> n'est pas le <code>A</code> ASCII mais le <code>A</code> hexadécimale. C'est
la version hexadécimale à cause de la directive <code>H</code>. Cette dernière indique à
<code>pack</code> de traiter l'entrée comme une valeur hexadécimale. Comme <code>H</code> utilise la
notation <em>moitié haute en premier</em>, puisque l'entrée ne contient qu'une moitié,
cela signifie que la deuxième moitié, la moitié basse, a la valeur <code>0</code>. L'entrée
est donc vue comme <code>'A0'</code>.</p>

<p>Comme la valeur hexadécimale <code>A0</code> ne correspond à rien dans la table ASCII, le
résultat final est laissé tel quel et vaut donc <code>'\xA0'</code>. Le préfix <code>\x</code> indique
qu'il s'agit d'une valeur hexadécimale.</p>

<p>En hexadécimale, <code>a</code> a la même valeur que <code>A</code>. Nous pouvons donc remplacer <code>A</code>
par <code>a</code> dans notre exemple précédent et le résultat reste inchangé. Essayons
pour voir :</p>

<pre><code class="ruby">['a'].pack('H')
#=&gt; "\xA0"
</code></pre>

<p>Un autre exemple :</p>

<pre><code class="ruby">['a'].pack('h')
#=&gt; "\n"
</code></pre>

<p>Dans le code ci-dessus, il y a une différence notable dans le résultat. Nous
avons changé la directive de <code>H</code> à <code>h</code>. Comme <code>h</code> indique d'utiliser la notation
<em>moitié basse en premier</em> et que l'entrée ne contient qu'une moitié, la moitié
basse vaut <code>0</code> et l'entrée est donc <code>0a</code>. Le résultat est <code>\x0A</code> et si l'on
regarde dans la table ASCII, <code>0A</code> vaut 10 et le caractère correspondant est
<code>NL</code>, <em>new line</em> soit un saut de ligne. C'est pour cela que nous voyons
s'afficher <code>\n</code> qui représente un saut de ligne.</p>

<h2>Utilisation de unpack dans le code de Rails</h2>

<p>J'ai cherché un peu dans le code source de Rails et trouvé les utilisations
suivantes de la méthode <code>unpack</code> :</p>

<pre><code class="ruby">email_address_obfuscated.unpack('C*')
'mailto:'.unpack('C*')
email_address.unpack('C*')
char.unpack('H2')
column.class.string_to_binary(value).unpack("H*")
data.unpack("m")
s.unpack("U*")
</code></pre>

<p>Nous avons déjà vu les directives <code>C*</code> et <code>H</code>, les directives <code>m</code> et <code>U</code> sont
cependant nouvelles. La première sert à donner une représentation encodée en
base64 de la valeur, la seconde retourne le caractère UTF-8 correspondant. Voici
un exemple :</p>

<pre><code class="ruby">"Hello".unpack('U*')
#=&gt; [72, 101, 108, 108, 111]
</code></pre>

<h2>Versions de test</h2>

<p>Les exmples de code précédents ont été testés avec la version <em>1.9.2</em> de Ruby.</p>

<p>NDT: J'ai testé avec les versions 1.9.3 et 2.0.0, les exemples sont toujours
valides.</p>
]]></content>
  </entry>
  
</feed>
